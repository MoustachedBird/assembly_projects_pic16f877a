MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;============================================================================== 
                      00002 ;=================================[ AJUSTES ]========================================
                      00003 ;==============================================================================
0000                  00004         ORG 0x00
                      00005 ;-----------------------[ AJUSTES PARA PROGRAMAR ]--------------------------
                      00006         LIST    P = PIC16F877A                  ; Identificación del uC en donde se ensamblará.
                      00007         #INCLUDE        P16F877.INC             ; Se usarán las variables de Microchip
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC16F877 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
Message[301]: MESSAGE: (Processor-header file mismatch.  Verify selected processor.)
                      00540         LIST
2007   3F72           00008         __CONFIG _CP_OFF & _WDT_OFF & _BODEN_ON & _PWRTE_ON & _HS_OSC & _LVP_OFF & _DEBUG_OFF & _CPD_OFF
                      00009         RADIX                   HEX                                             ; La base numérica es He
                            xadecimal por omisión
                      00010 
                      00011 ;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                      00012 ;=-=-=-=-=-=-=-=-=-=-=-==-=-=- ( MACROS ) =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                      00013 ;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                      00014         ;MACROS PARA LA PANTALLA LCD
                      00015 
                      00016         #INCLUDE "SelBank.mac"                  ; MACRO para la mejor selección de BANCOS.
                      00001 ;------------------------------------------------------------------------------
                      00002 ; MACRO para el reemplazo de la directiva BANKSEL.  
                      00003 ; Se busca tener un número mínimo de instrucciones bit Set / Clear para
                      00004 ; cambiar al bando deseado.
                      00005 ;------------------------------------------------------------------------------
                      00006 ; Ajusta el estado de los bits RP0 y RP1 del registro STATUS para establecer
                      00007 ; adecuadamente el BANCO en donde se encuentra el registro "Reg" dado como
                      00008 ; parámetro.
                      00009 ;
                      00010 ; A diferencia de la directiva BANKSEL, este macro recuerda en cuál BANCO se 
                      00011 ; encuentra el proceso de ensamblado, guardada esta información en la variable
                      00012 ; "Banco_Actual". Basándose en el valor actual de "Banco_Actual" y del valor 
                      00013 ; propuesto en la etiqueta "Reg" sólo se ejecutarán las instrucciones bsf ó
                      00014 ; bcf necesarias sobre RP0 y RP1.
                      00015 ;
                      00016 ; Reg = El REGISTRO cuyo BANCO se desea seleccionar.
                      00017 ;------------------------------------------------------------------------------
  0000                00018         VARIABLE Banco_Actual = 0x0000              ; 0000 0000 0000 0000
                      00019 
                      00020 ; Localidad de Memoria : .... .... .... ....    .... .... .... ....
                      00021 ; Registros en BANCO 0 : 0000 0000 0000 0000 -> 0000 0000 0111 1111
                      00022 ; Registros en BANCO 1 : 0000 0000 1000 0000 -> 0000 0000 1111 1111
                      00023 ; Registros en BANCO 2 : 0000 0001 0000 0000 -> 0000 0001 0111 1111
                      00024 ; Registros en BANCO 3 : 0000 0001 1000 0000 -> 0000 0001 1111 1111
                      00025 
                      00026 SelBanco MACRO Reg
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00027         IF Reg & 0x0100                                                                                 
                                                    ; Reg > 0xFF, (Bancos 2 o 3)
                      00028                 IF (Banco_Actual & 0x0100) == 0                                 ; 0000 0001 0000 0000
                      00029                         bsf STATUS, RP1
                      00030                 ENDIF
                      00031         ELSE
                      00032                 IF (Banco_Actual & 0x0100) == 0x0100            ; 0000 0001 0000 0000
                      00033                         bcf STATUS, RP1
                      00034                 ENDIF
                      00035         ENDIF
                      00036         IF Reg & 0x0080                                                                                 
                                                    ; Reg > 0x7F, (Bancos 1, 2 o 3)
                      00037                 IF (Banco_Actual & 0x0080) == 0                                 ; 0000 0000 0000 0000
                      00038                         bsf STATUS, RP0
                      00039                 ENDIF
                      00040         ELSE
                      00041                 IF (Banco_Actual & 0x0080) == 0x0080            ; 0000 000 1000 0000
                      00042                         bcf STATUS, RP0
                      00043                 ENDIF
                      00044         ENDIF
                      00045 Banco_Actual SET Reg & 0x180                                                            ; Banco_Actual 0
                            000 000X XXXX XXXX
                      00046                                                                                                         
                                                                                                    ;                       
                      00047                                  ENDM
                      00048 ;------------------------------------------------------------------------------
                      00049 
                      00050 
                      00017         #INCLUDE "Macros_LCD.mac"
                      00001 ;--------------------------------------------------------------------------------------------------
                      00002 ; MACROS para el Manejo de la LCD alfanumérica estándar
                      00003 ;
                      00004 ;LCD_Init                                                               Inicialización de manejador (Dri
                            ver) de la LCD [OBLIGATORIA].
                      00005 ;LCD_GoTo Columna, Hilera       Ajusta la posición del cursor en la DDRAM.
                      00006 ;LCD_Autoscroll_Off                             Deshabilita la función de "autoscroll" para cuando se es
                            criben caracteres a la LCD.
                      00007 ;LCD_Autoscroll_On                              Habilita la función de "autoscroll" para cuando se escri
                            ben caracteres a la LCD.
                      00008 ;LCD_Scroll_Right                                       Recorre la pantalla a la Derecha, también se afe
                            cta la posición del cursor.
                      00009 ;LCD_Scroll_Left                                        Recorre la pantalla a la Izquierda, también se a
                            fecta la posición del cursor.
                      00010 ;LCD_Cursor_Right                                       Mueve el cursor una posición a la Derecha.
                      00011 ;LCD_Cursor_Left                                        Mueve el cursor una posición a la Izquierda.
                      00012 ;LCD_Cursor Modo                                        Ajusta el tipo de Cursor. El parámetro Modo pued
                            e ser:
                      00013 ;       --> E_LCD_CURSOR_OFF            0x00    [Apagado]
                      00014 ; --> E_LCD_CURSOR_ON                   0x02    [Encendido, Fijo]
                      00015 ; --> E_LCD_CURSOR_ON_BLINK 0x03        [Encendido, Parpadeando]
                      00016 ;LCD_Off                                                                        Apagado de la pantalla d
                            e la LCD.
                      00017 ;LCD_On                                                                         Encendido de la pantalla
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                             de la LCD.
                      00018 ;LCD_Home                                                                       Cursor en posición de "H
                            ome".
                      00019 ;LCD_Clear                                                              Borrado de la pantalla, cursor e
                            n posición "Home".
                      00020 
                      00021 
                      00022 
                      00023 
                      00024 ;--------------------------------------------------------------------------------------------------
                      00025 ; -----[ Definición de BITS en la palabra de control ]-----
                      00026 ; Entry Mode Set Control Bits
                      00027 #DEFINE BIT_S_AUTOSCROLL_ON     (1<<0)          ; !< Enable autoscroll. For use with Entry Mode Set comm
                            and
                      00028 #DEFINE BIT_S_AUTOSCROLL_OFF    0                               ; !< Disable autoscroll. For use with En
                            try Mode Set command
                      00029 #DEFINE BIT_ID_INCREMENT_CURSOR (1<<1)  ; !< Increment cursor position after each char. For use with Ent
                            ry Mode Set command
                      00030 #DEFINE BIT_ID_DECREMENT_CURSOR 0                               ; !< Decrement cursor position after eac
                            h char. For use with Entry Mode Set command
                      00031 
                      00032 ; Display On/Off Control Bits
                      00033 #DEFINE BIT_B_CURSOR_BLINK      (1<<0)
                      00034 #DEFINE BIT_B_CURSOR_NO_BLINK   0
                      00035 #DEFINE BIT_C_CURSOR_ON         (1<<1)
                      00036 #DEFINE BIT_C_CURSOR_OFF        0
                      00037 #DEFINE BIT_D_DISPLAY_ON        (1<<2)
                      00038 #DEFINE BIT_D_DISPLAY_OFF       0
                      00039 
                      00040 ; Cursor / Display Shift Control Bits
                      00041 #DEFINE BIT_RL_SHIFT_RIGHT      (1<<2)
                      00042 #DEFINE BIT_RL_SHIFT_LEFT       0
                      00043 #DEFINE BIT_SC_SHIFT_DISPLAY    (1<<3)          ;!< Seting this bit causes a display scroll
                      00044 #DEFINE BIT_SC_SHIFT_CURSOR     0                                               ;!< Clearing this bits c
                            auses a cursor move
                      00045 
                      00046 ; Function set Control Bits
                      00047 #DEFINE BIT_F_FONT_5_10         (1<<2)
                      00048 #DEFINE BIT_F_FONT_5_8          0
                      00049 #DEFINE BIT_N_DISP_LINES_2      (1<<3)
                      00050 #DEFINE BIT_N_DISP_LINES_1      0
                      00051 #DEFINE BIT_DL_DATALENGTH_8     (1<<4)
                      00052 #DEFINE BIT_DL_DATALENGTH_4     0
                      00053 
                      00054 ; Define "boolean" values
                      00055 #IFNDEF TRUE
                      00056 #DEFINE TRUE 1
                      00057 #ENDIF
                      00058 #IFNDEF FALSE
                      00059 #DEFINE FALSE 0
                      00060 #ENDIF
                      00061 ;--------------------------------------------------------------------------------------------------
                      00062 ; Enumeration defining the HD44780 commands
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00063 #DEFINE E_CLEAR_DISPLAY 0x01
                      00064 #DEFINE E_RETURN_HOME 0x02
                      00065 #DEFINE E_ENTRY_MODE_SET 0x04
                      00066 #DEFINE E_DISPLAY_ON_OFF_CTRL 0x08
                      00067 #DEFINE E_CURSOR_DISPLAY_SHIFT 0x10
                      00068 #DEFINE E_FUNCTION_SET 0x20
                      00069 #DEFINE E_SET_CGRAM_ADDR 0x40
                      00070 #DEFINE E_SET_DDRAM_ADDR 0x80
                      00071 ;--------------------------------------------------------------------------------------------------
                      00072 ; This enumeration defines the available cursor modes
                      00073 #DEFINE E_LCD_CURSOR_OFF  0x00
                      00074 #DEFINE E_LCD_CURSOR_ON  0x02
                      00075 #DEFINE E_LCD_CURSOR_ON_BLINK 0x03
                      00076 ;--------------------------------------------------------------------------------------------------
                      00077 ;* Represents the IO pins used to control the LCD
                      00078 ;       E_D0_PIN = 0,
                      00079 ;       E_D1_PIN,
                      00080 ;       E_D2_PIN,
                      00081 ;       E_D3_PIN,
                      00082 ;       E_D4_PIN,
                      00083 ;       E_D5_PIN,
                      00084 ;       E_D6_PIN,
                      00085 ;       E_D7_PIN,
                      00086 ;       E_EN_PIN,
                      00087 ;       E_RS_PIN,
                      00088 ;       E_RW_PIN,
                      00089 ;
                      00090 ;--------------------------------------------------------------------------------------------------
                      00091 ;uint8_t lcd_init(void * iodata, uint8_t cols, uint8_t rows)
                      00092 ;{
                      00093 ;       // Initialize IO pins
                      00094 ;       iomode = lcd_ioinit(iodata);
                      00095 ;       lcdrows = rows;
                      00096 ;       lcdcolumns = cols;
                      00097 ;
                      00098 ;       // Initial delay after power-up
                      00099 ;       delay_ms(100);
                      00100 ;
                      00101 ;       //  Check if LCD interface is 8 or 4 bit mode
                      00102 ;       if (iomode == 4) {
                      00103 ;               // Begin LCD controller Initialization (HD44780 page 45-46)
                      00104 ;               // Put a loop here to send these three?
                      00105 ;               lcd_iowrite4(0x03);
                      00106 ;               delay_ms(5);
                      00107 ;               lcd_iowrite4(0x03);
                      00108 ;               delay_us(120);
                      00109 ;               lcd_iowrite4(0x03);
                      00110 ;               delay_us(120);
                      00111 ;               lcd_iowrite4(0x02);
                      00112 ;               delay_us(120);
                      00113 ;               lcd_command(E_FUNCTION_SET | BIT_DL_DATALENGTH_4 | BIT_N_DISP_LINES_2 | BIT_F_FONT_5_10)
                            ;
                      00114 ;               delay_us(50);
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00115 ;       } else if (iomode == 8) {
                      00116 ;               // Begin LCD controller Initialization (HD44780 page 45-46)
                      00117 ;               lcd_command(E_FUNCTION_SET);
                      00118 ;               delay_ms(5);
                      00119 ;               lcd_command(E_FUNCTION_SET);
                      00120 ;               delay_us(120);
                      00121 ;               lcd_command(E_FUNCTION_SET);
                      00122 ;               delay_us(120);
                      00123 ;               lcd_command(E_FUNCTION_SET | BIT_DL_DATALENGTH_8 | BIT_N_DISP_LINES_2 | BIT_F_FONT_5_10)
                            ;
                      00124 ;               delay_us(50);
                      00125 ;       }
                      00126 ;       // Configure display after power up
                      00127 ;       lcd_command(E_DISPLAY_ON_OFF_CTRL | BIT_D_DISPLAY_OFF);
                      00128 ;       delay_us(50);
                      00129 ;       lcd_command(E_CLEAR_DISPLAY);
                      00130 ;       delay_ms(2);
                      00131 ;       lcd_command(E_ENTRY_MODE_SET | BIT_S_AUTOSCROLL_OFF | BIT_ID_INCREMENT_CURSOR);
                      00132 ;       delay_us(50);
                      00133 ;
                      00134 ;       return TRUE;
                      00135 ;}
                      00136 
                      00137 ;void lcd_puts(const char * string)
                      00138 ;{
                      00139 ;       while (*string != '\0')
                      00140 ;               lcd_write(*string++);
                      00141 ;}
                      00142 
                      00143 ;void lcd_create_char(uint8_t charnum, const uint8_t * chardata)
                      00144 ;{
                      00145 ;       uint8_t i;
                      00146 ;       charnum &= 0x07;
                      00147 ;       lcd_command(E_SET_CGRAM_ADDR | (charnum << 3));
                      00148 ;       for (i = 0; i < 8; i++)
                      00149 ;               lcd_write(chardata[i]);
                      00150 ;
                      00151 ;--------------------------------------------------------------------------------------------------
                      00152 ;-----[ Inicialización de manejador (Driver) de LCD [OBLIGATORIA] ]-----
                      00153 LCD_Init  MACRO                                                                                         
                            ;
                      00154                                                 VARIABLE dispctrl = 0x00        ; Se emplea en algunos M
                            acros.
                      00155                                                 call            LCD_Inicio
                      00156                                         ENDM
                      00157 ;--------------------------------------------------------------------------------------------------
                      00158 ;-----[ Borrado de pantalla, cursor en "Home" ]-----
                      00159 LCD_Clear       MACRO                                                                                   
                            ; 
                      00160                                                         movlw   E_CLEAR_DISPLAY         ;
                      00161                                                         call    SendCom                                 
                                    ; Tarda 1.52 mS
                      00162                                                 ENDM
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00163 ;--------------------------------------------------------------------------------------------------     
                      00164 ;-----[ Cursor en posición de "Home" ]-----                                             
                      00165 LCD_Home        MACRO                                                                   ; 
                      00166                                                         movlw   E_RETURN_HOME   ; 
                      00167                                                         call    SendCom                         ; Tarda 
                            1.52 mS
                      00168                                                 ENDM
                      00169 ;--------------------------------------------------------------------------------------------------     
                      00170 ;-----[ Encendido de la pantalla de la LCD ]-----                                               
                      00171 LCD_On                  MACRO                                                                   ; 
                      00172 dispctrl SET dispctrl | BIT_D_DISPLAY_ON        ; dispctrl |= BIT_D_DISPLAY_ON;
                      00173                                                         movlw           E_DISPLAY_ON_OFF_CTRL
                      00174                                                         iorlw           dispctrl
                      00175                                                         call            SendCom                 ; lcd_co
                            mmand(E_DISPLAY_ON_OFF_CTRL | dispctrl);
                      00176                                                 ENDM
                      00177 ;--------------------------------------------------------------------------------------------------     
                      00178 ;-----[ Apagado de la pantalla de la LCD ]-----                                         
                      00179 LCD_Off                 MACRO                                                                           
                                    ; 
                      00180 dispctrl SET dispctrl & ~BIT_D_DISPLAY_ON                       ; dispctrl &= ~BIT_D_DISPLAY_ON;
                      00181                                                         movlw   E_DISPLAY_ON_OFF_CTRL
                      00182                                                         iorlw   dispctrl                
                      00183                                                         call    SendCom                         ; lcd_co
                            mmand(E_DISPLAY_ON_OFF_CTRL | dispctrl); delay_us(50)
                      00184                                                 ENDM
                      00185 ;--------------------------------------------------------------------------------------------------     
                      00186 ;-----[ Ajusta el tipo de Cursor ]-----
                      00187 LCD_Cursor      MACRO  Modo                                     ; 
                      00188 
                      00189 ;               El parámetro Modo puede ser:
                      00190 ;       --> E_LCD_CURSOR_OFF            0x00    [Apagado]
                      00191 ; --> E_LCD_CURSOR_ON                   0x02    [Encendido, Fijo]
                      00192 ; --> E_LCD_CURSOR_ON_BLINK 0x03        [Encendido, Parpadeando]
                      00193 
                      00194 dispctrl SET dispctrl & 0xFC                    ; dispctrl &= 0xFC;
                      00195 dispctrl SET dispctrl | Modo                    ; dispctrl |= Modo;
                      00196                                                         movlw   E_DISPLAY_ON_OFF_CTRL
                      00197                                                         iorlw   dispctrl                
                      00198                                                         call    SendCom                         ; lcd_co
                            mmand(E_DISPLAY_ON_OFF_CTRL | dispctrl);
                      00199                                                 ENDM
                      00200 ;--------------------------------------------------------------------------------------------------     
                      00201 ;-----[ Mueve el cursor una posición a la Izquierda ]-----
                      00202 LCD_Cursor_Left MACRO                                                   ; 
                      00203 
                      00204 ; lcd_command(E_CURSOR_DISPLAY_SHIFT | BIT_SC_SHIFT_CURSOR | BIT_RL_SHIFT_LEFT);
                      00205                                                                         movlw           E_CURSOR_DISPLAY
                            _SHIFT
                      00206                                                                         iorlw           BIT_SC_SHIFT_CUR
                            SOR
                      00207                                                                         iorlw           BIT_RL_SHIFT_LEF
                            T
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00208                                                                         call            SendCom
                      00209                                                                 ENDM
                      00210 ;--------------------------------------------------------------------------------------------------     
                                                                                    
                      00211 ;-----[ Mueve el cursor una posición a la Derecha ]-----
                      00212 LCD_Cursor_Right        MACRO                                                   ;                       
                                                                    
                      00213 ;lcd_command(E_CURSOR_DISPLAY_SHIFT | BIT_SC_SHIFT_CURSOR | BIT_RL_SHIFT_RIGHT);                        
                                                            
                      00214                                                                                 movlw           E_CURSOR
                            _DISPLAY_SHIFT
                      00215                                                                                 iorlw           BIT_SC_S
                            HIFT_CURSOR
                      00216                                                                                 iorlw           BIT_RL_S
                            HIFT_RIGHT
                      00217                                                                                 call            SendCom
                      00218                                                                         ENDM
                      00219 ;--------------------------------------------------------------------------------------------------     
                                                                                            
                      00220 ;-----[ Recorre la pantalla a la Izquierda, también se afecta la posición del cursor ]-----
                      00221 LCD_Scroll_Left         MACRO                                           ; 
                      00222 ;lcd_command(E_CURSOR_DISPLAY_SHIFT | BIT_SC_SHIFT_DISPLAY | BIT_RL_SHIFT_LEFT);                        
                                                                                                                    
                      00223                                                                                 movlw           E_CURSOR
                            _DISPLAY_SHIFT
                      00224                                                                                 iorlw           BIT_SC_S
                            HIFT_DISPLAY
                      00225                                                                                 iorlw           BIT_RL_S
                            HIFT_LEFT
                      00226                                                                                 call            SendCom
                      00227                                                                         ENDM
                      00228 ;--------------------------------------------------------------------------------------------------     
                                                                                            
                      00229 ;-----[ Recorre la pantalla a la Derecha, también se afecta la posición del cursor ]-----
                      00230 LCD_Scroll_Right        MACRO                                           ; 
                      00231 ;lcd_command(E_CURSOR_DISPLAY_SHIFT | BIT_SC_SHIFT_DISPLAY | BIT_RL_SHIFT_RIGHT);                       
                                                                                                                    
                      00232                                                                                 movlw           E_CURSOR
                            _DISPLAY_SHIFT
                      00233                                                                                 iorlw           BIT_SC_S
                            HIFT_DISPLAY
                      00234                                                                                 iorlw           BIT_RL_S
                            HIFT_RIGHT
                      00235                                                                                 call            SendCom
                      00236                                                                         ENDM                            
                                                                    
                      00237 ;--------------------------------------------------------------------------------------------------     
                                                                                            
                      00238 ;-----[ Habilita la función de "autoscroll" para cuando se escriben caracteres a la LCD ]-----
                      00239 LCD_Autoscroll_On               MACRO                                           ; 
                      00240 ;lcd_command(E_ENTRY_MODE_SET | BIT_S_AUTOSCROLL_ON | BIT_ID_INCREMENT_CURSOR);                         
                                                                                                            
                      00241                                                                                         movlw           
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            E_ENTRY_MODE_SET
                      00242                                                                                         iorlw           
                            BIT_S_AUTOSCROLL_ON
                      00243                                                                                         iorlw           
                            BIT_ID_INCREMENT_CURSOR
                      00244                                                                                         call            
                            SendCom
                      00245                                                                                 ENDM                    
                      00246 ;--------------------------------------------------------------------------------------------------     
                      00247 ;-----[ Deshabilita la función de "autoscroll" para cuando se escriben caracteres a la LCD ]-----
                      00248 LCD_Autoscroll_Off      MACRO                                           ; 
                      00249 ;lcd_command(E_ENTRY_MODE_SET | BIT_S_AUTOSCROLL_OFF | BIT_ID_INCREMENT_CURSOR);                        
                                                                                                                    
                      00250                                                                                         movlw           
                            E_ENTRY_MODE_SET
                      00251                                                                                         iorlw           
                            BIT_S_AUTOSCROLL_OFF
                      00252                                                                                         iorlw           
                            BIT_ID_INCREMENT_CURSOR
                      00253                                                                                         call            
                            SendCom
                      00254                                                                                 ENDM                    
                      00255 ;--------------------------------------------------------------------------------------------------     
                                                                                                                            
                      00256 ;-----[ Ajusta la posición del cursor en la DDRAM. Si el cursor está habiilitado, se mostrará. ]
                      00257 LCD_GoTo                                                MACRO           Columna, Hilera 
                      00258         LOCAL Direccion_Hilera
                      00259 ; Se aplican límites para Hileras y Columnas:
                      00260 ;       IF (Hilera > Hileras)
                      00261 ;               Hilera_Final SET Hileras - 1
                      00262 ;       ENDIF
                      00263 ;       IF (Columna > Columnas) 
                      00264 ;               Columna_Final SET Columnas - 1
                      00265 ;       ENDIF
                      00266 
                      00267 ; PARA LCD de 20x4
                      00268 ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                      00269 ;#define LCD_LINEA2 0xC0 // Direccion de memoria para la segunda linea
                      00270 ;#define LCD_LINEA3 0x94 // Direccion de memoria para la tercera linea
                      00271 ;#define LCD_LINEA4 0xD4 // Direccion de memoria para la cuarta linea
                      00272                                         
                      00273 ; PARA LCD de 16x4
                      00274 ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                      00275 ;#define LCD_LINEA2 0x40 // Direccion de memoria para la segunda linea
                      00276 ;#define LCD_LINEA3 0x14 // Direccion de memoria para la tercera linea
                      00277 ;#define LCD_LINEA4 0x54 // Direccion de memoria para la cuarta linea                                   
                      00278 
                      00279 ; Cálculo de la máscara en función del número de línea en donde se coloca el cursor:
                      00280 ;            |      V I S I B L E S      |     No Mostrados       |
                      00281 ; LÍNEA 0 --> 00 01 02 03 04 05 ... 0E 0F 10 11 12 13 14 ... 26 27    En Total 40 Caracteres
                      00282 ; LÍNEA 1 --> 40 41 42 43 44 45 ... 4E 4F 50 51 52 53 54 ... 66 67    En Total 40 Caracteres
                      00283 ; LÍNEA 2 --> 14 15 16 17 18 19 ... 22 23 24 25 26 27 28 ... 3A 3B    En Total 40 Caracteres
                      00284 ; LÍNEA 3 --> 54 55 56 57 58 59 ... 62 63 64 65 66 67 68 ... 80 81    En Total 40 Caracteres
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00285 
                      00286         IF (Columnas == 16)
                      00287                 IF (Hilera == 0)
                      00288                         Direccion_Hilera SET 0x00
                      00289                 ENDIF   
                      00290                 IF (Hilera == 1)
                      00291                         Direccion_Hilera SET 0x40
                      00292                 ENDIF
                      00293                 IF (Hilera == 2)
                      00294                         Direccion_Hilera SET 0x14
                      00295                 ENDIF
                      00296                 IF (Hilera == 3)
                      00297                         Direccion_Hilera SET 0x54
                      00298                 ENDIF
                      00299         ENDIF
                      00300         
                      00301         IF (Columnas == 20)
                      00302                 IF (Hilera == 0)
                      00303                         Direccion_Hilera SET 0x00
                      00304                 ENDIF   
                      00305                 IF (Hilera == 1)
                      00306                         Direccion_Hilera SET 0xC0
                      00307                 ENDIF
                      00308                 IF (Hilera == 2)
                      00309                         Direccion_Hilera SET 0x94
                      00310                 ENDIF
                      00311                 IF (Hilera == 3)
                      00312                         Direccion_Hilera SET 0xD4
                      00313                 ENDIF
                      00314         ENDIF
                      00315         
                      00316 ; lcd_command(E_SET_DDRAM_ADDR | (col + rowaddr[ row ]));
                      00317                                                                                         movlw           
                            Direccion_Hilera
                      00318                                                                                         addlw           
                            Columna
                      00319                                                                                         iorlw           
                            E_SET_DDRAM_ADDR
                      00320                                                                                         call            
                            SendCom
                      00321                                                                                 ENDM                    
                      00322 ;--------------------------------------------------------------------------------------------------     
                      00323                                                                         
                      00324                                                                 
                      00325                                                                 
                      00326                                                                 
                      00327 ;--------------------------------------------------------------------------------------------------     
                                                                                                            
                      00328                                                                                                         
                                                            
                      00018         #INCLUDE "SaltaSiMacros.mac"
                      00001 ;MACROS SALTA_SI by MoustachedBird (beta)
                      00002 
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00003 ;-----[ Macro Load ]-----
                      00004 ; Carga un valor en una variables
                      00005 Load    MACRO   Var,Valor
                      00006         movlw   Valor   ; Toma el valor de la literal
                      00007         movwf   Var     ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
                      00008         ENDM
                      00009         ; Alias para el MACRO anterior:
                      00010         #DEFINE carga Load
                      00011 
                      00012 ;-----[ Macro llena ]-----
                      00013 ; Carga un valor en una variables
                      00014 llena   MACRO   Var1,Var2
                      00015         movfw   Var2    ; Toma el valor de la literal
                      00016         movwf   Var1    ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
                      00017         ENDM
                      00018 
                      00019 ;-----[ Macro imprime variable]-----
                      00020 ; imprime una variable
                      00021 imprimevar      MACRO   Var
                      00022         movfw   Var     ; 
                      00023         movwf   general_lcd
                      00024         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
                      00025         movfw general_lcd
                      00026         call  LCD_Char
                      00027 
                      00028         ENDM
                      00029 
                      00030 ;-----[ Macro imprime literal]-----
                      00031 ; imprime una variable
                      00032 imprimelit      MACRO   Lit
                      00033         movlw   Lit     ; 
                      00034         movwf   general_lcd
                      00035         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
                      00036         movfw general_lcd
                      00037         call  LCD_Char
                      00038 
                      00039         ENDM
                      00040 
                      00041 
                      00042 ;==============================================================================
                      00043 ;===========================[ VARIABLE - LITERAL ]=============================
                      00044 ;==============================================================================
                      00045 
                      00046 SaltaSiVarIgualConst    MACRO   Registro1_m1, Constante1_m1, Salto_m1
                      00047         movlw   Constante1_m1   ; Se emplea la resta para la comparación.
                      00048         subwf   Registro1_m1,W  ; (W)=(Registro1_m1) - Constante_m1
                      00049         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
                      00050                 goto    Salto_m1        ; Si Z=1 son iguales, por lo tanto salta  
                      00051         ENDM
                      00052 
                      00053 ;-----------------------------------------------------------------------------
                      00054 SaltaSiVarDiferenteConst        MACRO   Registro1_m2, Constante1_m2, Salto_m2
                      00055         movlw   Constante1_m2   ; Se emplea la resta para la comparación.
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00056         subwf   Registro1_m2,W  ; (W)=(Registro1_m2) - Constante_m2
                      00057         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
                      00058         goto    Salto_m2                ; Si Z=0 son diferentes, por lo tanto salta
                      00059         ENDM
                      00060 
                      00061 ;-----------------------------------------------------------------------------
                      00062 SaltaSiVarMayorConst    MACRO   Registro1_m3, Constante1_m3, Salto_m3
                      00063         movlw   Constante1_m3   ; Se emplea la resta para la comparación.
                      00064         subwf   Registro1_m3,W  ; (W)=(Registro1_m3) - Constante_m3
                      00065         btfsc   STATUS,C                ; ¿Carry=1? Si Carry=0 hubo prestamo y si Carry=1 no hubo presta
                            mo
                      00066                 goto ComprobarBanderaZ_m3 ;Si no hubo bit de prestamo puede ser igual o mayor por lo tan
                            to comprueba bandera de 0
                      00067         goto Salir_m3 ;Si hubo bit de prestamo, es menor, sale de la macro
                      00068 
                      00069         ComprobarBanderaZ_m3:
                      00070                 btfss   STATUS,Z                ;Si la Bandera Z de STATUS es 1, son iguales
                      00071                         goto    Salto_m3                ; La bandera Z es 0, por lo tanto es mayor
                      00072         
                      00073         Salir_m3: ; Para Salir de la macro en caso de que ninguna opción se cumpla
                      00074         ENDM
                      00075 
                      00076 ;-----------------------------------------------------------------------------
                      00077 SaltaSiVarMenorConst    MACRO   Registro1_m4, Constante1_m4, Salto_m4
                      00078         movlw   Constante1_m4   ; Se emplea la resta para la comparación.
                      00079         subwf   Registro1_m4,0  ; (W)=(Registro1_m4) - Constante_m4
                      00080         btfss   STATUS,C                ; ¿Carry=1? Si Carry=0 hubo prestamo y si Carry=1 no hubo presta
                            mo
                      00081         goto    Salto_m4                ; Si hubo bit de prestamo por lo tanto es menor
                      00082         ENDM
                      00083 
                      00084 ;-----------------------------------------------------------------------------
                      00085 SaltaSiVarMayorIgualConst       MACRO   Registro1_m5, Constante1_m5, Salto_m5
                      00086         movlw   Constante1_m5   ; Se emplea la resta para la comparación.
                      00087         subwf   Registro1_m5,0  ; (W)=(Registro1_m5) - Constante_m5
                      00088         btfsc   STATUS,C                ; ¿Carry=1? Si Carry=0 hubo prestamo y si Carry=1 no hubo presta
                            mo
                      00089         goto    Salto_m5                ; No hubo bit de prestamo por lo tanto es mayor
                      00090         ENDM
                      00091 
                      00092 ;-----------------------------------------------------------------------------
                      00093 SaltaSiVarMenorIgualConst       MACRO   Registro1_m6, Constante1_m6, Salto_m6
                      00094         movlw   Constante1_m6   ; Se emplea la resta para la comparación.
                      00095         subwf   Registro1_m6,W  ; (W)=(Registro1_m6) - Constante_m6
                      00096         btfsc   STATUS,C                ; ¿Carry=1? Si Carry=0 hubo prestamo y si Carry=1 no hubo presta
                            mo
                      00097                 goto Salir_m6 ;No hubo bit de prestamo por lo tanto sale de la macro
                      00098         
                      00099         Si_es_menor_m6:
                      00100                 goto    Salto_m6                ; La bandera Z es 0, por lo tanto es mayor
                      00101         
                      00102         Salir_m6: ; Para Salir de la macro en caso de que ninguna opción se cumpla
                      00103                 btfsc   STATUS,Z                ;Si la Bandera Z de STATUS es 1,  son iguales
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00104                         goto    Salto_m6                ; Si no son iguales, entonces sal de la macro
                      00105 
                      00106         ENDM
                      00107 
                      00108 ;==============================================================================
                      00109 ;==========================[ VARIABLE - VARIABLE ]=============================
                      00110 ;==============================================================================
                      00111 
                      00112 SaltaSiVarIgualVar      MACRO   Registro1_m7, Registro2_m7, Salto_m7
                      00113         movfw   Registro2_m7    ; Se emplea la resta para la comparación.
                      00114         subwf   Registro1_m7,W  ; (W)=(Registro1_m7) - Constante_m7
                      00115         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
                      00116                 goto    Salto_m7        ; Si Z=1 son iguales, por lo tanto salta  
                      00117         ENDM
                      00118 
                      00119 ;-----------------------------------------------------------------------------
                      00120 SaltaSiVarDiferenteVar  MACRO   Registro1_m8, Registro2_m8, Salto_m8
                      00121         movfw   Registro2_m8    ; Se emplea la resta para la comparación.
                      00122         subwf   Registro1_m8,W  ; (W)=(Registro1_m8) - Constante_m8
                      00123         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
                      00124         goto    Salto_m8                ; Si Z=0 son diferentes, por lo tanto salta
                      00125         ENDM
                      00126 
                      00127 ;-----------------------------------------------------------------------------
                      00128 SaltaSiVarMayorVar      MACRO   Registro1_m9, Registro2_m9, Salto_m9
                      00129         movfw   Registro2_m9    ; Se emplea la resta para la comparación.
                      00130         subwf   Registro1_m9,W  ; (W)=(Registro1_m9) - Constante_m9
                      00131         btfsc   STATUS,C                ; ¿Carry=1? Si Carry=0 hubo prestamo y si Carry=1 no hubo presta
                            mo
                      00132                 goto ComprobarBanderaZ_m9 ;Si no hubo bit de prestamo puede ser igual o mayor por lo tan
                            to comprueba bandera de 0
                      00133         goto Salir_m9 ;Si hubo bit de prestamo, es menor, sale de la macro
                      00134 
                      00135         ComprobarBanderaZ_m9:
                      00136                 btfss   STATUS,Z                ;Si la Bandera Z de STATUS es 1, son iguales
                      00137                         goto    Salto_m9                ; La bandera Z es 0, por lo tanto es mayor
                      00138         
                      00139         Salir_m9: ; Para Salir de la macro en caso de que ninguna opción se cumpla
                      00140         ENDM
                      00141 
                      00142 ;-----------------------------------------------------------------------------
                      00143 SaltaSiVarMenorVar      MACRO   Registro1_m10, Registro2_m10, Salto_m10
                      00144         movfw   Registro2_m10   ; Se emplea la resta para la comparación.
                      00145         subwf   Registro1_m10,W ; (W)=(Registro1_m10) - Constante_m10
                      00146         btfss   STATUS,C                ; ¿Carry=1? Si Carry=0 hubo prestamo y si Carry=1 no hubo presta
                            mo
                      00147         goto    Salto_m10               ; Si hubo bit de prestamo por lo tanto es menor
                      00148         ENDM
                      00149 ;-----------------------------------------------------------------------------
                      00150 SaltaSiVarMayorIgualVar MACRO   Registro1_m11, Registro2_m11, Salto_m11
                      00151         movfw   Registro2_m11   ; Se emplea la resta para la comparación.
                      00152         subwf   Registro1_m11,W ; (W)=(Registro1_m11) - Constante_m11
                      00153         btfsc   STATUS,C                ; ¿Carry=1? Si Carry=0 hubo prestamo y si Carry=1 no hubo presta
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            mo
                      00154         goto    Salto_m11               ; No hubo bit de prestamo por lo tanto es mayor
                      00155         ENDM
                      00156 
                      00157 ;-----------------------------------------------------------------------------
                      00158 SaltaSiVarMenorIgualVar1        MACRO   Registro1_m12, Registro2_m12, Salto_m12
                      00159         movfw   Registro2_m12   ; Se emplea la resta para la comparación.
                      00160         subwf   Registro1_m12,W ; (W)=(Registro1_m6) - Constante_m6
                      00161         btfsc   STATUS,C                ; ¿Carry=1? Si Carry=0 hubo prestamo y si Carry=1 no hubo presta
                            mo
                      00162                 goto Salir_m121 ;No hubo bit de prestamo por lo tanto sale de la macro
                      00163         
                      00164         goto    Salto_m12               ; La bandera Z es 0, por lo tanto es mayor
                      00165         
                      00166 Salir_m121: ; Para Salir de la macro en caso de que ninguna opción se cumpla
                      00167                 btfsc   STATUS,Z                ;Si la Bandera Z de STATUS es 1,  son iguales
                      00168                         goto    Salto_m12               ; Si no son iguales, entonces sal de la macro
                      00169 
                      00170         ENDM
                      00171 
                      00172 SaltaSiVarMenorIgualVar2        MACRO   Registro1_m12, Registro2_m12, Salto_m12
                      00173         movfw   Registro2_m12   ; Se emplea la resta para la comparación.
                      00174         subwf   Registro1_m12,W ; (W)=(Registro1_m6) - Constante_m6
                      00175         btfsc   STATUS,C                ; ¿Carry=1? Si Carry=0 hubo prestamo y si Carry=1 no hubo presta
                            mo
                      00176                 goto Salir_m122 ;No hubo bit de prestamo por lo tanto sale de la macro
                      00177         
                      00178         goto    Salto_m12               ; La bandera Z es 0, por lo tanto es mayor
                      00179         
                      00180 Salir_m122: ; Para Salir de la macro en caso de que ninguna opción se cumpla
                      00181                 btfsc   STATUS,Z                ;Si la Bandera Z de STATUS es 1,  son iguales
                      00182                         goto    Salto_m12               ; Si no son iguales, entonces sal de la macro
                      00183 
                      00184         ENDM
                      00185 
                      00186 SaltaSiVarMenorIgualVar3        MACRO   Registro1_m12, Registro2_m12, Salto_m12
                      00187         movfw   Registro2_m12   ; Se emplea la resta para la comparación.
                      00188         subwf   Registro1_m12,W ; (W)=(Registro1_m6) - Constante_m6
                      00189         btfsc   STATUS,C                ; ¿Carry=1? Si Carry=0 hubo prestamo y si Carry=1 no hubo presta
                            mo
                      00190                 goto Salir_m123 ;No hubo bit de prestamo por lo tanto sale de la macro
                      00191         
                      00192         goto    Salto_m12               ; La bandera Z es 0, por lo tanto es mayor
                      00193         
                      00194 Salir_m123: ; Para Salir de la macro en caso de que ninguna opción se cumpla
                      00195                 btfsc   STATUS,Z                ;Si la Bandera Z de STATUS es 1,  son iguales
                      00196                         goto    Salto_m12               ; Si no son iguales, entonces sal de la macro
                      00197 
                      00198         ENDM
                      00199 
                      00200 ;==============================================================================
                      00201 ;==============================================================================
                      00202 ;==============================================================================
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00019         #INCLUDE "EEPROM.mac"           
                      00001 ;MACROS EEPROM by MoustachedBird
                      00002 
                      00003 ;IMPORTANTE!!!: EN CASO DE MANEJAR INTERRUPCIONES Y QUERER GRABAR
                      00004 ;EN LA EEPROM DESCOMENTAR LAS LINEAS DE CODIGO CORRESPONDIENTES EN LAS
                      00005 ;MACROS DE ESTE DOCUMENTO
                      00006 
                      00007 banco3 MACRO
                      00008         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
                      00009         bsf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
                      00010         ENDM
                      00011 
                      00012 banco2 MACRO
                      00013         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
                      00014         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
                      00015         ENDM
                      00016 
                      00017 banco1 MACRO
                      00018         bcf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
                      00019         bsf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
                      00020         ENDM
                      00021 
                      00022 banco0 MACRO
                      00023         bcf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
                      00024         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
                      00025         ENDM
                      00026 
                      00027 ;La direccion de la EEPROM del PIC16F877A puede ir de 
                      00028 ;0x0000 a 0x1FFF
                      00029 
                      00030 ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                      00031 ;Macro para escribir una literal (valor numerico) en la EEPROM
                      00032 WRITE_EEPROMlit MACRO direccion,numero
                      00033                 banco2
                      00034                 movlw numero
                      00035                 movwf   EEDATA          ;DATO = numero
                      00036                 movlw direccion
                      00037                 movwf   EEADR           ;DIRECCION=direccion
                      00038                 banco3                  ;HABILITA EL BANCO 3
                      00039                 bcf     EECON1,EEPGD    ;APUNTA HACIA EEPROM DE DATOS           
                      00040                 bsf     EECON1,WREN     ;HABILITA ESCRITURA EN EEPROM
                      00041                 ;bcf INTCON, GIE        ;DESHABILITA INTERRUPCIONES (solo cuando haya interrupciones)   
                             
                      00042                 movlw   H'55'           ;PREPARA SECUENCIA DE SEGURIDAD
                      00043                 movwf   EECON2          ;ESCRIBE PRIMER DATO DE SECUENCIA
                      00044                 movlw   H'AA'           ;SEGUNDO DATO
                      00045                 movwf   EECON2          ;ESCRIBE SEGUNDO DATO DE SECUENCIA
                      00046                 bsf     EECON1,WR       ;INICIA CICLO DE ESCRITURA
                      00047                 btfsc   EECON1,WR       ;MALLA PARA ESPERAR AL FINAL DEL CICLO
                      00048         goto    $-1              ;SI WR=1, CICLO DE ESCRITURA AUN NO TERMINA (regresa a la linea anterio
                            r)
                      00049                 bcf     EECON1, WREN    ;DESHABILITA ESCRITURA
                      00050                 ;bsf            INTCON, GIE     ;HABILITA INTERRUPCIONES  (descomentar cuando haya inter
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            rupciones)              
                      00051                 banco0
Warning[205]: Found directive in column 1. (ENDM)
                      00052 ENDM
                      00053 
                      00054 ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                      00055 ;Macro para escribir una variable (registro) en la EEPROM
                      00056 WRITE_EEPROMvar MACRO direccion,reg
                      00057                 banco2
                      00058                 movfw reg                       
                      00059                 movwf   EEDATA          ;DATO = reg
                      00060                 movlw direccion
                      00061                 movwf   EEADR           ;DIRECCION=direccion
                      00062                 banco3                  ;HABILITA EL BANCO 3
                      00063                 bcf     EECON1,EEPGD    ;APUNTA HACIA EEPROM DE DATOS           
                      00064                 bsf     EECON1,WREN     ;HABILITA ESCRITURA EN EEPROM
                      00065                 ;bcf INTCON, GIE        ;DESHABILITA INTERRUPCIONES (solo cuando haya interrupciones)   
                             
                      00066                 movlw   H'55'           ;PREPARA SECUENCIA DE SEGURIDAD
                      00067                 movwf   EECON2          ;ESCRIBE PRIMER DATO DE SECUENCIA
                      00068                 movlw   H'AA'           ;SEGUNDO DATO
                      00069                 movwf   EECON2          ;ESCRIBE SEGUNDO DATO DE SECUENCIA
                      00070                 bsf     EECON1,WR       ;INICIA CICLO DE ESCRITURA
                      00071                 btfsc   EECON1,WR       ;MALLA PARA ESPERAR AL FINAL DEL CICLO
                      00072         goto    $-1              ;SI WR=1, CICLO DE ESCRITURA AUN NO TERMINA (regresa a la linea anterio
                            r)
                      00073                 bcf     EECON1, WREN    ;DESHABILITA ESCRITURA
                      00074                 ;bsf            INTCON, GIE     ;HABILITA INTERRUPCIONES  (descomentar cuando haya inter
                            rupciones)              
                      00075                 banco0
Warning[205]: Found directive in column 1. (ENDM)
                      00076 ENDM
                      00077 
                      00078 ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                      00079 ;Macro para leer una direccion de la EEPROM y almacenar en en registro
                      00080 READ_EEPROM MACRO direccion,reg
                      00081                 banco2
                      00082                 movlw direccion
                      00083                 movwf   EEADR           ;DIRECCION=direccion
                      00084                 banco3
                      00085                 bcf     EECON1,EEPGD            ;APUNTA HACIA EEPROM DE DATOS           
                      00086                 bsf     EECON1,RD               ;HABILITA EL BIT 0 (RD) DEL REGISTRO EECON1             
                      00087                 banco2
                      00088                 movf    EEDATA,W                ;TRANSFIERE EL DATO EN EEDATA A W,
                      00089                 banco0
                      00090                 movwf reg
Warning[205]: Found directive in column 1. (ENDM)
                      00091 ENDM
                      00020         IFNDEF LCD_4Bits_PORTB.h
                      00021                 #INCLUDE "LCD_4Bits_PORTB.h"
                      00001 ;------------------------------------------------------------------------------
                      00002 ; CONSTANTES EMPLEADAS en el manejador de la LCD.
                      00003 ;------------------------------------------------------------------------------
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00004 ;-----[ CONSTANTES para el manejo de la LCD ]-----
                      00005 
                      00006         #DEFINE Hileras 2
                      00007         #DEFINE Columnas 16
                      00008         ;#DEFINE Columnas 20
                      00009                 
                      00010 ; --> Los siguientes son valores para usar PORTB <--
  00000006            00011 PORT_LCD        EQU     PORTB   ; Puerto que maneja al LCD 
  00000086            00012 TRIS_LCD        EQU     TRISB   ; Direcciones del Puerto del LCD
                      00013 
                      00014         #DEFINE RS PORTB,1
                      00015         #DEFINE Pin_RS 1
                      00016         #DEFINE RW PORTB,2
                      00017         #DEFINE E PORTB,3
                      00018 
                      00019 ; --> Los siguientes valores para emplear PORTD <--     
                      00020 ;PORT_LCD       EQU     PORTD   ; Puerto        que maneja al LCD
                      00021 ;TRIS_LCD       EQU     TRISD   ; Direcciones del Puerto del LCD
                      00022 
                      00023         ;#DEFINE        RS PORT_LCD,1
                      00024         ;#DEFINE        Pin_RS 1
                      00025         ;#DEFINE        E PORT_LCD,2
                      00026         ;#DEFINE        RW PORT_LCD,0                                                                   
                                                            
                      00027 ;##############################################################################
                      00028 
                      00029 #DEFINE LCD_4Bits_PORTB.h
                      00022         ENDIF
                      00023         
                      00024 ;============================================================================== 
                      00025 ;=========================[ CONFIGURACION DE PUERTOS ]========================================
                      00026 ;==============================================================================
                      00027 ; STATUS = IRP - RP1 - RP0 - T0  - PD  - Z  - DC  - C 
                      00028 
                      00029                         ;Ajusta para acceder al BANCO 1
0000   1303           00030         bcf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0001   1683           00031         bsf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
                      00032         
                      00033         ; Se ajusta ADCON1 para:                        
0002   3082           00034         movlw B'10000010'                                                               
                      00035                 ; Configuracion B7: "Justificado a la Derecha" 
                      00036                 ; Configuracion B6 a B4: No importa
                      00037                 ; Configuracion B3 a B0:
                      00038                 ; AN7, AN6 Y AN5 DIGITALES (PUERTO E)
                      00039                 ; AN4, AN3, AN2, AN1 Y AN0 ANALOGICOS (PUERTO A)  
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0003   009F           00040         movwf ADCON1
                      00041 
                      00042                 ;CONFIGURACION DEL PUERTO A
0004   301F           00043         movlw B'00011111' ;TODOS LOS PINES DEL PORTA COMO ENTRADA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0005   0085           00044         movwf TRISA
                      00045         
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00046                 ;CONFIGURACION DEL PUERTO C 
                      00047                 ;(Todo el puerto C se comporta como salida)
0006   3000           00048         movlw 0x00  ; W <- 0x00
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0007   0087           00049         movwf TRISC  ; (Registro 0x87) <- W     
                      00050         
                      00051                 ;CONFIGURACION DEL PUERTO D
                      00052                 ;Se configura el puerto a utilizar por el teclado, en este caso 
                      00053                 ;el puerto D 
                      00054                 ;(Los bits mas significativos del PORTD se comportan como entrada)
0008   30F0           00055         movlw B'11110000'  ; W <- 11110000
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0009   0088           00056         movwf TRISD  ; (Registro 0x86) <- W             
                      00057         ;       clrf    INTCON                          ; Se deshabilitan las interrupciones.
                      00058 
                      00059                 ;CONFIGURACION DEL PUERTO E
000A   3000           00060         movlw B'00000000' ;TODOS LOS PINES DEL PORTE COMO SALIDA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
000B   0089           00061         movwf TRISE
                      00062 
                      00063                 ;Ajusta para acceder al BANCO 0
000C   1303           00064         bcf STATUS,RP1 ;El BIT 6 del registro 3 se pone a "0"
000D   1283           00065         bcf STATUS,RP0 ;El BIT 5 del registro 3 de pone a "0"
                      00066                         
000E   30C1           00067         movlw   B'11000001'     ; Se ajusta: Oscilador a F R/C, Canal Analógico RA0,
000F   009F           00068         movwf ADCON0                    ; Enciende Conversor A/D, conversión en progreso.
                      00069 
                      00070 ;============================================================================== 
                      00071 ;================================[ VARIABLES ]========================================
                      00072 ;==============================================================================
                      00073         CBLOCK  0x20
  00000020            00074                 cont_clave
  00000021            00075                 menu
  00000022            00076                 general_lcd
                      00077         ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00078                 ;VARIABLES PARA EL TECLADO
  00000023            00079                 Registro_tecla
                      00080         
                      00081         ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00082                 ;VARIABLES PARA LCD
  00000024            00083                 Var      ; Variable para sacar información hacia la LCD.
  00000025            00084                 Point   ; Apuntador para Tablas.
  00000026            00085                 Select  ; Copia del bit asociado con RS en la LCD.
  00000027            00086                 OutCod  ; Variable Temporal para el código de salida.
                      00087                         
  00000028            00088                 LCD_Dato
  00000029            00089                 LCD_GuardaDato
  0000002A            00090                 LCD_GuardaTRISB
  0000002B            00091                 LCD_Auxiliar1
  0000002C            00092                 LCD_Auxiliar2
                      00093         ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00094                 ;VARIABLES PARA SENSORES (Registros auxiliares)
                      00095         
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000002D            00096                 Temperatura1_H     ;Guarda el valor leido por el adc (parte alta)
  0000002E            00097                 Temperatura1_L     ;Guarda el valor leido por el adc (parte baja)
                      00098                 
  0000002F            00099                 Temperatura2_H     ;Almacena el valor anterior para que no se pierda
  00000030            00100                 Temperatura2_L     ;Almacena el valor anterior para que no se pierda
                      00101 
                      00102         ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00103                 ;VARIABLES PARA OPERACIONES BÁSICAS (Registros auxiliares)
  00000031            00104                 Num1_a  ;Siendo A en al parte más baja
  00000032            00105                 Num1_b  
  00000033            00106                 Num1_c  ;Siendo B en la parte más alta
                      00107 
  00000034            00108                 Num2_a
  00000035            00109                 Num2_b
  00000036            00110                 Num2_c
                      00111 
  00000037            00112                 Acarreo ;Cuandon B0 de Acarreo es igual a 1 en una resta, significa
                      00113                                 ;que el resultado de la resta es un número negativo
                      00114 
  00000038            00115                 Auxiliar1 ;PARA EL CASO DE LA DIVISION ES EL NUMERO / AUXILIAR          
  00000039            00116                 Auxiliar2 ;EN CASO DE DIVISION SE ALMACENA EL RESULTADO AQUI (C),
                      00117                                   ;EN MULTIPLICACION AQUI SE LLEVAN LOS CORRIMIENTOS
  0000003A            00118                 Auxiliar3 ;EN CASO DE DIVISION SE ALMACENA EL RESULTADO AQUI (B)
                      00119                                   ;RESULTADO PARTE ALTA MULTIPLICACION
  0000003B            00120                 Auxiliar4 ;EN CASO DE DIVISION SE ALMACENA EL RESULTADO AQUI (A)
                      00121                                   ;RESULTADO PARTE BAJA MULTIPLICACION
                      00122                 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00123                 ;VARIABLES PARA CONVERTIR DE BINARIO A BCD
                      00124                 
  0000003C            00125                 BCD1 ;Unidades
  0000003D            00126                 BCD2 ;Decenas
  0000003E            00127                 BCD3 ;Centenas
                      00128                 
  0000003F            00129                 maxc
  00000040            00130                 maxd
  00000041            00131                 maxu
                      00132         
  00000042            00133                 minc
  00000043            00134                 mind
  00000044            00135                 minu
                      00136                 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00137                 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00138                 ;VARIABLES AUXILIARES 
  00000045            00139                 aux_eeprom    ;auxiliar eeprom
  00000046            00140                 aux_eeprom1   
  00000047            00141                 aux_eeprom2
  00000048            00142                 aux_eeprom3
  00000049            00143                 aux_eeprom4
                      00144 
  0000004A            00145                 c
  0000004B            00146                 d
  0000004C            00147                 u
                      00148 
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00149         ENDC
                      00150 
                      00151 ;============================================================================== 
                      00152 ;===============================[ PROGRAMA ]========================================
                      00153 ;==============================================================================
                      00154 
                      00155 ;-=-=-=-=-=-=-=-=-=-= ( Parte obligatoria para iniciar LCD ) =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                            -=
                      00156         LCD_Init      ; INICIA LCD 
  0000                    M                                                 VARIABLE dispctrl = 0x00        ; Se emplea en algunos M
                            acros.
0010   2336               M                                                 call            LCD_Inicio
0011   239F           00157         call T1mS      ; Retardo de tiempo (1 mili segundo)
                      00158   
                      00159         LCD_Off         ; BORRA RESIDUOS DE LA LCD (la apaga)
  00000000                M dispctrl SET dispctrl & ~BIT_D_DISPLAY_ON                       ; dispctrl &= ~BIT_D_DISPLAY_ON;
0012   3008               M                                                         movlw   E_DISPLAY_ON_OFF_CTRL
0013   3800               M                                                         iorlw   dispctrl                
0014   2354               M                                                         call    SendCom                         ; lcd_co
                            mmand(E_DISPLAY_ON_OFF_CTRL | dispctrl); delay_us(50)
0015   239F           00160         call T1mS               ; Retardo de tiempo (1 mili segundo)
                      00161 
                      00162         LCD_Home
0016   3002               M                                                         movlw   E_RETURN_HOME   ; 
0017   2354               M                                                         call    SendCom                         ; Tarda 
                            1.52 mS
                      00163         LCD_On
  00000004                M dispctrl SET dispctrl | BIT_D_DISPLAY_ON        ; dispctrl |= BIT_D_DISPLAY_ON;
0018   3008               M                                                         movlw           E_DISPLAY_ON_OFF_CTRL
0019   3804               M                                                         iorlw           dispctrl
001A   2354               M                                                         call            SendCom                 ; lcd_co
                            mmand(E_DISPLAY_ON_OFF_CTRL | dispctrl);
                      00164 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-    
                      00165         
                      00166         ;-------------- SE LEE EL LA DIRECCION 0 EN LA EEPROM ------------
                      00167                 banco2
001B   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
001C   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
001D   3000           00168                 movlw  .0 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
001E   008D           00169                 movwf   EEADR           ;DIRECCION EEPROM=0
001F   2317           00170                 call    EERD            ;LEE EN EEPROM, RESULTADO EN W
0020   00C5           00171                 movwf aux_eeprom
                      00172                 ;------------------------------------------------------------------
                      00173                 SaltaSiVarIgualConst aux_eeprom,'X',continua_prog 
0021   3058               M         movlw   'X'             ; Se emplea la resta para la comparación.
0022   0245               M         subwf   aux_eeprom,W    ; (W)=(Registro1_m1) - Constante_m1
0023   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
0024   284F               M                 goto    continua_prog   ; Si Z=1 son iguales, por lo tanto salta  
                      00174                         ;---------------SE ESCRIBE '3' en la direccion 20 EEPROM-------------           
                                                    
                      00175                         banco2
0025   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0026   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
0027   3030           00176                         movlw '0'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0028   008C           00177                         movwf   EEDATA          ;DATO =3
0029   3001           00178                         movlw .1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
002A   008D           00179                         movwf   EEADR           ;DIRECCION EEPROM=1
002B   2308           00180                         call EEWR
                      00181                         ;---------------SE ESCRIBE '5' en la direccion 21 EEPROM-------------           
                                                    
                      00182                         banco2
002C   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
002D   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
002E   3033           00183                         movlw '3'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
002F   008C           00184                         movwf   EEDATA          ;DATO =5
0030   3002           00185                         movlw .2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0031   008D           00186                         movwf   EEADR           ;DIRECCION EEPROM=2
0032   2308           00187                         call EEWR
                      00188                         ;---------------SE ESCRIBE '2' en la direccion 22 EEPROM-------------           
                                                    
                      00189                         banco2
0033   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0034   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
0035   3035           00190                         movlw '5'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0036   008C           00191                         movwf   EEDATA          ;DATO =2
0037   3003           00192                         movlw .3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0038   008D           00193                         movwf   EEADR           ;DIRECCION EEPROM=3
0039   2308           00194                         call EEWR
                      00195                         ;---------------SE ESCRIBE '5' en la direccion 23 EEPROM-------------           
                                                    
                      00196                         banco2
003A   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
003B   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
003C   3030           00197                         movlw '0'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
003D   008C           00198                         movwf   EEDATA          ;DATO =5
003E   3004           00199                         movlw .4
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
003F   008D           00200                         movwf   EEADR           ;DIRECCION EEPROM=4
0040   2308           00201                         call EEWR
                      00202                         ;---------------SE ESCRIBE '5' en la direccion 23 EEPROM-------------           
                                                    
                      00203                         banco2
0041   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0042   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
0043   3032           00204                         movlw '2'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0044   008C           00205                         movwf   EEDATA          ;DATO =5
0045   3005           00206                         movlw .5
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0046   008D           00207                         movwf   EEADR           ;DIRECCION EEPROM=4
0047   2308           00208                         call EEWR
                      00209                         ;---------------SE ESCRIBE '5' en la direccion 23 EEPROM-------------           
                                                    
                      00210                         banco2
0048   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0049   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
004A   3035           00211                         movlw '5'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
004B   008C           00212                         movwf   EEDATA          ;DATO =5
004C   3006           00213                         movlw .6
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
004D   008D           00214                         movwf   EEADR           ;DIRECCION EEPROM=4
004E   2308           00215                         call EEWR
                      00216                 
004F                  00217 continua_prog:
004F   01A1           00218         clrf menu
0050   0188           00219         clrf PORTD      
0051   01CA           00220         clrf c
0052   01CB           00221         clrf d
0053   01CC           00222         clrf u
0054                  00223 Inicio:
                      00224 ;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                      00225 ;-=-=-=-=-=-=-=-=-=( CONVERSOR ANALOGICO-DIGITAL )-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                      00226 ;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
0054                  00227 Proceso_LM35:
                      00228 
0054   2395           00229         call T10uS
0055   2395           00230         call T10uS
0056   2395           00231         call T10uS
                      00232 
0057                  00233 Continua_ADC:    
0057   151F           00234         bsf     ADCON0,2 ; Inicio del proceso de conversión A/D.
                      00235 
0058                  00236 Espera:
0058   191F           00237         btfsc   ADCON0,2 ; ¿Se terminó la conversión? 
0059   2858           00238                 goto    Espera                          ; No, espera...
                      00239         
005A   1683           00240         bsf     STATUS,RP0              ; Salto a BANCO "1"           
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
005B   081E           00241         movf    ADRESL,W                        ; Lectura de los bits menos significativos (8 bits)
005C   1283           00242         bcf     STATUS,RP0              ; Salto a BANCO "0"     
005D   00AE           00243         movwf   Temperatura1_L
005E   081E           00244         movf    ADRESH,W                        ; Lectura de la parte más significativa (2 bits)        
005F   00AD           00245         movwf   Temperatura1_H
                      00246         
                      00247         ;SE HACE CORRIMIENTO A LA DERECHA PARA CONVERTIR EL VOLTAGE A TEMPERATURA
                      00248         ;EMULA UNA DIVISION ENTRE 2
0060   1003           00249         bcf STATUS,C
0061   0CAE           00250         rrf Temperatura1_L,F
0062   1003           00251         bcf STATUS,C
0063   0CAD           00252         rrf Temperatura1_H,F
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0064   1803           00253         btfsc STATUS,C
0065   17AE           00254                 bsf Temperatura1_L,7
                      00255                 
0066   22C8           00256         call Convertir_a_BCD ;Convierte el numero binario a bcd
0067   3030           00257         movlw .48
0068   07BC           00258         addwf BCD1,F
0069   07BD           00259         addwf BCD2,F
006A   07BE           00260         addwf BCD3,F
                      00261         
006B   22E3           00262         call LEE_MAX_MIN
                      00263 ;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                      00264 ;=-=-=-=-=-=-=-=-=-=-=-=-=-( IMPRESION DE LM35 )-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                      00265 ;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                      00266         SaltaSiVarIgualConst menu,0,emenu0
006C   3000               M         movlw   0               ; Se emplea la resta para la comparación.
006D   0221               M         subwf   menu,W          ; (W)=(Registro1_m1) - Constante_m1
006E   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
006F   2879               M                 goto    emenu0          ; Si Z=1 son iguales, por lo tanto salta  
                      00267         SaltaSiVarIgualConst menu,1,emenu1
0070   3001               M         movlw   1               ; Se emplea la resta para la comparación.
0071   0221               M         subwf   menu,W          ; (W)=(Registro1_m1) - Constante_m1
0072   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
0073   287B               M                 goto    emenu1          ; Si Z=1 son iguales, por lo tanto salta  
                      00268         SaltaSiVarIgualConst menu,2,emenu2
0074   3002               M         movlw   2               ; Se emplea la resta para la comparación.
0075   0221               M         subwf   menu,W          ; (W)=(Registro1_m1) - Constante_m1
0076   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
0077   287D               M                 goto    emenu2          ; Si Z=1 son iguales, por lo tanto salta  
0078   287E           00269         goto finalmenus 
0079                  00270 emenu0:
0079   21D8           00271         call menu0 ;Imprime la temperatura
007A   287E           00272         goto finalmenus
007B                  00273 emenu1:
007B   2228           00274         call menu1
007C   287E           00275         goto finalmenus
007D                  00276 emenu2:
007D   2278           00277         call menu2
                      00278 
007E                  00279 finalmenus:
                      00280 ;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                      00281 ;=-=-=-=-=-=-=-=-=-=-=-=-=-( LECTURA DEL TECLADO )-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                      00282 ;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                      00283 ;Busca en FILA 1
007E   3001           00284         movlw B'00000001'  ;W <- 0000 0001
007F   0088           00285         movwf PORTD  ;PORTD <- 0000 0001        
                      00286                 
0080   1A08           00287                 btfsc PORTD,4
0081   29C9           00288                         goto Tecla0
                      00289                 
0082   1A88           00290                 btfsc PORTD,5
0083   2997           00291                         goto Tecla1
                      00292 
0084   1B08           00293                 btfsc PORTD,6
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0085   299C           00294                         goto Tecla2
                      00295 
0086   1B88           00296                 btfsc PORTD,7   
0087   29A1           00297                         goto Tecla3
                      00298                 
                      00299         ;Busca en FILA 2
0088   3002           00300         movlw B'00000010'  ;W <- 0000 0010
0089   0088           00301         movwf PORTD  ;PORTD <- 0000 0010
                      00302 
008A   1A08           00303                 btfsc PORTD,4
008B   29A6           00304                         goto Tecla4
                      00305                 
008C   1A88           00306                 btfsc PORTD,5
008D   29AB           00307                         goto Tecla5
                      00308 
008E   1B08           00309                 btfsc PORTD,6
008F   29B0           00310                         goto Tecla6
                      00311 
0090   1B88           00312                 btfsc PORTD,7   
0091   29B5           00313                         goto Tecla7
                      00314                 
                      00315         ;Busca en FILA 3
0092   3004           00316         movlw B'00000100'  ;W <- 0000 0100
0093   0088           00317         movwf PORTD  ;PORTD <- 0000 0100
                      00318 
0094   1A08           00319                 btfsc PORTD,4
0095   29BA           00320                         goto Tecla8
                      00321                 
0096   1A88           00322                 btfsc PORTD,5
0097   29BF           00323                         goto Tecla9
                      00324 
0098   1B08           00325                 btfsc PORTD,6
0099   28A6           00326                         goto Termina_teclado
                      00327 
009A   1B88           00328                 btfsc PORTD,7   
009B   28A6           00329                         goto Termina_teclado            
                      00330         
                      00331         ;Busca en FILA 4
009C   3008           00332         movlw B'00001000'  ;W <- 0000 1000
009D   0088           00333         movwf PORTD  ;PORTD <- 0000 1000
                      00334         
009E   1A08           00335                 btfsc PORTD,4
009F   29C4           00336                         goto TeclaC
                      00337                 
00A0   1A88           00338                 btfsc PORTD,5
00A1   29D3           00339                         goto TeclaD
                      00340 
00A2   1B08           00341                 btfsc PORTD,6
00A3   28A6           00342                         goto Termina_teclado
                      00343 
00A4   1B88           00344                 btfsc PORTD,7   
00A5   29CE           00345                         goto TeclaF
                      00346 
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00A6                  00347 Termina_teclado:        
                      00348 ;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                      00349 ;=-=-=-=-=-=-=-=-=-=-=-=-=-( INTERPRETACION DE TECLAS )-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                      00350 ;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                      00351         SaltaSiVarIgualConst Registro_tecla,0,NoTecla
00A6   3000               M         movlw   0               ; Se emplea la resta para la comparación.
00A7   0223               M         subwf   Registro_tecla,W ; (W)=(Registro1_m1) - Constante_m1
00A8   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
00A9   2969               M                 goto    NoTecla         ; Si Z=1 son iguales, por lo tanto salta  
                      00352                 SaltaSiVarIgualConst menu,0,emenu0_2
00AA   3000               M         movlw   0               ; Se emplea la resta para la comparación.
00AB   0221               M         subwf   menu,W          ; (W)=(Registro1_m1) - Constante_m1
00AC   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
00AD   28B7               M                 goto    emenu0_2        ; Si Z=1 son iguales, por lo tanto salta  
                      00353                 SaltaSiVarIgualConst menu,1,emenu1_2
00AE   3001               M         movlw   1               ; Se emplea la resta para la comparación.
00AF   0221               M         subwf   menu,W          ; (W)=(Registro1_m1) - Constante_m1
00B0   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
00B1   28C6               M                 goto    emenu1_2        ; Si Z=1 son iguales, por lo tanto salta  
                      00354                 SaltaSiVarIgualConst menu,2,emenu2_2
00B2   3002               M         movlw   2               ; Se emplea la resta para la comparación.
00B3   0221               M         subwf   menu,W          ; (W)=(Registro1_m1) - Constante_m1
00B4   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
00B5   2917               M                 goto    emenu2_2        ; Si Z=1 son iguales, por lo tanto salta  
00B6   2967           00355                 goto finalmenus_2 
                      00356 ;================== MENU 0===========================
00B7                  00357 emenu0_2:
                      00358         SaltaSiVarIgualConst Registro_tecla,'C',Bsmenu1
00B7   3043               M         movlw   'C'             ; Se emplea la resta para la comparación.
00B8   0223               M         subwf   Registro_tecla,W ; (W)=(Registro1_m1) - Constante_m1
00B9   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
00BA   28C0               M                 goto    Bsmenu1         ; Si Z=1 son iguales, por lo tanto salta  
                      00359         SaltaSiVarIgualConst Registro_tecla,'D',Bsmenu2
00BB   3044               M         movlw   'D'             ; Se emplea la resta para la comparación.
00BC   0223               M         subwf   Registro_tecla,W ; (W)=(Registro1_m1) - Constante_m1
00BD   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
00BE   28C3               M                 goto    Bsmenu2         ; Si Z=1 son iguales, por lo tanto salta  
00BF   28C5           00360         goto Bfinalsmenu
00C0                  00361 Bsmenu1:
                      00362         carga menu,.1
00C0   3001               M         movlw   .1      ; Toma el valor de la literal
00C1   00A1               M         movwf   menu    ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
00C2   28C5           00363         goto Bfinalsmenu
00C3                  00364 Bsmenu2:
                      00365         carga menu,.2
00C3   3002               M         movlw   .2      ; Toma el valor de la literal
00C4   00A1               M         movwf   menu    ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
00C5                  00366 Bfinalsmenu:
00C5   2967           00367         goto finalmenus_2
                      00368 ;================== MENU 1===========================
                      00369 ;PARA INGRESAR EL MAXIMO
00C6                  00370 emenu1_2:
                      00371         SaltaSiVarIgualConst Registro_tecla,'#',m_princA
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00C6   3023               M         movlw   '#'             ; Se emplea la resta para la comparación.
00C7   0223               M         subwf   Registro_tecla,W ; (W)=(Registro1_m1) - Constante_m1
00C8   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
00C9   2902               M                 goto    m_princA        ; Si Z=1 son iguales, por lo tanto salta  
                      00372         SaltaSiVarIgualConst Registro_tecla,'C',m_maxA
00CA   3043               M         movlw   'C'             ; Se emplea la resta para la comparación.
00CB   0223               M         subwf   Registro_tecla,W ; (W)=(Registro1_m1) - Constante_m1
00CC   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
00CD   2908               M                 goto    m_maxA          ; Si Z=1 son iguales, por lo tanto salta  
                      00373         SaltaSiVarIgualConst Registro_tecla,'D',m_minA
00CE   3044               M         movlw   'D'             ; Se emplea la resta para la comparación.
00CF   0223               M         subwf   Registro_tecla,W ; (W)=(Registro1_m1) - Constante_m1
00D0   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
00D1   290F               M                 goto    m_minA          ; Si Z=1 son iguales, por lo tanto salta  
00D2   0AA0           00374         incf cont_clave,F
                      00375         SaltaSiVarIgualConst cont_clave,1,Adigito1
00D3   3001               M         movlw   1               ; Se emplea la resta para la comparación.
00D4   0220               M         subwf   cont_clave,W    ; (W)=(Registro1_m1) - Constante_m1
00D5   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
00D6   28DC               M                 goto    Adigito1        ; Si Z=1 son iguales, por lo tanto salta  
                      00376         SaltaSiVarIgualConst cont_clave,2,Adigito2
00D7   3002               M         movlw   2               ; Se emplea la resta para la comparación.
00D8   0220               M         subwf   cont_clave,W    ; (W)=(Registro1_m1) - Constante_m1
00D9   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
00DA   28DF               M                 goto    Adigito2        ; Si Z=1 son iguales, por lo tanto salta  
00DB   28E2           00377         goto Adigito3
00DC                  00378 Adigito1:
                      00379         llena c,Registro_tecla
00DC   0823               M         movfw   Registro_tecla ; Toma el valor de la literal
00DD   00CA               M         movwf   c       ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
00DE   2916           00380         goto Afinaldigitos 
00DF                  00381 Adigito2:
                      00382         llena d,Registro_tecla
00DF   0823               M         movfw   Registro_tecla ; Toma el valor de la literal
00E0   00CB               M         movwf   d       ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
00E1   2916           00383         goto Afinaldigitos 
00E2                  00384 Adigito3:
                      00385         llena u,Registro_tecla
00E2   0823               M         movfw   Registro_tecla ; Toma el valor de la literal
00E3   00CC               M         movwf   u       ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
00E4   2228           00386         call menu1
00E5   23C7           00387         call T1S
                      00388         ;---------------SE ESCRIBE '5' en la direccion 21 EEPROM-------------                           
                                    
                      00389         banco2
00E6   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
00E7   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
00E8   3058           00390         movlw 'X'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00E9   008C           00391         movwf   EEDATA          ;DATO =5
00EA   3000           00392         movlw .0
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00EB   008D           00393         movwf   EEADR           ;DIRECCION EEPROM=2
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00EC   2308           00394         call EEWR
                      00395         ;---------------SE ESCRIBE '5' en la direccion 21 EEPROM-------------                           
                                    
00ED   084A           00396         movfw c
                      00397         banco2
00EE   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
00EF   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F0   008C           00398         movwf   EEDATA          ;DATO =5
00F1   3001           00399         movlw .1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F2   008D           00400         movwf   EEADR           ;DIRECCION EEPROM=2
00F3   2308           00401         call EEWR
                      00402         ;---------------SE ESCRIBE '5' en la direccion 21 EEPROM-------------                           
                                    
00F4   084B           00403         movfw d
                      00404         banco2
00F5   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
00F6   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F7   008C           00405         movwf   EEDATA          ;DATO =5
00F8   3002           00406         movlw .2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00F9   008D           00407         movwf   EEADR           ;DIRECCION EEPROM=2
00FA   2308           00408         call EEWR
                      00409         ;---------------SE ESCRIBE '5' en la direccion 21 EEPROM-------------                           
                                    
00FB   084C           00410         movfw u
                      00411         banco2
00FC   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
00FD   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00FE   008C           00412         movwf   EEDATA          ;DATO =5
00FF   3003           00413         movlw .3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0100   008D           00414         movwf   EEADR           ;DIRECCION EEPROM=2
0101   2308           00415         call EEWR
                      00416         ;------------------------------------------------
0102                  00417 m_princA:
0102   01A0           00418         clrf cont_clave
0103   01A1           00419         clrf menu
0104   01CA           00420         clrf c
0105   01CB           00421         clrf d
0106   01CC           00422         clrf u
0107   2916           00423         goto Afinaldigitos 
                      00424 
0108                  00425 m_maxA:
0108   01A0           00426         clrf cont_clave
                      00427         carga menu,1
0109   3001               M         movlw   1       ; Toma el valor de la literal
010A   00A1               M         movwf   menu    ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
010B   01CA           00428         clrf c
010C   01CB           00429         clrf d
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

010D   01CC           00430         clrf u
010E   2916           00431         goto Afinaldigitos 
                      00432 
010F                  00433 m_minA:
010F   01A0           00434         clrf cont_clave
                      00435         carga menu,2
0110   3002               M         movlw   2       ; Toma el valor de la literal
0111   00A1               M         movwf   menu    ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
0112   01CA           00436         clrf c
0113   01CB           00437         clrf d
0114   01CC           00438         clrf u
0115   2916           00439         goto Afinaldigitos      
                      00440 
0116                  00441 Afinaldigitos:
0116   2967           00442         goto finalmenus_2
                      00443 ;================== MENU 2===========================
0117                  00444 emenu2_2: 
                      00445 ;PARA INGRESAR EL MINIMO
                      00446         SaltaSiVarIgualConst Registro_tecla,'#',m_princB
0117   3023               M         movlw   '#'             ; Se emplea la resta para la comparación.
0118   0223               M         subwf   Registro_tecla,W ; (W)=(Registro1_m1) - Constante_m1
0119   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
011A   2953               M                 goto    m_princB        ; Si Z=1 son iguales, por lo tanto salta  
                      00447         SaltaSiVarIgualConst Registro_tecla,'C',m_maxB
011B   3043               M         movlw   'C'             ; Se emplea la resta para la comparación.
011C   0223               M         subwf   Registro_tecla,W ; (W)=(Registro1_m1) - Constante_m1
011D   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
011E   2959               M                 goto    m_maxB          ; Si Z=1 son iguales, por lo tanto salta  
                      00448         SaltaSiVarIgualConst Registro_tecla,'D',m_minB
011F   3044               M         movlw   'D'             ; Se emplea la resta para la comparación.
0120   0223               M         subwf   Registro_tecla,W ; (W)=(Registro1_m1) - Constante_m1
0121   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
0122   2960               M                 goto    m_minB          ; Si Z=1 son iguales, por lo tanto salta  
0123   0AA0           00449         incf cont_clave,F
                      00450         SaltaSiVarIgualConst cont_clave,1,Bdigito1
0124   3001               M         movlw   1               ; Se emplea la resta para la comparación.
0125   0220               M         subwf   cont_clave,W    ; (W)=(Registro1_m1) - Constante_m1
0126   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
0127   292D               M                 goto    Bdigito1        ; Si Z=1 son iguales, por lo tanto salta  
                      00451         SaltaSiVarIgualConst cont_clave,2,Bdigito2
0128   3002               M         movlw   2               ; Se emplea la resta para la comparación.
0129   0220               M         subwf   cont_clave,W    ; (W)=(Registro1_m1) - Constante_m1
012A   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
012B   2930               M                 goto    Bdigito2        ; Si Z=1 son iguales, por lo tanto salta  
012C   2933           00452         goto Bdigito3
012D                  00453 Bdigito1:
                      00454         llena c,Registro_tecla
012D   0823               M         movfw   Registro_tecla ; Toma el valor de la literal
012E   00CA               M         movwf   c       ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
012F   2967           00455         goto Bfinaldigitos 
0130                  00456 Bdigito2:
                      00457         llena d,Registro_tecla
0130   0823               M         movfw   Registro_tecla ; Toma el valor de la literal
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0131   00CB               M         movwf   d       ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
0132   2967           00458         goto Bfinaldigitos 
0133                  00459 Bdigito3:
                      00460         llena u,Registro_tecla
0133   0823               M         movfw   Registro_tecla ; Toma el valor de la literal
0134   00CC               M         movwf   u       ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
0135   2278           00461         call menu2
0136   23C7           00462         call T1S
                      00463         ;---------------SE ESCRIBE '5' en la direccion 21 EEPROM-------------                           
                                    
                      00464         banco2
0137   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0138   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
0139   3058           00465         movlw 'X'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
013A   008C           00466         movwf   EEDATA          ;DATO =5
013B   3000           00467         movlw .0
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
013C   008D           00468         movwf   EEADR           ;DIRECCION EEPROM=2
013D   2308           00469         call EEWR
                      00470         ;---------------SE ESCRIBE '5' en la direccion 21 EEPROM-------------                           
                                    
013E   084A           00471         movfw c
                      00472         banco2
013F   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0140   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0141   008C           00473         movwf   EEDATA          ;DATO =5
0142   3004           00474         movlw .4
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0143   008D           00475         movwf   EEADR           ;DIRECCION EEPROM=2
0144   2308           00476         call EEWR
                      00477         ;---------------SE ESCRIBE '5' en la direccion 21 EEPROM-------------                           
                                    
0145   084B           00478         movfw d
                      00479         banco2
0146   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0147   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0148   008C           00480         movwf   EEDATA          ;DATO =5
0149   3005           00481         movlw .5
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
014A   008D           00482         movwf   EEADR           ;DIRECCION EEPROM=2
014B   2308           00483         call EEWR
                      00484         ;---------------SE ESCRIBE '5' en la direccion 21 EEPROM-------------                           
                                    
014C   084C           00485         movfw u
                      00486         banco2
014D   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
014E   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
014F   008C           00487         movwf   EEDATA          ;DATO =5
0150   3006           00488         movlw .6
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0151   008D           00489         movwf   EEADR           ;DIRECCION EEPROM=2
0152   2308           00490         call EEWR
                      00491         ;------------------------------------------------
0153                  00492 m_princB:
0153   01A0           00493         clrf cont_clave
0154   01A1           00494         clrf menu
0155   01CA           00495         clrf c
0156   01CB           00496         clrf d
0157   01CC           00497         clrf u
0158   2967           00498         goto Bfinaldigitos 
                      00499 
0159                  00500 m_maxB:
0159   01A0           00501         clrf cont_clave
                      00502         carga menu,1
015A   3001               M         movlw   1       ; Toma el valor de la literal
015B   00A1               M         movwf   menu    ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
015C   01CA           00503         clrf c
015D   01CB           00504         clrf d
015E   01CC           00505         clrf u
015F   2967           00506         goto Bfinaldigitos 
                      00507 
0160                  00508 m_minB:
0160   01A0           00509         clrf cont_clave
                      00510         carga menu,2
0161   3002               M         movlw   2       ; Toma el valor de la literal
0162   00A1               M         movwf   menu    ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
0163   01CA           00511         clrf c
0164   01CB           00512         clrf d
0165   01CC           00513         clrf u
0166   2967           00514         goto Bfinaldigitos      
                      00515 
0167                  00516 Bfinaldigitos:
                      00517 ;================== FINAL DE LOS MENUS===========================
0167                  00518 finalmenus_2:
                      00519         carga Registro_tecla,0
0167   3000               M         movlw   0       ; Toma el valor de la literal
0168   00A3               M         movwf   Registro_tecla ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
0169                  00520 NoTecla:
                      00521 
                      00522 ;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                      00523         ;ETAPA DE CONTROL
                      00524 ;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
0169   216B           00525         call control
                      00526         
016A   2854           00527         goto Inicio
                      00528 
                      00529 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00530 ;PARA EL CONTROL DE LA TEMPERATURA 
                      00531 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
016B                  00532 control:
                      00533 
                      00534         SaltaSiVarMayorIgualVar BCD3,maxc,dmayor
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

016B   083F               M         movfw   maxc            ; Se emplea la resta para la comparación.
016C   023E               M         subwf   BCD3,W          ; (W)=(Registro1_m11) - Constante_m11
016D   1803               M         btfsc   STATUS,C                ; ¿Carry=1? Si Carry=0 hubo prestamo y si Carry=1 no hubo presta
                            mo
016E   296F               M         goto    dmayor                  ; No hubo bit de prestamo por lo tanto es mayor
016F                  00535 dmayor:
                      00536         SaltaSiVarMayorIgualVar BCD2,maxd,umayor
016F   0840               M         movfw   maxd            ; Se emplea la resta para la comparación.
0170   023D               M         subwf   BCD2,W          ; (W)=(Registro1_m11) - Constante_m11
0171   1803               M         btfsc   STATUS,C                ; ¿Carry=1? Si Carry=0 hubo prestamo y si Carry=1 no hubo presta
                            mo
0172   2974               M         goto    umayor                  ; No hubo bit de prestamo por lo tanto es mayor
0173   297C           00537         goto identifica_menor   
0174                  00538 umayor: 
                      00539         SaltaSiVarMayorIgualVar BCD1,maxu,superamaximo
0174   0841               M         movfw   maxu            ; Se emplea la resta para la comparación.
0175   023C               M         subwf   BCD1,W          ; (W)=(Registro1_m11) - Constante_m11
0176   1803               M         btfsc   STATUS,C                ; ¿Carry=1? Si Carry=0 hubo prestamo y si Carry=1 no hubo presta
                            mo
0177   2979               M         goto    superamaximo            ; No hubo bit de prestamo por lo tanto es mayor
0178   297C           00540         goto identifica_menor
                      00541 
0179                  00542 superamaximo:
0179   1007           00543         bcf PORTC,0
017A   1487           00544         bsf PORTC,1
017B   2996           00545         goto fin_ident  
                      00546 
                      00547 
017C                  00548 identifica_menor:
                      00549         SaltaSiVarMenorIgualVar1 BCD3,minc,dmenor
017C   0842               M         movfw   minc            ; Se emplea la resta para la comparación.
017D   023E               M         subwf   BCD3,W          ; (W)=(Registro1_m6) - Constante_m6
017E   1803               M         btfsc   STATUS,C                ; ¿Carry=1? Si Carry=0 hubo prestamo y si Carry=1 no hubo presta
                            mo
017F   2981               M                 goto Salir_m121 ;No hubo bit de prestamo por lo tanto sale de la macro
                          M         
0180   2984               M         goto    dmenor                  ; La bandera Z es 0, por lo tanto es mayor
                          M         
0181                      M Salir_m121: ; Para Salir de la macro en caso de que ninguna opción se cumpla
0181   1903               M                 btfsc   STATUS,Z                ;Si la Bandera Z de STATUS es 1,  son iguales
0182   2984               M                         goto    dmenor                  ; Si no son iguales, entonces sal de la macro
                          M 
0183   2996           00550         goto fin_ident  
0184                  00551 dmenor:
                      00552         SaltaSiVarMenorIgualVar2 BCD2,mind,umenor
0184   0843               M         movfw   mind            ; Se emplea la resta para la comparación.
0185   023D               M         subwf   BCD2,W          ; (W)=(Registro1_m6) - Constante_m6
0186   1803               M         btfsc   STATUS,C                ; ¿Carry=1? Si Carry=0 hubo prestamo y si Carry=1 no hubo presta
                            mo
0187   2989               M                 goto Salir_m122 ;No hubo bit de prestamo por lo tanto sale de la macro
                          M         
0188   298C               M         goto    umenor                  ; La bandera Z es 0, por lo tanto es mayor
                          M         
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0189                      M Salir_m122: ; Para Salir de la macro en caso de que ninguna opción se cumpla
0189   1903               M                 btfsc   STATUS,Z                ;Si la Bandera Z de STATUS es 1,  son iguales
018A   298C               M                         goto    umenor                  ; Si no son iguales, entonces sal de la macro
                          M 
018B   2996           00553         goto fin_ident  
018C                  00554 umenor: 
                      00555         SaltaSiVarMenorIgualVar3 BCD1,minu,superaminimo
018C   0844               M         movfw   minu            ; Se emplea la resta para la comparación.
018D   023C               M         subwf   BCD1,W          ; (W)=(Registro1_m6) - Constante_m6
018E   1803               M         btfsc   STATUS,C                ; ¿Carry=1? Si Carry=0 hubo prestamo y si Carry=1 no hubo presta
                            mo
018F   2991               M                 goto Salir_m123 ;No hubo bit de prestamo por lo tanto sale de la macro
                          M         
0190   2994               M         goto    superaminimo            ; La bandera Z es 0, por lo tanto es mayor
                          M         
0191                      M Salir_m123: ; Para Salir de la macro en caso de que ninguna opción se cumpla
0191   1903               M                 btfsc   STATUS,Z                ;Si la Bandera Z de STATUS es 1,  son iguales
0192   2994               M                         goto    superaminimo            ; Si no son iguales, entonces sal de la macro
                          M 
0193   2996           00556         goto fin_ident
                      00557 
0194                  00558 superaminimo:
0194   1407           00559         bsf PORTC,0
0195   1087           00560         bcf PORTC,1
                      00561 
0196                  00562 fin_ident:
0196   0008           00563         return
                      00564 
                      00565 ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   
                      00566 ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (Teclas) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    
                      00567 ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   
0197                  00568 Tecla1: 
0197   23B6           00569         call T100mS 
0198   23B6           00570         call T100mS 
0199   3031           00571         movlw '1'
019A   00A3           00572         movwf Registro_tecla
019B   28A6           00573         goto Termina_teclado
                      00574 
019C                  00575 Tecla2:   
019C   23B6           00576         call T100mS 
019D   23B6           00577         call T100mS 
019E   3032           00578         movlw '2'
019F   00A3           00579         movwf Registro_tecla
01A0   28A6           00580         goto Termina_teclado
                      00581 
01A1                  00582 Tecla3:   
01A1   23B6           00583         call T100mS 
01A2   23B6           00584         call T100mS 
01A3   3033           00585         movlw '3'
01A4   00A3           00586         movwf Registro_tecla
01A5   28A6           00587         goto Termina_teclado
                      00588 
01A6                  00589 Tecla4:   
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01A6   23B6           00590         call T100mS 
01A7   23B6           00591         call T100mS 
01A8   3034           00592         movlw '4'
01A9   00A3           00593         movwf Registro_tecla
01AA   28A6           00594         goto Termina_teclado
                      00595 
01AB                  00596 Tecla5:   
01AB   23B6           00597         call T100mS 
01AC   23B6           00598         call T100mS 
01AD   3035           00599         movlw '5'
01AE   00A3           00600         movwf Registro_tecla
01AF   28A6           00601         goto Termina_teclado
                      00602 
01B0                  00603 Tecla6:   
01B0   23B6           00604         call T100mS 
01B1   23B6           00605         call T100mS 
01B2   3036           00606         movlw '6'
01B3   00A3           00607         movwf Registro_tecla
01B4   28A6           00608         goto Termina_teclado
                      00609         
01B5                  00610 Tecla7:   
01B5   23B6           00611         call T100mS 
01B6   23B6           00612         call T100mS 
01B7   3037           00613         movlw '7'
01B8   00A3           00614         movwf Registro_tecla
01B9   28A6           00615         goto Termina_teclado
                      00616 
01BA                  00617 Tecla8:   
01BA   23B6           00618         call T100mS 
01BB   23B6           00619         call T100mS 
01BC   3038           00620         movlw '8'
01BD   00A3           00621         movwf Registro_tecla
01BE   28A6           00622         goto Termina_teclado
                      00623 
01BF                  00624 Tecla9:   
01BF   23B6           00625         call T100mS 
01C0   23B6           00626         call T100mS 
01C1   3039           00627         movlw '9'
01C2   00A3           00628         movwf Registro_tecla
01C3   28A6           00629         goto Termina_teclado
                      00630 
01C4                  00631 TeclaC:   
01C4   23B6           00632         call T100mS 
01C5   23B6           00633         call T100mS 
01C6   3043           00634         movlw 'C'
01C7   00A3           00635         movwf Registro_tecla
01C8   28A6           00636         goto Termina_teclado
                      00637 
01C9                  00638 Tecla0:   
01C9   23B6           00639         call T100mS 
01CA   23B6           00640         call T100mS 
01CB   3030           00641         movlw '0'
01CC   00A3           00642         movwf Registro_tecla
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01CD   28A6           00643         goto Termina_teclado
                      00644 
01CE                  00645 TeclaF:   
01CE   23B6           00646         call T100mS 
01CF   23B6           00647         call T100mS 
01D0   3023           00648         movlw '#'
01D1   00A3           00649         movwf Registro_tecla
01D2   28A6           00650         goto Termina_teclado
                      00651 
01D3                  00652 TeclaD:   
01D3   23B6           00653         call T100mS 
01D4   23B6           00654         call T100mS 
01D5   3044           00655         movlw 'D'
01D6   00A3           00656         movwf Registro_tecla
01D7   28A6           00657         goto Termina_teclado
                      00658         
                      00659 ;================================================================================
                      00660 ;==============================[ SUBRUTINAS ]======================================
                      00661 ;=================================================================================
                      00662 
                      00663 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00664 ;IMPRESION DE TEMPERATURA 
                      00665 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
01D8                  00666 menu0:  
                      00667         ;SE IMPRIME EL NUMERO EN BCD EN LA LCD
                      00668         LCD_GoTo 0,0    ;COLUMNA 0, FILA 1 
  0000                    M         LOCAL Direccion_Hilera
                          M ; Se aplican límites para Hileras y Columnas:
                          M ;       IF (Hilera > Hileras)
                          M ;               Hilera_Final SET Hileras - 1
                          M ;       ENDIF
                          M ;       IF (Columna > Columnas) 
                          M ;               Columna_Final SET Columnas - 1
                          M ;       ENDIF
                          M 
                          M ; PARA LCD de 20x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0xC0 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x94 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0xD4 // Direccion de memoria para la cuarta linea
                          M                                         
                          M ; PARA LCD de 16x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0x40 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x14 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0x54 // Direccion de memoria para la cuarta linea                                   
                          M 
                          M ; Cálculo de la máscara en función del número de línea en donde se coloca el cursor:
                          M ;            |      V I S I B L E S      |     No Mostrados       |
                          M ; LÍNEA 0 --> 00 01 02 03 04 05 ... 0E 0F 10 11 12 13 14 ... 26 27    En Total 40 Caracteres
                          M ; LÍNEA 1 --> 40 41 42 43 44 45 ... 4E 4F 50 51 52 53 54 ... 66 67    En Total 40 Caracteres
                          M ; LÍNEA 2 --> 14 15 16 17 18 19 ... 22 23 24 25 26 27 28 ... 3A 3B    En Total 40 Caracteres
                          M ; LÍNEA 3 --> 54 55 56 57 58 59 ... 62 63 64 65 66 67 68 ... 80 81    En Total 40 Caracteres
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M 
                          M         IF (Columnas == 16)
                          M                 IF (0      == 0)
Warning[207]: Found label after column 1. (Direccion_Hilera)
  00000000                M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (0      == 1)
                          M                         Direccion_Hilera SET 0x40
                          M                 ENDIF
                          M                 IF (0      == 2)
                          M                         Direccion_Hilera SET 0x14
                          M                 ENDIF
                          M                 IF (0      == 3)
                          M                         Direccion_Hilera SET 0x54
                          M                 ENDIF
                          M         ENDIF
                          M         
                          M         IF (Columnas == 20)
                          M                 IF (0      == 0)
                          M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (0      == 1)
                          M                         Direccion_Hilera SET 0xC0
                          M                 ENDIF
                          M                 IF (0      == 2)
                          M                         Direccion_Hilera SET 0x94
                          M                 ENDIF
                          M                 IF (0      == 3)
                          M                         Direccion_Hilera SET 0xD4
                          M                 ENDIF
                          M         ENDIF
                          M         
                          M ; lcd_command(E_SET_DDRAM_ADDR | (col + rowaddr[ row ]));
01D8   3000               M                                                                                         movlw           
                            Direccion_Hilera
01D9   3E00               M                                                                                         addlw           
                            0
01DA   3880               M                                                                                         iorlw           
                            E_SET_DDRAM_ADDR
01DB   2354               M                                                                                         call            
                            SendCom
                      00669 
                      00670         ;INGRESE 4 DIGTOS
                      00671         imprimelit 'T'  ;1
01DC   3054               M         movlw   'T'     ; 
01DD   00A2               M         movwf   general_lcd
01DE   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
01DF   0822               M         movfw general_lcd
01E0   2326               M         call  LCD_Char
                          M 
                      00672         imprimelit ':'  ;2
01E1   303A               M         movlw   ':'     ; 
01E2   00A2               M         movwf   general_lcd
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01E3   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
01E4   0822               M         movfw general_lcd
01E5   2326               M         call  LCD_Char
                          M 
                      00673         imprimevar BCD3  ;3
01E6   083E               M         movfw   BCD3    ; 
01E7   00A2               M         movwf   general_lcd
01E8   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
01E9   0822               M         movfw general_lcd
01EA   2326               M         call  LCD_Char
                          M 
                      00674         imprimevar BCD2  ;4
01EB   083D               M         movfw   BCD2    ; 
01EC   00A2               M         movwf   general_lcd
01ED   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
01EE   0822               M         movfw general_lcd
01EF   2326               M         call  LCD_Char
                          M 
                      00675         imprimevar BCD1 ;5
01F0   083C               M         movfw   BCD1    ; 
01F1   00A2               M         movwf   general_lcd
01F2   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
01F3   0822               M         movfw general_lcd
01F4   2326               M         call  LCD_Char
                          M 
                      00676         imprimelit ' '  ;6
01F5   3020               M         movlw   ' '     ; 
01F6   00A2               M         movwf   general_lcd
01F7   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
01F8   0822               M         movfw general_lcd
01F9   2326               M         call  LCD_Char
                          M 
                      00677         imprimelit 'M'  ;8
01FA   304D               M         movlw   'M'     ; 
01FB   00A2               M         movwf   general_lcd
01FC   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
01FD   0822               M         movfw general_lcd
01FE   2326               M         call  LCD_Char
                          M 
                      00678         imprimevar maxc  ;9
01FF   083F               M         movfw   maxc    ; 
0200   00A2               M         movwf   general_lcd
0201   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0202   0822               M         movfw general_lcd
0203   2326               M         call  LCD_Char
                          M 
                      00679         imprimevar maxd  ;10
0204   0840               M         movfw   maxd    ; 
0205   00A2               M         movwf   general_lcd
0206   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0207   0822               M         movfw general_lcd
0208   2326               M         call  LCD_Char
                          M 
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00680         imprimevar maxu ;11
0209   0841               M         movfw   maxu    ; 
020A   00A2               M         movwf   general_lcd
020B   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
020C   0822               M         movfw general_lcd
020D   2326               M         call  LCD_Char
                          M 
                      00681         imprimelit ' ' ;12
020E   3020               M         movlw   ' '     ; 
020F   00A2               M         movwf   general_lcd
0210   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0211   0822               M         movfw general_lcd
0212   2326               M         call  LCD_Char
                          M 
                      00682         imprimelit 'm'  ;13
0213   306D               M         movlw   'm'     ; 
0214   00A2               M         movwf   general_lcd
0215   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0216   0822               M         movfw general_lcd
0217   2326               M         call  LCD_Char
                          M 
                      00683         imprimevar minc  ;14
0218   0842               M         movfw   minc    ; 
0219   00A2               M         movwf   general_lcd
021A   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
021B   0822               M         movfw general_lcd
021C   2326               M         call  LCD_Char
                          M 
                      00684         imprimevar mind  ;15
021D   0843               M         movfw   mind    ; 
021E   00A2               M         movwf   general_lcd
021F   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0220   0822               M         movfw general_lcd
0221   2326               M         call  LCD_Char
                          M 
                      00685         imprimevar minu  ;16
0222   0844               M         movfw   minu    ; 
0223   00A2               M         movwf   general_lcd
0224   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0225   0822               M         movfw general_lcd
0226   2326               M         call  LCD_Char
                          M 
0227   0008           00686         return
                      00687 
0228                  00688 menu1:
                      00689         ;SE IMPRIME EL NUMERO EN BCD EN LA LCD
                      00690         LCD_GoTo 0,0    ;COLUMNA 0, FILA 1 
  0000                    M         LOCAL Direccion_Hilera
                          M ; Se aplican límites para Hileras y Columnas:
                          M ;       IF (Hilera > Hileras)
                          M ;               Hilera_Final SET Hileras - 1
                          M ;       ENDIF
                          M ;       IF (Columna > Columnas) 
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M ;               Columna_Final SET Columnas - 1
                          M ;       ENDIF
                          M 
                          M ; PARA LCD de 20x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0xC0 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x94 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0xD4 // Direccion de memoria para la cuarta linea
                          M                                         
                          M ; PARA LCD de 16x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0x40 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x14 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0x54 // Direccion de memoria para la cuarta linea                                   
                          M 
                          M ; Cálculo de la máscara en función del número de línea en donde se coloca el cursor:
                          M ;            |      V I S I B L E S      |     No Mostrados       |
                          M ; LÍNEA 0 --> 00 01 02 03 04 05 ... 0E 0F 10 11 12 13 14 ... 26 27    En Total 40 Caracteres
                          M ; LÍNEA 1 --> 40 41 42 43 44 45 ... 4E 4F 50 51 52 53 54 ... 66 67    En Total 40 Caracteres
                          M ; LÍNEA 2 --> 14 15 16 17 18 19 ... 22 23 24 25 26 27 28 ... 3A 3B    En Total 40 Caracteres
                          M ; LÍNEA 3 --> 54 55 56 57 58 59 ... 62 63 64 65 66 67 68 ... 80 81    En Total 40 Caracteres
                          M 
                          M         IF (Columnas == 16)
                          M                 IF (0      == 0)
Warning[207]: Found label after column 1. (Direccion_Hilera)
  00000000                M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (0      == 1)
                          M                         Direccion_Hilera SET 0x40
                          M                 ENDIF
                          M                 IF (0      == 2)
                          M                         Direccion_Hilera SET 0x14
                          M                 ENDIF
                          M                 IF (0      == 3)
                          M                         Direccion_Hilera SET 0x54
                          M                 ENDIF
                          M         ENDIF
                          M         
                          M         IF (Columnas == 20)
                          M                 IF (0      == 0)
                          M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (0      == 1)
                          M                         Direccion_Hilera SET 0xC0
                          M                 ENDIF
                          M                 IF (0      == 2)
                          M                         Direccion_Hilera SET 0x94
                          M                 ENDIF
                          M                 IF (0      == 3)
                          M                         Direccion_Hilera SET 0xD4
                          M                 ENDIF
                          M         ENDIF
                          M         
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M ; lcd_command(E_SET_DDRAM_ADDR | (col + rowaddr[ row ]));
0228   3000               M                                                                                         movlw           
                            Direccion_Hilera
0229   3E00               M                                                                                         addlw           
                            0
022A   3880               M                                                                                         iorlw           
                            E_SET_DDRAM_ADDR
022B   2354               M                                                                                         call            
                            SendCom
                      00691         ;INGRESE 4 DIGTOS
                      00692         imprimelit 'M'  ;1
022C   304D               M         movlw   'M'     ; 
022D   00A2               M         movwf   general_lcd
022E   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
022F   0822               M         movfw general_lcd
0230   2326               M         call  LCD_Char
                          M 
                      00693         imprimelit 'A'  ;2
0231   3041               M         movlw   'A'     ; 
0232   00A2               M         movwf   general_lcd
0233   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0234   0822               M         movfw general_lcd
0235   2326               M         call  LCD_Char
                          M 
                      00694         imprimelit 'X'  ;3
0236   3058               M         movlw   'X'     ; 
0237   00A2               M         movwf   general_lcd
0238   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0239   0822               M         movfw general_lcd
023A   2326               M         call  LCD_Char
                          M 
                      00695         imprimelit 'I'  ;4
023B   3049               M         movlw   'I'     ; 
023C   00A2               M         movwf   general_lcd
023D   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
023E   0822               M         movfw general_lcd
023F   2326               M         call  LCD_Char
                          M 
                      00696         imprimelit 'M' ;5
0240   304D               M         movlw   'M'     ; 
0241   00A2               M         movwf   general_lcd
0242   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0243   0822               M         movfw general_lcd
0244   2326               M         call  LCD_Char
                          M 
                      00697         imprimelit 'O'  ;6
0245   304F               M         movlw   'O'     ; 
0246   00A2               M         movwf   general_lcd
0247   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0248   0822               M         movfw general_lcd
0249   2326               M         call  LCD_Char
                          M 
                      00698         imprimelit '('  ;8
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

024A   3028               M         movlw   '('     ; 
024B   00A2               M         movwf   general_lcd
024C   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
024D   0822               M         movfw general_lcd
024E   2326               M         call  LCD_Char
                          M 
                      00699         imprimelit '3'  ;9
024F   3033               M         movlw   '3'     ; 
0250   00A2               M         movwf   general_lcd
0251   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0252   0822               M         movfw general_lcd
0253   2326               M         call  LCD_Char
                          M 
                      00700         imprimelit 'd'  ;10
0254   3064               M         movlw   'd'     ; 
0255   00A2               M         movwf   general_lcd
0256   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0257   0822               M         movfw general_lcd
0258   2326               M         call  LCD_Char
                          M 
                      00701         imprimelit ')'  ;11
0259   3029               M         movlw   ')'     ; 
025A   00A2               M         movwf   general_lcd
025B   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
025C   0822               M         movfw general_lcd
025D   2326               M         call  LCD_Char
                          M 
                      00702         imprimelit ':' ;12
025E   303A               M         movlw   ':'     ; 
025F   00A2               M         movwf   general_lcd
0260   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0261   0822               M         movfw general_lcd
0262   2326               M         call  LCD_Char
                          M 
                      00703         imprimelit ' '  ;13
0263   3020               M         movlw   ' '     ; 
0264   00A2               M         movwf   general_lcd
0265   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0266   0822               M         movfw general_lcd
0267   2326               M         call  LCD_Char
                          M 
                      00704         imprimevar c  ;14
0268   084A               M         movfw   c       ; 
0269   00A2               M         movwf   general_lcd
026A   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
026B   0822               M         movfw general_lcd
026C   2326               M         call  LCD_Char
                          M 
                      00705         imprimevar d  ;15
026D   084B               M         movfw   d       ; 
026E   00A2               M         movwf   general_lcd
026F   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0270   0822               M         movfw general_lcd
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0271   2326               M         call  LCD_Char
                          M 
                      00706         imprimevar u  ;16
0272   084C               M         movfw   u       ; 
0273   00A2               M         movwf   general_lcd
0274   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0275   0822               M         movfw general_lcd
0276   2326               M         call  LCD_Char
                          M 
0277   0008           00707         return
                      00708 
0278                  00709 menu2:
                      00710         ;SE IMPRIME EL NUMERO EN BCD EN LA LCD
                      00711         LCD_GoTo 0,0    ;COLUMNA 0, FILA 1 
  0000                    M         LOCAL Direccion_Hilera
                          M ; Se aplican límites para Hileras y Columnas:
                          M ;       IF (Hilera > Hileras)
                          M ;               Hilera_Final SET Hileras - 1
                          M ;       ENDIF
                          M ;       IF (Columna > Columnas) 
                          M ;               Columna_Final SET Columnas - 1
                          M ;       ENDIF
                          M 
                          M ; PARA LCD de 20x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0xC0 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x94 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0xD4 // Direccion de memoria para la cuarta linea
                          M                                         
                          M ; PARA LCD de 16x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0x40 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x14 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0x54 // Direccion de memoria para la cuarta linea                                   
                          M 
                          M ; Cálculo de la máscara en función del número de línea en donde se coloca el cursor:
                          M ;            |      V I S I B L E S      |     No Mostrados       |
                          M ; LÍNEA 0 --> 00 01 02 03 04 05 ... 0E 0F 10 11 12 13 14 ... 26 27    En Total 40 Caracteres
                          M ; LÍNEA 1 --> 40 41 42 43 44 45 ... 4E 4F 50 51 52 53 54 ... 66 67    En Total 40 Caracteres
                          M ; LÍNEA 2 --> 14 15 16 17 18 19 ... 22 23 24 25 26 27 28 ... 3A 3B    En Total 40 Caracteres
                          M ; LÍNEA 3 --> 54 55 56 57 58 59 ... 62 63 64 65 66 67 68 ... 80 81    En Total 40 Caracteres
                          M 
                          M         IF (Columnas == 16)
                          M                 IF (0      == 0)
Warning[207]: Found label after column 1. (Direccion_Hilera)
  00000000                M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (0      == 1)
                          M                         Direccion_Hilera SET 0x40
                          M                 ENDIF
                          M                 IF (0      == 2)
                          M                         Direccion_Hilera SET 0x14
                          M                 ENDIF
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 IF (0      == 3)
                          M                         Direccion_Hilera SET 0x54
                          M                 ENDIF
                          M         ENDIF
                          M         
                          M         IF (Columnas == 20)
                          M                 IF (0      == 0)
                          M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (0      == 1)
                          M                         Direccion_Hilera SET 0xC0
                          M                 ENDIF
                          M                 IF (0      == 2)
                          M                         Direccion_Hilera SET 0x94
                          M                 ENDIF
                          M                 IF (0      == 3)
                          M                         Direccion_Hilera SET 0xD4
                          M                 ENDIF
                          M         ENDIF
                          M         
                          M ; lcd_command(E_SET_DDRAM_ADDR | (col + rowaddr[ row ]));
0278   3000               M                                                                                         movlw           
                            Direccion_Hilera
0279   3E00               M                                                                                         addlw           
                            0
027A   3880               M                                                                                         iorlw           
                            E_SET_DDRAM_ADDR
027B   2354               M                                                                                         call            
                            SendCom
                      00712         ;INGRESE 4 DIGTOS
                      00713         imprimelit 'M'  ;1
027C   304D               M         movlw   'M'     ; 
027D   00A2               M         movwf   general_lcd
027E   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
027F   0822               M         movfw general_lcd
0280   2326               M         call  LCD_Char
                          M 
                      00714         imprimelit 'I'  ;2
0281   3049               M         movlw   'I'     ; 
0282   00A2               M         movwf   general_lcd
0283   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0284   0822               M         movfw general_lcd
0285   2326               M         call  LCD_Char
                          M 
                      00715         imprimelit 'N'  ;3
0286   304E               M         movlw   'N'     ; 
0287   00A2               M         movwf   general_lcd
0288   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0289   0822               M         movfw general_lcd
028A   2326               M         call  LCD_Char
                          M 
                      00716         imprimelit 'I'  ;4
028B   3049               M         movlw   'I'     ; 
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

028C   00A2               M         movwf   general_lcd
028D   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
028E   0822               M         movfw general_lcd
028F   2326               M         call  LCD_Char
                          M 
                      00717         imprimelit 'M' ;5
0290   304D               M         movlw   'M'     ; 
0291   00A2               M         movwf   general_lcd
0292   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0293   0822               M         movfw general_lcd
0294   2326               M         call  LCD_Char
                          M 
                      00718         imprimelit 'O'  ;6
0295   304F               M         movlw   'O'     ; 
0296   00A2               M         movwf   general_lcd
0297   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0298   0822               M         movfw general_lcd
0299   2326               M         call  LCD_Char
                          M 
                      00719         imprimelit '('  ;8
029A   3028               M         movlw   '('     ; 
029B   00A2               M         movwf   general_lcd
029C   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
029D   0822               M         movfw general_lcd
029E   2326               M         call  LCD_Char
                          M 
                      00720         imprimelit '3'  ;9
029F   3033               M         movlw   '3'     ; 
02A0   00A2               M         movwf   general_lcd
02A1   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
02A2   0822               M         movfw general_lcd
02A3   2326               M         call  LCD_Char
                          M 
                      00721         imprimelit 'd'  ;10
02A4   3064               M         movlw   'd'     ; 
02A5   00A2               M         movwf   general_lcd
02A6   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
02A7   0822               M         movfw general_lcd
02A8   2326               M         call  LCD_Char
                          M 
                      00722         imprimelit ')'  ;11
02A9   3029               M         movlw   ')'     ; 
02AA   00A2               M         movwf   general_lcd
02AB   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
02AC   0822               M         movfw general_lcd
02AD   2326               M         call  LCD_Char
                          M 
                      00723         imprimelit ':' ;12
02AE   303A               M         movlw   ':'     ; 
02AF   00A2               M         movwf   general_lcd
02B0   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
02B1   0822               M         movfw general_lcd
02B2   2326               M         call  LCD_Char
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M 
                      00724         imprimelit ' '  ;13
02B3   3020               M         movlw   ' '     ; 
02B4   00A2               M         movwf   general_lcd
02B5   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
02B6   0822               M         movfw general_lcd
02B7   2326               M         call  LCD_Char
                          M 
                      00725         imprimevar c  ;14
02B8   084A               M         movfw   c       ; 
02B9   00A2               M         movwf   general_lcd
02BA   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
02BB   0822               M         movfw general_lcd
02BC   2326               M         call  LCD_Char
                          M 
                      00726         imprimevar d  ;15
02BD   084B               M         movfw   d       ; 
02BE   00A2               M         movwf   general_lcd
02BF   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
02C0   0822               M         movfw general_lcd
02C1   2326               M         call  LCD_Char
                          M 
                      00727         imprimevar u  ;16
02C2   084C               M         movfw   u       ; 
02C3   00A2               M         movwf   general_lcd
02C4   14A6               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
02C5   0822               M         movfw general_lcd
02C6   2326               M         call  LCD_Char
                          M 
02C7   0008           00728         return
                      00729 
                      00730 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00731 ;BINARIO A BCD PARA LA TEMPERATURA
                      00732 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
02C8                  00733 Convertir_a_BCD:
02C8   082E           00734         movfw Temperatura1_L
02C9   00B1           00735         movwf Num1_a
02CA   082D           00736         movfw Temperatura1_H
02CB   00B2           00737         movwf Num1_b
02CC   01B3           00738         clrf Num1_c     
02CD   3064           00739         movlw .100
02CE   00B4           00740         movwf Num2_a
02CF   01B5           00741         clrf Num2_b
02D0   01B6           00742         clrf Num2_c
02D1   240E           00743         call Division
02D2   0834           00744         movfw Num2_a
02D3   00BE           00745         movwf BCD3
                      00746         
02D4   0831           00747         movfw Num1_a
02D5   00AE           00748         movwf Temperatura1_L
02D6   0832           00749         movfw Num1_b
02D7   00AD           00750         movwf Temperatura1_H
02D8   01B3           00751         clrf Num1_c     
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02D9   300A           00752         movlw .10
02DA   00B4           00753         movwf Num2_a
02DB   01B5           00754         clrf Num2_b
02DC   01B6           00755         clrf Num2_c
02DD   240E           00756         call Division
02DE   0834           00757         movfw Num2_a
02DF   00BD           00758         movwf BCD2
                      00759         
02E0   0831           00760         movfw Num1_a
02E1   00BC           00761         movwf BCD1      
02E2   0008           00762         return
                      00763 
                      00764 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00765 ;LEER MAXIMOS Y MINIMOS EN LA EEPROM
                      00766 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
02E3                  00767 LEE_MAX_MIN:
                      00768         ;-------------- SE LEE EL LA DIRECCION 24 EN LA EEPROM ------------
                      00769         banco2
02E3   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
02E4   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
02E5   3001           00770         movlw  .1 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02E6   008D           00771         movwf   EEADR           ;DIRECCION EEPROM=44
02E7   2317           00772         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
02E8   00BF           00773         movwf maxc
                      00774         ;-------------- SE LEE EL LA DIRECCION 25 EN LA EEPROM ------------
                      00775         banco2
02E9   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
02EA   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
02EB   3002           00776         movlw  .2 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02EC   008D           00777         movwf   EEADR           ;DIRECCION EEPROM=44
02ED   2317           00778         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
02EE   00C0           00779         movwf maxd
                      00780         ;-------------- SE LEE EL LA DIRECCION 26 EN LA EEPROM ------------
                      00781         banco2
02EF   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
02F0   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
02F1   3003           00782         movlw  .3 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02F2   008D           00783         movwf   EEADR           ;DIRECCION EEPROM=44
02F3   2317           00784         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
02F4   00C1           00785         movwf maxu
                      00786         ;-------------- SE LEE EL LA DIRECCION 27 EN LA EEPROM ------------
                      00787         banco2
02F5   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
02F6   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
02F7   3004           00788         movlw  .4 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02F8   008D           00789         movwf   EEADR           ;DIRECCION EEPROM=44
02F9   2317           00790         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
02FA   00C2           00791         movwf minc
                      00792         ;-------------- SE LEE EL LA DIRECCION 27 EN LA EEPROM ------------
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00793         banco2
02FB   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
02FC   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
02FD   3005           00794         movlw  .5 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
02FE   008D           00795         movwf   EEADR           ;DIRECCION EEPROM=44
02FF   2317           00796         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
0300   00C3           00797         movwf mind
                      00798         ;-------------- SE LEE EL LA DIRECCION 27 EN LA EEPROM ------------
                      00799         banco2
0301   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0302   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
0303   3006           00800         movlw  .6 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0304   008D           00801         movwf   EEADR           ;DIRECCION EEPROM=44
0305   2317           00802         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
0306   00C4           00803         movwf minu      
0307   0008           00804         return
                      00805 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00806 ;ESCRITURA Y LECTURA EN MEMORIA DE EEPROM
                      00807 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Warning[207]: Found label after column 1. (EEWR)
0308                  00808         EEWR:   
                      00809         banco3                  ;HABILITA EL BANCO 3
0308   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0309   1683               M         bsf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
030A   138C           00810         BCF     EECON1,EEPGD    ;APUNTA HACIA EEPROM DE DATOS           
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
030B   150C           00811         BSF     EECON1,WREN     ;HABILITA ESCRITURA EN EEPROM
030C   3055           00812         MOVLW   H'55'           ;PREPARA SECUENCIA DE SEGURIDAD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
030D   008D           00813         MOVWF   EECON2          ;ESCRIBE PRIMER DATO DE SECUENCIA
030E   30AA           00814         MOVLW   H'AA'           ;SEGUNDO DATO
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
030F   008D           00815         MOVWF   EECON2          ;ESCRIBE SEGUNDO DATO DE SECUENCIA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0310   148C           00816         BSF     EECON1,WR       ;INICIA CICLO DE ESCRITURA
0311                  00817 EW:     
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0311   188C           00818         BTFSC   EECON1,WR       ;MALLA PARA ESPERAR AL FINAL DEL CICLO
0312   2B11           00819     GOTO    EW              ;SI WR=1, CICLO DE ESCRITURA AUN NO TERMINA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0313   110C           00820         BCF     EECON1, WREN    ;DESHABILITA ESCRITURA
                      00821         banco0
0314   1303               M         bcf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0315   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
0316   0008           00822         RETURN
                      00823 
0317                  00824 EERD:   
                      00825         banco3
0317   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0318   1683               M         bsf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0319   138C           00826         BCF     EECON1,EEPGD            ;APUNTA HACIA EEPROM DE DATOS           
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
031A   140C           00827         BSF     EECON1,RD               ;HABILITA EL BIT 0 (RD) DEL REGISTRO EECON1             
                      00828         banco2
031B   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
031C   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
031D   080C           00829         MOVF    EEDATA,W                ;TRANSFIERE EL DATO EN EEDATA A W,
                      00830         banco0
031E   1303               M         bcf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
031F   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
0320   0008           00831         RETURN 
                      00832 
                      00833 
                      00834 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00835 ;MACROS DE LCD Y RETARDOS DE TIEMPO
                      00836 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00837         
                      00838         #INCLUDE "LCD_4Bits_PORTB.inc"  ; Manejador de la LCD.
                      00001 ;------------------------------------------------------------------------------
                      00002 ; Manejador de una LCD empleando comunicación en 4 Bits
                      00003 ;------------------------------------------------------------------------------
                      00004 ;
                      00005         IFNDEF LCD_4Bits_PORTB.h
                      00006                 #INCLUDE "LCD_4Bits_PORTB.h"
                      00007         ENDIF
                      00008         
                      00009 ;-----[ ALTA de VARIABLES LOCALES ]-----
                      00010 ;------------------------------------------------------------------------------ 
                      00011 ;-----[ Subrutinas ]------
                      00012 ; Genera un pulso en la terminal E, para escribir un dato / comando a la LCD
0321                  00013 PulseE:
0321   1586           00014         bsf             E                                                       ; E <- "1" 
0322   239F           00015         call    T1mS                                    ; Retardo de 1ms 
0323   1186           00016         bcf             E                                                       ; E <- "0"
0324   239F           00017         call    T1mS                                    ; Retardo de 1ms 
0325   0008           00018         return                                                  ; Es todo.
                      00019 ;--------------------------------------------------------------------------------------------------
                      00020 ; Envío de un caracter (Comando o Dato) en dos partes [baja y alta] por <RB4:RB7>
                      00021 ;
                      00022 ; Si se antecede esta
0326                  00023 LCD_Char:
0326   00A7           00024         movwf           OutCod                                  ; Almacena el (dato / comando)de salida.
                             
0327   39F0           00025         andlw           0xF0                                            ; Limpia la parte baja [low nybb
                            le]
0328   0086           00026         movwf           PORT_LCD                                ; Muestra por el PUERTO la parte alta [h
                            igh nybble]
                      00027          
0329   18A6           00028         btfsc           Select,Pin_RS           ; Prueba la línea "RS" 
032A   1486           00029         bsf                     RS                                                      ; y envía un dat
                            o
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00030         
032B   2321           00031         call            PulseE                                  ; Pulsa la señal de reloj pra enviar la 
                            información... 
032C   239F           00032         call            T1mS                                            ; Espera por 1 milisegundo
                      00033 
032D   0EA7           00034         swapf           OutCod,F                                ; Intercambia las partes alta y baja [lo
                            w - high nybbles]
032E   0827           00035         movf            OutCod,W                                ; Recupera el código de salida
032F   39F0           00036         andlw           0xF0                                            ; Limpia la parte baja [low nybb
                            le] 
0330   0086           00037         movwf           PORT_LCD                                ; Muestra por el PUERTO la parte baja [l
                            ow nybble]
                      00038          
0331   18A6           00039         btfsc           Select,Pin_RS           ; Prueba la línea "RS"  
0332   1486           00040         bsf                     RS                                                      ; y envía un dat
                            o
                      00041         
0333   2321           00042         call            PulseE                                  ; Pulsa la señal de reloj pra enviar la 
                            información...
0334   239F           00043         call            T1mS                                            ; Espera por 1 milisegundo
0335   0008           00044         return                                                                  ; Listo.
                      00045 ;------------------------------------------------------------------------------
                      00046 ; Inicialización del LCD 
0336                  00047 LCD_Inicio:
                      00048         SelBanco        TRIS_LCD                ; Selecciona el Banco adecuado. 
                          M         IF TRIS_LCD & 0x0100                                                                            
                                                    ; Reg > 0xFF, (Bancos 2 o 3)
                          M                 IF (Banco_Actual & 0x0100) == 0                                 ; 0000 0001 0000 0000
                          M                         bsf STATUS, RP1
                          M                 ENDIF
                          M         ELSE
                          M                 IF (Banco_Actual & 0x0100) == 0x0100            ; 0000 0001 0000 0000
                          M                         bcf STATUS, RP1
                          M                 ENDIF
                          M         ENDIF
                          M         IF TRIS_LCD & 0x0080                                                                            
                                                    ; Reg > 0x7F, (Bancos 1, 2 o 3)
                          M                 IF (Banco_Actual & 0x0080) == 0                                 ; 0000 0000 0000 0000
0336   1683               M                         bsf STATUS, RP0
                          M                 ENDIF
                          M         ELSE
                          M                 IF (Banco_Actual & 0x0080) == 0x0080            ; 0000 000 1000 0000
                          M                         bcf STATUS, RP0
                          M                 ENDIF
                          M         ENDIF
  00000080                M Banco_Actual SET TRIS_LCD & 0x180                                                       ; Banco_Actual 0
                            000 000X XXXX XXXX
                          M                                                                                                         
                                                                                                    ;                       
0337   0103           00049         clrw                                                                    ; Todos los bits de este
                             PUERTO son salidas. 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0338   0086           00050         movwf                   TRIS_LCD                ; 
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00051         SelBanco        PORT_LCD                ; Selecciona el Banco adecuado.
                          M         IF PORT_LCD & 0x0100                                                                            
                                                    ; Reg > 0xFF, (Bancos 2 o 3)
                          M                 IF (Banco_Actual & 0x0100) == 0                                 ; 0000 0001 0000 0000
                          M                         bsf STATUS, RP1
                          M                 ENDIF
                          M         ELSE
                          M                 IF (Banco_Actual & 0x0100) == 0x0100            ; 0000 0001 0000 0000
                          M                         bcf STATUS, RP1
                          M                 ENDIF
                          M         ENDIF
                          M         IF PORT_LCD & 0x0080                                                                            
                                                    ; Reg > 0x7F, (Bancos 1, 2 o 3)
                          M                 IF (Banco_Actual & 0x0080) == 0                                 ; 0000 0000 0000 0000
                          M                         bsf STATUS, RP0
                          M                 ENDIF
                          M         ELSE
                          M                 IF (Banco_Actual & 0x0080) == 0x0080            ; 0000 000 1000 0000
0339   1283               M                         bcf STATUS, RP0
                          M                 ENDIF
                          M         ENDIF
  00000000                M Banco_Actual SET PORT_LCD & 0x180                                                       ; Banco_Actual 0
                            000 000X XXXX XXXX
                          M                                                                                                         
                                                                                                    ;                       
033A   0186           00052         clrf                    PORT_LCD                ; Limpia las salidas.
033B   23AB           00053         call                    T10mS                           ; Espera por 10 milisegundos.
                      00054         
033C   30F0           00055         movlw           0xF0                            ; Máscara para el código. 
033D   00A6           00056         movwf                   Select                  ; Sin alterar la parte alta [High nybble] 
                      00057  
033E   3030           00058         movlw                   0x30                            ; Carga del valor inicial 
033F   0086           00059         movwf                   PORT_LCD                ; Traslado a la LCD  
0340   2321           00060         call                    PulseE                  ; Captura del código inicial. 
0341   239F           00061         call                    T1mS                            ; Espera por 1 milisegundo
0342   2321           00062         call                    PulseE                  ; Captura del código inicial, de nuevo.
0343   239F           00063         call                    T1mS                            ; Espera por 1 milisegundo
0344   2321           00064         call                    PulseE                  ; Captura del código inicial, de nuevo.
0345   1206           00065         bcf                             PORT_LCD,4      ; Ajuste al MODO de 4-bit
0346   2321           00066         call                    PulseE                  ; Captura de la información.
                      00067          
0347   3028           00068         movlw                   0x28                            ; Ajuste al MODO de 4-bit mode, 2 lineas
                             
0348   2326           00069         call                    LCD_Char                ; Envío del código
0349   3008           00070         movlw                   0x08                            ; Código para el APAGADO de la LCD 
034A   2326           00071         call                    LCD_Char                ; Envío del código
034B   3001           00072         movlw                   0x01                            ; Código para la LIMPIEZA de la LCD 
034C   2326           00073         call                    LCD_Char                ; Envío del código
034D   3006           00074         movlw                   0x06                            ; Código para la HABILITACIÓN del CURSOR
                             y AUTO INCREMENTO   
034E   2326           00075         call                    LCD_Char                ; Envío del código
034F   3080           00076         movlw                   0x80                            ; Código para el AJUSTE a CERO de la DIR
                            ECCIÓN de MEMORIA. 
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0350   2326           00077         call                    LCD_Char                ; Envío del código
0351   300C           00078         movlw                   0x0C                            ; Código para el ENCENDIDO de la LCD
0352   2326           00079         call                    LCD_Char                ; Envío del código
                      00080  
0353   0008           00081         return                                                          ; Se terminó
                      00082 ;------------------------------------------------------------------------------
                      00083 ; Envío de un COMANDO a la LCD
0354                  00084 LCD_Com:
0354                  00085 SendCom:
0354   10A6           00086         bcf                             Select,Pin_RS   ; Selecciona el MODO de COMANDO; RS <- "0" 
0355   2326           00087         call                    LCD_Char                        ; Envía el código (Comando en este caso)
0356   0008           00088         return
                      00089 ;------------------------------------------------------------------------------
                      00090 ; Envío de un CARACTER (Dato) a la LCD
0357                  00091 LCD_Caracter:
0357   14A6           00092         bsf                             Select,Pin_RS   ; Selecciona el MODO de DATO; RS <- "1" 
0358   2326           00093         call                    LCD_Char                        ; Envía el código (Dato en este caso)
0359   0008           00094         return
                      00095 
                      00096 ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                      00097 ; R E V I S A R   subrutinas incorporadas de la versión básica del manejador LCD
                      00098 
                      00099 ; Subrutina "LCD_CodigoCGROM" -----------------------------------------------------------
                      00100 ;
                      00101 ; A partir del carácter ASCII número 127 los códigos de los caracteres definidos en la
                      00102 ; tabla CGROM del LM016L no coinciden con los códigos ASCII. Así por ejemplo, el código
                      00103 ; ASCII de la "Ñ" en la tabla CGRAM del LM016L es EEh.
                      00104 ;
                      00105 ; Esta subrutina convierte los códigos ASCII de la "Ñ", "º" y otros, a códigos CGROM para que
                      00106 ; que puedan ser visualizado en el módulo LM016L.
                      00107 ; 
                      00108 ; Entrada:      En (W) el código ASCII del carácter que se desea visualizar.
                      00109 ; Salida:       En (W) el código definido en la tabla CGROM.
                      00110 
035A                  00111 LCD_CodigoCGROM:
035A   00A8           00112         movwf   LCD_Dato                                        ; Guarda el valor del carácter y comprue
                            ba si es
035B                  00113 LCD_EnheMinuscula:                              ; un carácter especial.
035B   3CF1           00114         sublw   'ñ'                                                     ; ¿Es la "ñ"?
035C   1D03           00115         btfss   STATUS,Z
035D   2B61           00116         goto    LCD_EnheMayuscula       ; No es "ñ".
035E   30EE           00117         movlw   b'11101110'                             ; Código CGROM de la "ñ".
035F   00A8           00118         movwf   LCD_Dato
0360   2B6E           00119         goto    LCD_FinCGROM
0361                  00120 LCD_EnheMayuscula:
0361   0828           00121         movf    LCD_Dato,W                              ; Recupera el código ASCII de entrada.
0362   3CD1           00122         sublw   'Ñ'                                                     ; ¿Es la "Ñ"?
0363   1D03           00123         btfss   STATUS,Z
0364   2B68           00124         goto    LCD_Grado                                       ; No es "Ñ".
0365   30EE           00125         movlw   b'11101110'                             ; Código CGROM de la "ñ". (No hay símbolo para
0366   00A8           00126         movwf   LCD_Dato                                        ; la "Ñ" mayúscula en la CGROM).
0367   2B6E           00127         goto    LCD_FinCGROM    
0368                  00128 LCD_Grado:
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0368   0828           00129         movf    LCD_Dato,W                              ; Recupera el código ASCII de entrada.
0369   3CBA           00130         sublw   'º'                                                     ; ¿Es el símbolo "º"?
036A   1D03           00131         btfss   STATUS,Z
036B   2B6E           00132         goto    LCD_FinCGROM                    ; No es "º".
036C   30DF           00133         movlw   b'11011111'                             ; Código CGROM del símbolo "º".
036D   00A8           00134         movwf   LCD_Dato
036E                  00135 LCD_FinCGROM:
036E   0828           00136         movf    LCD_Dato,W                              ; En (W) el código buscado.
036F   0008           00137         return
                      00138 
                      00139 ; Subrutina "LCD_DosEspaciosBlancos" y "LCD_LineaBlanco" --------------------------------
                      00140 ; Visualiza espacios en blanco.
                      00141 
0370                  00142 LCD_LineaEnBlanco:
0370   3016           00143         movlw           Columnas
0371   2B77           00144         goto            LCD_EnviaBlancos
0372                  00145 LCD_UnEspacioBlanco:
0372   3001           00146         movlw           .1
0373   2B77           00147         goto    LCD_EnviaBlancos
0374                  00148 LCD_DosEspaciosBlancos:
0374   3002           00149         movlw           .2
0375   2B77           00150         goto    LCD_EnviaBlancos
0376                  00151 LCD_TresEspaciosBlancos:
0376   3003           00152         movlw           .3
0377                  00153 LCD_EnviaBlancos:
0377   00AB           00154         movwf           LCD_Auxiliar1                                           ; (LCD_Auxiliar1) se uti
                            liza como contador.
0378                  00155 LCD_EnviaOtroBlanco:    
0378   3020           00156         movlw           ' '                                                                             
                                    ; Esto es un espacio en blanco.
0379   2357           00157         call            LCD_Caracter                                            ; Visualiza tanto espaci
                            os en blanco como se
037A   0BAB           00158         decfsz  LCD_Auxiliar1,F                                 ; haya cargado en (LCD_Auxiliar1).
037B   2B78           00159         goto            LCD_EnviaOtroBlanco
037C   0008           00160         return
                      00161         
                      00162 ;--------------------------------------------------------------------------------------------------
                      00163 ; Subrutinas "LCD_ByteCompleto" y "LCD_Byte" --------------------------------------------
                      00164 ; Subrutina "LCD_ByteCompleto", visualiza el byte que almacena el registro W en el
                      00165 ; lugar actual de la pantalla. Por ejemplo, si (W)=b'10101110' visualiza "AE".
                      00166 ;
                      00167 ; Subrutina "LCD_Byte" igual que la anterior, pero en caso de que el nibble alto sea cero 
                      00168 ; visualiza en su lugar un espacio en blanco. Por ejemplo si (W)=b'10101110' visualiza "AE"
                      00169 ; y si (W)=b'00001110', visualiza " E" (un espacio blanco delante).
                      00170 ;
                      00171 ; Utilizan la subrutina "LCD_Nibble" que se analiza más adelante.
                      00172 ;
037D                  00173 LCD_Byte:
037D   00AC           00174         movwf           LCD_Auxiliar2                           ; Guarda el valor de entrada.
037E   39F0           00175         andlw           b'11110000'                                     ; Analiza si el nibble alto es c
                            ero.
037F   1D03           00176         btfss           STATUS,Z                                                ; Si es cero lo apaga.
0380   2B85           00177         goto            LCD_VisualizaAlto               ; No es cero y lo visualiza.
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0381   3020           00178         movlw           ' '                                                                     ; Visual
                            iza un espacio en blanco.
0382   2357           00179         call            LCD_Caracter                            ;
0383   2B87           00180         goto            LCD_VisualizaBajo               ;
                      00181 
0384                  00182 LCD_ByteCompleto:
0384   00AC           00183         movwf           LCD_Auxiliar2                           ; Guarda el valor de entrada.
0385                  00184 LCD_VisualizaAlto:
0385   0E2C           00185         swapf           LCD_Auxiliar2,W                 ; Pone el nibble alto en la parte baja.
0386   2388           00186         call            LCD_Nibble                                      ; Lo visualiza.
0387                  00187 LCD_VisualizaBajo:
0387   082C           00188         movf            LCD_Auxiliar2,W                 ; Repite el proceso con el nibble bajo.
                      00189 
                      00190 ; Subrutina "LCD_Nibble" ----------------------------------------------------------------
                      00191 ;
                      00192 ; Visualiza en el lugar actual de la pantalla, el valor hexadecimal que almacena en el nibble
                      00193 ; bajo del registro W. El nibble alto de W no es tenido en cuenta. Ejemplos:
                      00194 ; - Si (W)=b'01010110', se visualizará "6". 
                      00195 ; - Si (W)=b'10101110', se visualizará "E". 
                      00196 ;
0388                  00197 LCD_Nibble:
0388   390F           00198         andlw           b'00001111'                                                     ; Se queda con l
                            a parte baja.
0389   00AB           00199         movwf           LCD_Auxiliar1                                           ; Lo guarda.
038A   3C09           00200         sublw           0x09                                                                            
                            ; Comprueba si hay que representarlo con letra.
038B   1C03           00201         btfss           STATUS,C        
038C   2B90           00202         goto            LCD_EnviaByteLetra
038D   082B           00203         movf            LCD_Auxiliar1,W
038E   3E30           00204         addlw           '0'                                                                             
                                    ; El número se pasa a carácter ASCII sumándole
038F   2B92           00205         goto            LCD_FinVisualizaDigito  ; el ASCII del cero y lo visualiza.
0390                  00206 LCD_EnviaByteLetra:
0390   082B           00207         movf            LCD_Auxiliar1,W
0391   3E37           00208         addlw           'A'-0x0A                                                                ; Sí, po
                            r tanto, se le suma el ASCII de la 'A'.
0392                  00209 LCD_FinVisualizaDigito:
0392   2B57           00210         goto            LCD_Caracter                                            ; Y visualiza el carácte
                            r. Se hace con un "goto"
                      00211                                                                                                         
                                                            ; para no sobrecargar la pila.
                      00212 ;--------------------------------------------------------------------------------------------------
                      00213 ;-----[ BAJA de VARIABLES LOCALES ]-----
                      00214 ;------------------------------------------------------------------------------
                      00215 ;-----[ SUBRUTINAS LOCALES a ESTE PAQUETE ]-----
                      00216 ;------------------------------------------------------------------------------
                      00839         #INCLUDE "Tiempo.inc"                                           ; Retardos y temporizados.
                      00001 ;--------------------------------------------------------------------------------------------------
                      00002 ; ------[Subrutinas para el Manejo de Tiempos Exactos]------
                      00003 ;
                      00004 ; Se selecciona la opción para las pruebas necesarias, locales o externas.
                      00005 ; Para el uso común de estas subrutinas se habilitan los contadores [1, 2 y 3] asociándolos a las
                      00006 ; variables temporales [Temp0, Temp1 y Temp2], que deberían haberse creado previamente.
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00007 ;
                      00008 ;     Retardos de Tiempo Disponibles:
                      00009 ;
                      00010 ;               T1uS
                      00011 ;               T10uS
                      00012 ;                       T100uS
                      00013 ;                       T1mS
                      00014 ;                       T10mS
                      00015 ;                       T100mS
                      00016 ;                       T1S
                      00017 ;                       T10S
                      00018 
                      00019         CBLOCK                                                  ; Sustituir por variables TEMPorales
  0000004D            00020                 Contador1       
  0000004E            00021                 Contador2       
  0000004F            00022                 Contador3                       
                      00023         ENDC
                      00024 
                      00025 ;Contador1 EQU VarTmp1
                      00026 ;Contador2 EQU VarTmp2
                      00027 ;Contador3 EQU VarTmp3
                      00028 ;---------------------------------
                      00029 ;                       ORG             0x000
                      00030                         
                      00031 ;                       call    T10uS           ; Desde aquí se cuenta el tiempo que se consumirá.
                      00032 ;                       call    T100mS  ;
                      00033 ;                       call  T1uS
                      00034 ;                       call  T1uS
                      00035                                                               ; 
                      00036 ;                       goto    $       ; AQUÍ se inserta un "breakpoint", para contabilizar el tiempo d
                            e ejecución
                      00037                                       ; en el "StopWatch"
                      00038 ;--------------------------------------------------------------------------------------------------
                      00039 ;------[Retardo de 1 microsegundo]------
                      00040 ;--------------------------------------------------------------------------------------------------
0393                  00041 T1uS:
0393   0000           00042                         nop                                             ; "A" [1]
                      00043                         
0394   0008           00044                         return                          ; "B" [2]
                      00045 ;--------------------------------------------------------------------------------------------------
                      00046 ;TEORÍA de FUNCIONAMIENTO:
                      00047 ;
                      00048 ;--> Los números entre paréntesis indican los ciclos consumidos. Recuerde que un ciclo de máquina
                      00049 ; es igual a 200 nS.
                      00050 ;--> Existen CICLOS que se repiten un cierto numero de veces.
                      00051 ;--> En algunos casos habrá CICLOS ANIDADOS, es decir, CICLOS dentro de CICLOS.
                      00052 ;
                      00053 ;Para esta subrutina el cálculo de los ciclos queda de la siguiente manera:
                      00054 ;
                      00055 ;                 [2]                 -->  2    {Instrucción "call" en la "llamada" o "invocación"}
                      00056 ;       +       [A]                 -->  1        {Instrucción "nop" [A]}
                      00057 ;   +   [2]                 -->  2    {Instrucción "return" [B]}
                      00058 ; -----------------------------------                  
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00059 ;       T O T A L           -->  5 Ciclos
                      00060 ;                                5 * 200 nS = 1000 nS = 1 uS
                      00061 ;--------------------------------------------------------------------------------------------------
                      00062 ;------[Retardo de 10 microsegundos]------
                      00063 ;--------------------------------------------------------------------------------------------------
                      00064                         
0395                  00065 T10uS:                                                                                          ; "A" [2
                            ] de la instrucción call que le invoca 
0395   300F           00066                         movlw           0x0F                                            ; "B" [1] de la 
                            instrucción "movlw"
0396   00CD           00067                         movwf           Contador1                               ; "C" [1] de la instrucc
                            ión "movwf"
                      00068 
0397   0BCD           00069                         decfsz  Contador1, F            ; "D" [2] si salta, [1] si continúa
0398   2B97           00070                         goto            $ - 1                                           ; "E" [2]
                      00071 
0399   0008           00072                         return                                                                  ; "F" [2
                            ]
                      00073 ;--------------------------------------------------------------------------------------------------
                      00074 ;TEORÍA de FUNCIONAMIENTO:
                      00075 ;
                      00076 ;--> Los números entre paréntesis indican los ciclos consumidos. Recuerde que un ciclo de máquina
                      00077 ; es igual a 200 nS.
                      00078 ;--> Existen CICLOS que se repiten un cierto numero de veces.
                      00079 ;--> En algunos casos habrá CICLOS ANIDADOS, es decir, CICLOS dentro de CICLOS.
                      00080 ;
                      00081 ;Para esta subrutina el cálculo de los ciclos queda de la siguiente manera:
                      00082 ;
                      00083 ;                       [2] + [1] + [1]     -->  4    {Instrucciones "call", "movlw", "movwf"}
                      00084 ;       +       14 * [1 + 2]        --> 42        {Repetición del ciclo "decfsz", "goto $ - 1"}
                      00085 ;   +   [2] + [2]           -->  4    {Del salto de "decfsz" y "return"}
                      00086 ; -----------------------------------                  
                      00087 ;       T O T A L           --> 50 Ciclos
                      00088 ;                               50 * 200 nS = 10,000 nS = 10 uS
                      00089 ;--------------------------------------------------------------------------------------------------
                      00090 ;------[Retardo de 100 microsegundos]------
                      00091 ;--------------------------------------------------------------------------------------------------
                      00092 
039A                  00093 T100uS:                                                                                         ; "A" [2
                            ] de la instrucción call que le invoca 
039A   30A5           00094                         movlw           0xA5                                            ; "B" [1] 
039B   00CD           00095                         movwf           Contador1                               ; "C" [1]
                      00096 
039C   0BCD           00097                         decfsz  Contador1, F            ; "D" [2] si salta, [1] si continúa
039D   2B9C           00098                         goto            $ - 1                                           ; "E" [2]
                      00099 
039E   0008           00100                         return                                                                  ; "F" [2
                            ]
                      00101                         
                      00102 ;--------[ TEORÍA de FUNCIONAMIENTO---------------------------------------------------------------------
                            ---------------
                      00103 ;  Para N igual a 1:
                      00104 ; A[2] --> B[1] --> C[1] --> D[2] --> F[2]                                                              
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00105 ;                       8 Ciclos, 1.6 uSegs.
                      00106 ;
                      00107 ;  Para N igual a 2:
                      00108 ; A[2] --> B[1] --> C[1] --> D[1] --> E[2] --> D[2] --> F[2]
                      00109 ;                       11 Ciclos, 2.2 uSegs.
                      00110 ;
                      00111 ;  Para N igual a 3:
                      00112 ; A[2] --> B[1] --> C[1] --> D[1] --> E[2] --> D[1] --> E[2] --> D[2] --> F[2]
                      00113 ;                       14 Ciclos, 2.8 uSegs.
                      00114 ;
                      00115 ;  Para N igual a 4:
                      00116 ; A[2] --> B[1] --> C[1] --> D[1] --> E[2] --> D[1] --> E[2] --> D[1] --> E[2]--> D[2] --> F[2]
                      00117 ;                       17 Ciclos, 3.4 uSegs.
                      00118 ;
                      00119 ; Secuencia de ejecución para cada valor de "N". Cada columna representa una etapa.
                      00120 ; Se indica la instrución que se ejecuta y los ciclos que consume.
                      00121 ; 
                      00122 ;  1     2         3             4
                      00123 ;
                      00124 ; A-2   A-2       A-2           A-2                                                             * Número
                             de ciclos fijo: 2
                      00125 ; B-1   B-1       B-1           B-1                                                                     
                            * Número de ciclos fijo: 1
                      00126 ; C-1   C-1       C-1           C-1                                                                     
                            * Número de ciclos fijo: 1
                      00127 ; D-2   D-1 D-2   D-1 D-1 D-2   D-1 D-1 D-1 D-2                 * (N-1)*1 + 2
                      00128 ;       E-2       E-2 E-2       E-2 E-2 E-2                                     * (N-1)*2
                      00129 ; F-2   F-2       F-2           F-2                                                                     
                            * Número de ciclos fijo: 2
                      00130 ;
                      00131 ;  En general, para cualquier valor "N":
                      00132 ;
                      00133 ; Ciclos consumidos = 2 + 1 + 1 + 1*(N-1) + 2 + 2*(N-1) + 2 
                      00134 ; Ciclos consumidos = 8 + (N-1) + 2*(N-1) 
                      00135 ; Ciclos consumidos = 8 + 3*(N-1) 
                      00136 ; Ciclos consumidos = 8 + 3*N - 3 
                      00137 ; Ciclos consumidos = 5 + 3*N
                      00138 ;
                      00139 ; Por ejemplo, para N=255, ciclos consumidos = 770 (154 uSeg).
                      00140 ; Para un retardo de 10 uSeg se resuelve: 50 = 5 + 3*N, de donde N = 15 (0x0F) .
                      00141 ;  y para 100 uSeg, se resuelve: 500 = 5 + 3*N, de donde N = 165 (0xA5).
                      00142 ;-------------------------------------------------------------------------------------------------------
                            ---------------
                      00143 
                      00144 ;-------------------------------------------------------------------------------------------------------
                            ---------------
                      00145 ;------[Retardo de 1 milisegundo]------
                      00146 ;-------------------------------------------------------------------------------------------------------
                            ---------------
039F                  00147 T1mS:
039F   3006           00148                         movlw     .6                            ; 1 | Número de repeticiones externas (B
                            )
03A0   00CD           00149         movwf     Contador1                     ; 1 |
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00150                 
03A1   30CF           00151 L01:    movlw     .207                          ; 1 | Número de repeticiones internas (A)
03A2   00CE           00152         movwf     Contador2                     ; 1 |
                      00153                 
03A3   0064           00154 L02:    clrwdt                                  ; 1 | Limpia registro WDT.
03A4   0BCE           00155         decfsz    Contador2,1           ; 1 + (1) ¿Se agotó? (A)
03A5   2BA3           00156         goto      L02                                           ; 2 no, regresa.
03A6   0BCD           00157         decfsz    Contador1,1           ; 1 + (1) ¿Se agotó? (B)
03A7   2BA1           00158         goto      L01                                           ; 2 no, regresa
                      00159                 
03A8   2BA9           00160                                 goto            $+1                     ; Retardo de 2 ciclos.
03A9   0064           00161                                 clrwdt                                  ; Retardo de un ciclo. 
                      00162 
03AA   0008           00163         return                                  ; 2+2 Concluído.
                      00164 ;-------------------------------------------------------------------------------------------------------
                            ---------------
                      00165 ;------[Retardo de 10 milisegundos]------
                      00166 ;-------------------------------------------------------------------------------------------------------
                            ---------------
03AB                  00167 T10mS:
03AB   3037           00168                         movlw     .55                           ; 1 | Número de repeticiones externas (B
                            )
03AC   00CD           00169         movwf     Contador1                     ; 1 |
                      00170                 
03AD   30B5           00171 L03:    movlw     .181                          ; 1 | Número de repeticiones internas (A)
03AE   00CE           00172         movwf     Contador2                     ; 1 |
                      00173                 
03AF   0064           00174 L04:    clrwdt                                  ; 1 | Limpia registro WDT.
03B0   0064           00175                                 clrwdt                                  ; 1 | Limpia registro WDT.
03B1   0BCE           00176         decfsz    Contador2,1           ; 1 + (1) ¿Se agotó? (A)
03B2   2BAF           00177         goto      L04                                           ; 2 no, regresa.
03B3   0BCD           00178         decfsz    Contador1,1           ; 1 + (1) ¿Se agotó? (B)
03B4   2BAD           00179         goto      L03                                           ; 2 no, regresa
                      00180                 
03B5   0008           00181         return                                  ; 2+2 Concluído.
                      00182 ;-------------------------------------------------------------------------------------------------------
                            ---------------
                      00183 ;------[Retardo de 100 milisegundos]------
                      00184 ;-------------------------------------------------------------------------------------------------------
                            ---------------
03B6                  00185 T100mS:
03B6   30EF           00186                                 movlw     .239                          ; 1 Ajustar el número de repetic
                            iones (B)
03B7   00CD           00187         movwf     Contador1             ; 1 |
                      00188                 
03B8   30E8           00189 L05:    movlw     .232                          ; 1 Ajustar el número de repeticiones (A)
03B9   00CE           00190         movwf     Contador2             ; 1 |
                      00191         
03BA   0064           00192 L06:    clrwdt                                  ; 1 Limpiar WDT
03BB   2BBC           00193                         goto            $ + 1           ; 2 Ciclos, retardo
03BC   2BBD           00194                         goto      $ + 1                 ; 2 Ciclos, retardo
03BD   0064           00195                                 clrwdt                                  ; 1 Ciclo, retardo
                      00196 
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03BE   0BCE           00197         decfsz    Contador2,1           ; 1 + (1) ¿Se agotó el tiempo? (A)
03BF   2BBA           00198         goto      L06                                           ; 2 no, Regresa
                      00199                 
03C0   0BCD           00200         decfsz    Contador1, 1          ; 1 + (1) ¿Se agotó el tiempo? (B)
03C1   2BB8           00201         goto      L05                                           ; 2 no, Regresa
                      00202                 
03C2   2BC3           00203                         goto      $ + 1                 ; 2 Ciclos, retardo
03C3   2BC4           00204                         goto            $ + 1           ; 2 Ciclos, retardo
03C4   2BC5           00205                                 goto      $ + 1                 ; 2 Ciclos, retardo
03C5   0064           00206                                 clrwdt                                  ; 1 Ciclo, retardo
                      00207 
03C6   0008           00208         return                                  ; 2+2 Terminado
                      00209 ;-------------------------------------------------------------------------------------------------------
                            ---------------
                      00210 ;------[Retardo de 1 Segundo]------
                      00211 ;-------------------------------------------------------------------------------------------------------
                            ---------------
03C7                  00212 T1S:
03C7   30A5           00213                         movlw     .165                          ; 1 Ajustar el número de repeticiones (C
                            )
03C8   00CD           00214         movwf     Contador1             ; 1 |
03C9                  00215 L07:            
03C9   3029           00216                         movlw     .41                           ; 1 Ajustar el número de repeticiones (B
                            )
03CA   00CE           00217         movwf     Contador2             ; 1 |
03CB                  00218 L08:            
03CB   3093           00219                         movlw     .147                          ; 1 Ajustar el número de repeticiones (A
                            )
03CC   00CF           00220         movwf     Contador3             ; 1 |
03CD                  00221 L09:            
03CD   0064           00222                         clrwdt                                  ; 1 Limpiar el WDT
03CE   0064           00223         clrwdt                                  ; 1 Retardo de un ciclo
03CF   0BCF           00224         decfsz    Contador3,1           ; 1 + (1) ¿Se agotó el tiempo? (A)
03D0   2BCD           00225         goto      L09                                           ; 2 no, Regresa
03D1   0BCE           00226         decfsz    Contador2,1           ; 1 + (1) ¿Se agotó el tiempo? (B)
03D2   2BCB           00227         goto      L08                                           ; 2 no, Regresa
03D3   0BCD           00228         decfsz    Contador1,1           ; 1 + (1) ¿Se agotó el tiempo? (C)
03D4   2BC9           00229         goto      L07                                           ; 2 no, Regresa
                      00230                 
03D5   0008           00231         return                                  ; 2+2 Concluido.
                      00232 ;-------------------------------------------------------------------------------------------------------
                            ---------------
                      00233 ;------[Retardo de 10 Segundos]------
                      00234 ;-------------------------------------------------------------------------------------------------------
                            ---------------
03D6                  00235 T10S:
03D6   30B7           00236                         movlw     .183                          ; 1 | Ajusta el número de repeticiones (
                            C)
03D7   00CD           00237         movwf     Contador1             ; 1 |
03D8                  00238 L10:            
03D8   30BE           00239                                 movlw     .190                          ; 1 | Ajusta el número de repeti
                            ciones (B)
03D9   00CE           00240         movwf     Contador2             ; 1 |
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03DA                  00241 L11:            
03DA   30EF           00242                                 movlw     .239                          ; 1 | Ajusta el número de repeti
                            ciones (A)
03DB   00CF           00243         movwf     Contador3             ; 1 |
03DC                  00244 L12:            
03DC   0064           00245                         clrwdt                                  ; 1 | Limpia el "WDT"
03DD   2BDE           00246                         goto            $ + 1           ; 2 | Retardo de dos ciclos 
                      00247 
03DE   0BCF           00248         decfsz    Contador3,1           ; 1 + (1) is the time over? (A)
03DF   2BDC           00249         goto      L12                                           ; 2 no, loop
                      00250                 
03E0   0BCE           00251         decfsz    Contador2,1           ; 1 + (1) ¿Se consumió el tiempo? (B)
03E1   2BDA           00252         goto      L11                                           ; 2  NO, regresa
                      00253                 
03E2   0BCD           00254         decfsz    Contador1,1           ; 1 + (1) ¿Se consumió el tiempo? (C)
03E3   2BD8           00255         goto      L10                                           ; 2 NO, regresa
                      00256                 
03E4   2BE5           00257                         goto            $ + 1           ; 2 ciclos de retardo
03E5   0064           00258                                 clrwdt                                  ; 1 ciclo de retardo
                      00259 
03E6   0008           00260         return                                  ; 2+2 Terminado
                      00261 ;-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-
                            _-_-_-_-_-_-_-_
                      00262 
                      00263 ;                       END
                      00840 
                      00841 ;=============================================================================
                      00842 ;====================( SUBRUTINAS OPERACIONES BÁSICAS )================================================
                      00843 ;================================================================================
                      00844 
                      00845 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00846 ;SUMAR NUMEROS DE HASTA 24 BITS
                      00847 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00848 ;SE DEBEN CARGAR PREVIAMENTE LOS NUMEROS A LOS REGISTROS Num1 y Num2
03E7                  00849 Suma:   ;Num1 + Num2 = Num2
                      00850         ;Se suman las partes a
                      00851         
03E7   0831           00852         movf Num1_a,W   ;W = Num1_a
03E8   07B4           00853         addwf Num2_a,F  ;Num2_a= W + Num2_a  
03E9   1C03           00854         btfss STATUS,C
03EA   2BED           00855                 goto No_incremento1
                      00856         
03EB   3001           00857         movlw 0x01 ;SE INCREMENTA DE ESTA FORMA, SINO EL PIC CAUSA ERRORES
03EC   07B5           00858         addwf Num2_b,F ; POR ALGUNA RAZÓN DESCONOCIDA
                      00859 
03ED                  00860 No_incremento1: 
                      00861 ;---------------------------------------------- 
                      00862         ;Suma las partes b
03ED   1C03           00863         btfss STATUS,0
03EE   2BF1           00864                 goto No_incremento2             
03EF   3001           00865         movlw 0x01 ;SE INCREMENTA DE ESTA FORMA, SINO EL PIC CAUSA ERRORES
03F0   07B6           00866         addwf Num2_c,F ; POR ALGUNA RAZÓN DESCONOCIDA
                      00867 
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 58


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03F1                  00868 No_incremento2:
03F1   1803           00869         btfsc STATUS,0
03F2   0AB7           00870                 incf Acarreo,F
03F3   0832           00871         movf Num1_b,W
03F4   07B5           00872         addwf Num2_b,F  
03F5   1C03           00873         btfss STATUS,C
03F6   2BF9           00874                 goto No_incremento3
03F7   3001           00875         movlw 0x01 ;SE INCREMENTA DE ESTA FORMA, SINO EL PIC CAUSA ERRORES
03F8   07B6           00876         addwf Num2_c,F ; POR ALGUNA RAZÓN DESCONOCIDA
                      00877 
03F9                  00878 No_incremento3:         
03F9   1803           00879         btfsc STATUS,0
03FA   0AB7           00880                 incf Acarreo,F
                      00881 ;---------------------------------------------
                      00882         ;Suma las partes c
03FB   0833           00883         movf Num1_c,W
03FC   07B6           00884         addwf Num2_c,1          
03FD   1803           00885         btfsc STATUS,0
03FE   0AB7           00886                 incf Acarreo,F
03FF   0008           00887         return
                      00888 
                      00889 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00890 ;RESTAR NUMEROS DE HASTA 24 BITS
                      00891 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
0400                  00892 Resta: ;Num1 - Num2 = Num2  (SIENDO EL NUM2 EL MENOR)
0400   01B7           00893         clrf Acarreo ;PARA EVITAR ERRORES SE REINICIAR EL REGISTRO DE ACARREO
                      00894         ;Se saca el complemento a 2 del Numero 2 (el numero menor)
                      00895         ;Se saca el complemento a 1
0401   09B4           00896         comf Num2_a,F
0402   09B5           00897         comf Num2_b,F
0403   09B6           00898         comf Num2_c,F
0404   09B7           00899         comf Acarreo,F
                      00900 
0405   3000           00901         movlw B'00000000'  ;PARA EVITAR ERRORES DEL PIC QUE CAUSAN EN ESTE
0406   07B6           00902         addwf Num2_c,1  ;PUNTO POR ALGUNA RAZÓN QUE DESCONOZCO!!!!?????
                      00903 
                      00904         ;Se saca el complemento a 2 (se suma 1)
0407   0AB4           00905         incf Num2_a,1
0408   1803           00906         btfsc STATUS,0
0409   0AB5           00907                 incf Num2_b,F
                      00908 
040A   1803           00909         btfsc STATUS,0
040B   0AB6           00910                 incf Num2_c,F
                      00911         
040C   23E7           00912         call Suma       
040D   0008           00913         return
                      00914 
                      00915 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00916 ;DIVIDIR DOS NUMEROS,  NUM1 / NUM2  donde Num2=8 BIT MAX y Num1 = 24 BIT MAX
                      00917 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
040E                  00918 Division: ;EL RESULTADO SE ALMACENA EN EL REGISTRO NUM2
040E   01BB           00919         clrf Auxiliar4
040F   01BA           00920         clrf Auxiliar3
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 59


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0410   01B9           00921         clrf Auxiliar2
                      00922 
0411   0834           00923         movfw Num2_a
0412   00B8           00924         movwf Auxiliar1
                      00925 
0413                  00926 Continua_division:
0413   01B6           00927         clrf Num2_c
0414   01B5           00928         clrf Num2_b
0415   0838           00929         movfw Auxiliar1
0416   00B4           00930         movwf Num2_a
                      00931 
0417   2400           00932         call Resta 
0418   1837           00933         btfsc Acarreo,0 
0419   2C26           00934                 goto Termina_division
                      00935         
041A   0836           00936         movfw Num2_c
041B   00B3           00937         movwf Num1_c
041C   0835           00938         movfw Num2_b
041D   00B2           00939         movwf Num1_b
041E   0834           00940         movfw Num2_a
041F   00B1           00941         movwf Num1_a
                      00942 
0420   0ABB           00943         incf Auxiliar4,F
0421   1803           00944         btfsc STATUS,C
0422   0ABA           00945                 incf Auxiliar3,F
0423   1803           00946         btfsc STATUS,C
0424   0AB9           00947                 incf Auxiliar2,F
                      00948 
0425   2C13           00949         goto Continua_division
                      00950 
0426                  00951 Termina_division:
0426   083B           00952         movfw Auxiliar4
0427   00B4           00953         movwf Num2_a
0428   083A           00954         movfw Auxiliar3
0429   00B5           00955         movwf Num2_b
042A   0839           00956         movfw Auxiliar2
042B   00B6           00957         movwf Num2_c
042C   0008           00958         return
                      00959 
                      00960 ;---------------------------------------------------------
                      00961         END
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 60


SYMBOL TABLE
  LABEL                             VALUE 

ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000006
ADCS1                             00000007
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
Acarreo                           00000037
Adigito1                          000000DC
Adigito2                          000000DF
Adigito3                          000000E2
Afinaldigitos                     00000116
Auxiliar1                         00000038
Auxiliar2                         00000039
Auxiliar3                         0000003A
Auxiliar4                         0000003B
BCD1                              0000003C
BCD2                              0000003D
BCD3                              0000003E
BCLIE                             00000003
BCLIF                             00000003
BF                                00000000
BIT_B_CURSOR_BLINK                (1<<0)
BIT_B_CURSOR_NO_BLINK             0
BIT_C_CURSOR_OFF                  0
BIT_C_CURSOR_ON                   (1<<1)
BIT_DL_DATALENGTH_4               0
BIT_DL_DATALENGTH_8               (1<<4)
BIT_D_DISPLAY_OFF                 0
BIT_D_DISPLAY_ON                  (1<<2)
BIT_F_FONT_5_10                   (1<<2)
BIT_F_FONT_5_8                    0
BIT_ID_DECREMENT_CURSOR           0
BIT_ID_INCREMENT_CURSOR           (1<<1)
BIT_N_DISP_LINES_1                0
BIT_N_DISP_LINES_2                (1<<3)
BIT_RL_SHIFT_LEFT                 0
BIT_RL_SHIFT_RIGHT                (1<<2)
BIT_SC_SHIFT_CURSOR               0
BIT_SC_SHIFT_DISPLAY              (1<<3)
BIT_S_AUTOSCROLL_OFF              0
BIT_S_AUTOSCROLL_ON               (1<<0)
BRGH                              00000002
Banco_Actual                      00000000
Bdigito1                          0000012D
Bdigito2                          00000130
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 61


SYMBOL TABLE
  LABEL                             VALUE 

Bdigito3                          00000133
Bfinaldigitos                     00000167
Bfinalsmenu                       000000C5
Bsmenu1                           000000C0
Bsmenu2                           000000C3
C                                 00000000
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1                             00000015
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2                             0000001B
CCPR2H                            0000001C
CCPR2L                            0000001B
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
CKE                               00000006
CKP                               00000004
CREN                              00000004
CSRC                              00000007
Columnas                          16
Contador1                         0000004D
Contador2                         0000004E
Contador3                         0000004F
Continua_ADC                      00000057
Continua_division                 00000413
Convertir_a_BCD                   000002C8
D                                 00000005
DATA_ADDRESS                      00000005
DC                                00000001
D_A                               00000005
D_NOT_A                           00000005
Division                          0000040E
E                                 PORTB,3
EEADR                             0000010D
EEADRH                            0000010F
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 62


SYMBOL TABLE
  LABEL                             VALUE 

EECON1                            0000018C
EECON2                            0000018D
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
EERD                              00000317
EEWR                              00000308
EW                                00000311
E_CLEAR_DISPLAY                   0x01
E_CURSOR_DISPLAY_SHIFT            0x10
E_DISPLAY_ON_OFF_CTRL             0x08
E_ENTRY_MODE_SET                  0x04
E_FUNCTION_SET                    0x20
E_LCD_CURSOR_OFF                  0x00
E_LCD_CURSOR_ON                   0x02
E_LCD_CURSOR_ON_BLINK             0x03
E_RETURN_HOME                     0x02
E_SET_CGRAM_ADDR                  0x40
E_SET_DDRAM_ADDR                  0x80
Espera                            00000058
F                                 00000001
FALSE                             0
FERR                              00000002
FSR                               00000004
GCEN                              00000007
GIE                               00000007
GO                                00000002
GO_DONE                           00000002
GO_NOT_DONE                       00000002
Hileras                           2
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
Inicio                            00000054
L01                               000003A1
L02                               000003A3
L03                               000003AD
L04                               000003AF
L05                               000003B8
L06                               000003BA
L07                               000003C9
L08                               000003CB
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 63


SYMBOL TABLE
  LABEL                             VALUE 

L09                               000003CD
L10                               000003D8
L11                               000003DA
L12                               000003DC
LCD_4Bits_PORTB.h                 
LCD_Autoscroll_Off                
LCD_Autoscroll_On                 
LCD_Auxiliar1                     0000002B
LCD_Auxiliar2                     0000002C
LCD_Byte                          0000037D
LCD_ByteCompleto                  00000384
LCD_Caracter                      00000357
LCD_Char                          00000326
LCD_Clear                         
LCD_CodigoCGROM                   0000035A
LCD_Com                           00000354
LCD_Cursor                        
LCD_Cursor_Left                   
LCD_Cursor_Right                  
LCD_Dato                          00000028
LCD_DosEspaciosBlancos            00000374
LCD_EnheMayuscula                 00000361
LCD_EnheMinuscula                 0000035B
LCD_EnviaBlancos                  00000377
LCD_EnviaByteLetra                00000390
LCD_EnviaOtroBlanco               00000378
LCD_FinCGROM                      0000036E
LCD_FinVisualizaDigito            00000392
LCD_GoTo                          
LCD_Grado                         00000368
LCD_GuardaDato                    00000029
LCD_GuardaTRISB                   0000002A
LCD_Home                          
LCD_Inicio                        00000336
LCD_Init                          
LCD_LineaEnBlanco                 00000370
LCD_Nibble                        00000388
LCD_Off                           
LCD_On                            
LCD_Scroll_Left                   
LCD_Scroll_Right                  
LCD_TresEspaciosBlancos           00000376
LCD_UnEspacioBlanco               00000372
LCD_VisualizaAlto                 00000385
LCD_VisualizaBajo                 00000387
LEE_MAX_MIN                       000002E3
Load                              
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
NOT_BOR                           00000000
NOT_DONE                          00000002
NOT_PD                            00000003
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 64


SYMBOL TABLE
  LABEL                             VALUE 

NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
NoTecla                           00000169
No_incremento1                    000003ED
No_incremento2                    000003F1
No_incremento3                    000003F9
Num1_a                            00000031
Num1_b                            00000032
Num1_c                            00000033
Num2_a                            00000034
Num2_b                            00000035
Num2_c                            00000036
OBF                               00000006
OERR                              00000001
OPTION_REG                        00000081
OutCod                            00000027
P                                 00000004
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PEIE                              00000006
PEN                               00000002
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PORTD                             00000008
PORTE                             00000009
PORT_LCD                          00000006
PR2                               00000092
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSPIE                             00000007
PSPIF                             00000007
PSPMODE                           00000004
Pin_RS                            1
Point                             00000025
Proceso_LM35                      00000054
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 65


SYMBOL TABLE
  LABEL                             VALUE 

PulseE                            00000321
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
RD0                               00000000
RD1                               00000001
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RE0                               00000000
RE1                               00000001
RE2                               00000002
READ_EEPROM                       
READ_WRITE                        00000002
RP0                               00000005
RP1                               00000006
RS                                PORTB,1
RSEN                              00000001
RW                                PORTB,2
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 66


SYMBOL TABLE
  LABEL                             VALUE 

RX9                               00000006
RX9D                              00000000
R_NOT_W                           00000002
R_W                               00000002
Registro_tecla                    00000023
Resta                             00000400
S                                 00000003
SEN                               00000000
SMP                               00000007
SPBRG                             00000099
SPEN                              00000007
SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPCON2                           00000091
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
SYNC                              00000004
Salir_m121                        00000181
Salir_m122                        00000189
Salir_m123                        00000191
SaltaSiVarDiferenteConst          
SaltaSiVarDiferenteVar            
SaltaSiVarIgualConst              
SaltaSiVarIgualVar                
SaltaSiVarMayorConst              
SaltaSiVarMayorIgualConst         
SaltaSiVarMayorIgualVar           
SaltaSiVarMayorVar                
SaltaSiVarMenorConst              
SaltaSiVarMenorIgualConst         
SaltaSiVarMenorIgualVar1          
SaltaSiVarMenorIgualVar2          
SaltaSiVarMenorIgualVar3          
SaltaSiVarMenorVar                
SelBanco                          
Select                            00000026
SendCom                           00000354
Suma                              000003E7
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T100mS                            000003B6
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 67


SYMBOL TABLE
  LABEL                             VALUE 

T100uS                            0000039A
T10S                              000003D6
T10mS                             000003AB
T10uS                             00000395
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T1S                               000003C7
T1SYNC                            00000002
T1mS                              0000039F
T1uS                              00000393
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TMR1                              0000000E
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000087
TRISC0                            00000000
TRISC1                            00000001
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 68


SYMBOL TABLE
  LABEL                             VALUE 

TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000088
TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
TRISD7                            00000007
TRISE                             00000089
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRIS_LCD                          00000086
TRMT                              00000001
TRUE                              1
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
Tecla0                            000001C9
Tecla1                            00000197
Tecla2                            0000019C
Tecla3                            000001A1
Tecla4                            000001A6
Tecla5                            000001AB
Tecla6                            000001B0
Tecla7                            000001B5
Tecla8                            000001BA
Tecla9                            000001BF
TeclaC                            000001C4
TeclaD                            000001D3
TeclaF                            000001CE
Temperatura1_H                    0000002D
Temperatura1_L                    0000002E
Temperatura2_H                    0000002F
Temperatura2_L                    00000030
Termina_division                  00000426
Termina_teclado                   000000A6
UA                                00000001
Var                               00000024
W                                 00000000
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 69


SYMBOL TABLE
  LABEL                             VALUE 

WCOL                              00000007
WR                                00000001
WREN                              00000002
WRERR                             00000003
WRITE_EEPROMlit                   
WRITE_EEPROMvar                   
Z                                 00000002
_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_BOREN_OFF                        00003FBF
_BOREN_ON                         00003FFF
_CONFIG                           00002007
_CPD_OFF                          00003FFF
_CPD_ON                           00003EFF
_CP_ALL                           00000FCF
_CP_HALF                          00001FDF
_CP_OFF                           00003FFF
_CP_UPPER_256                     00002FEF
_DEBUG_OFF                        00003FFF
_DEBUG_ON                         000037FF
_DEVID1                           00002006
_FOSC_EXTRC                       00003FFF
_FOSC_HS                          00003FFE
_FOSC_LP                          00003FFC
_FOSC_XT                          00003FFD
_HS_OSC                           00003FFE
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_LP_OSC                           00003FFC
_LVP_OFF                          00003F7F
_LVP_ON                           00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDTE_OFF                         00003FFB
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_WRT_ENABLE_OFF                   00003DFF
_WRT_ENABLE_ON                    00003FFF
_WRT_OFF                          00003DFF
_WRT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F877A                         00000001
__DEBUG                           1
aux_eeprom                        00000045
aux_eeprom1                       00000046
aux_eeprom2                       00000047
aux_eeprom3                       00000048
aux_eeprom4                       00000049
banco0                            
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 70


SYMBOL TABLE
  LABEL                             VALUE 

banco1                            
banco2                            
banco3                            
c                                 0000004A
carga                             Load
cont_clave                        00000020
continua_prog                     0000004F
control                           0000016B
d                                 0000004B
dispctrl                          00000004
dmayor                            0000016F
dmenor                            00000184
emenu0                            00000079
emenu0_2                          000000B7
emenu1                            0000007B
emenu1_2                          000000C6
emenu2                            0000007D
emenu2_2                          00000117
fin_ident                         00000196
finalmenus                        0000007E
finalmenus_2                      00000167
general_lcd                       00000022
identifica_menor                  0000017C
imprimelit                        
imprimevar                        
llena                             
m_maxA                            00000108
m_maxB                            00000159
m_minA                            0000010F
m_minB                            00000160
m_princA                          00000102
m_princB                          00000153
maxc                              0000003F
maxd                              00000040
maxu                              00000041
menu                              00000021
menu0                             000001D8
menu1                             00000228
menu2                             00000278
minc                              00000042
mind                              00000043
minu                              00000044
superamaximo                      00000179
superaminimo                      00000194
u                                 0000004C
umayor                            00000174
umenor                            0000018C
MPASM  5.51                AUTOMATIZACION.ASM   7-1-2019  3:59:34         PAGE 71


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


0000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
03C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXX--- ----------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:  1069
Program Memory Words Free:  7123


Errors   :     0
Warnings :     7 reported,     0 suppressed
Messages :    53 reported,     0 suppressed


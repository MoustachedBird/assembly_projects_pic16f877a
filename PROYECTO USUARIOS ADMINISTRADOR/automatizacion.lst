MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;============================================================================== 
                      00002 ;=================================[ AJUSTES ]========================================
                      00003 ;==============================================================================
0000                  00004         ORG 0x00
                      00005 ;-----------------------[ AJUSTES PARA PROGRAMAR ]--------------------------
                      00006         LIST    P = PIC16F877A                  ; Identificación del uC en donde se ensamblará.
                      00007         #INCLUDE        P16F877A.INC            ; Se usarán las variables de Microchip
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC16F877A processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      00566         LIST
2007   3F72           00008         __CONFIG _CP_OFF & _WDT_OFF & _BODEN_ON & _PWRTE_ON & _HS_OSC & _LVP_OFF & _DEBUG_OFF & _CPD_OFF
                      00009         RADIX                   HEX                                             ; La base numérica es He
                            xadecimal por omisión
                      00010 
                      00011 
                      00012 ;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                      00013 ;=-=-=-=-=-=-=-=-=-=-=-==-=-=- ( MACROS ) =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                      00014 ;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                      00015         ;MACROS PARA LA PANTALLA LCD
                      00016 
                      00017         #INCLUDE "SelBank.mac"                  ; MACRO para la mejor selección de BANCOS (LCD)
                      00001 ;------------------------------------------------------------------------------
                      00002 ; MACRO para el reemplazo de la directiva BANKSEL.  
                      00003 ; Se busca tener un número mínimo de instrucciones bit Set / Clear para
                      00004 ; cambiar al bando deseado.
                      00005 ;------------------------------------------------------------------------------
                      00006 ; Ajusta el estado de los bits RP0 y RP1 del registro STATUS para establecer
                      00007 ; adecuadamente el BANCO en donde se encuentra el registro "Reg" dado como
                      00008 ; parámetro.
                      00009 ;
                      00010 ; A diferencia de la directiva BANKSEL, este macro recuerda en cuál BANCO se 
                      00011 ; encuentra el proceso de ensamblado, guardada esta información en la variable
                      00012 ; "Banco_Actual". Basándose en el valor actual de "Banco_Actual" y del valor 
                      00013 ; propuesto en la etiqueta "Reg" sólo se ejecutarán las instrucciones bsf ó
                      00014 ; bcf necesarias sobre RP0 y RP1.
                      00015 ;
                      00016 ; Reg = El REGISTRO cuyo BANCO se desea seleccionar.
                      00017 ;------------------------------------------------------------------------------
  0000                00018         VARIABLE Banco_Actual = 0x0000              ; 0000 0000 0000 0000
                      00019 
                      00020 ; Localidad de Memoria : .... .... .... ....    .... .... .... ....
                      00021 ; Registros en BANCO 0 : 0000 0000 0000 0000 -> 0000 0000 0111 1111
                      00022 ; Registros en BANCO 1 : 0000 0000 1000 0000 -> 0000 0000 1111 1111
                      00023 ; Registros en BANCO 2 : 0000 0001 0000 0000 -> 0000 0001 0111 1111
                      00024 ; Registros en BANCO 3 : 0000 0001 1000 0000 -> 0000 0001 1111 1111
                      00025 
                      00026 SelBanco MACRO Reg
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00027         IF Reg & 0x0100                                                                                 
                                                    ; Reg > 0xFF, (Bancos 2 o 3)
                      00028                 IF (Banco_Actual & 0x0100) == 0                                 ; 0000 0001 0000 0000
                      00029                         bsf STATUS, RP1
                      00030                 ENDIF
                      00031         ELSE
                      00032                 IF (Banco_Actual & 0x0100) == 0x0100            ; 0000 0001 0000 0000
                      00033                         bcf STATUS, RP1
                      00034                 ENDIF
                      00035         ENDIF
                      00036         IF Reg & 0x0080                                                                                 
                                                    ; Reg > 0x7F, (Bancos 1, 2 o 3)
                      00037                 IF (Banco_Actual & 0x0080) == 0                                 ; 0000 0000 0000 0000
                      00038                         bsf STATUS, RP0
                      00039                 ENDIF
                      00040         ELSE
                      00041                 IF (Banco_Actual & 0x0080) == 0x0080            ; 0000 000 1000 0000
                      00042                         bcf STATUS, RP0
                      00043                 ENDIF
                      00044         ENDIF
                      00045 Banco_Actual SET Reg & 0x180                                                            ; Banco_Actual 0
                            000 000X XXXX XXXX
                      00046                                                                                                         
                                                                                                    ;                       
                      00047                                  ENDM
                      00048 ;------------------------------------------------------------------------------
                      00049 
                      00050 
                      00018         #INCLUDE "Macros_LCD.mac"      ;MACRO para la impresion en la LCD
                      00001 ;--------------------------------------------------------------------------------------------------
                      00002 ; MACROS para el Manejo de la LCD alfanumérica estándar
                      00003 ;
                      00004 ;LCD_Init                                                               Inicialización de manejador (Dri
                            ver) de la LCD [OBLIGATORIA].
                      00005 ;LCD_GoTo Columna, Hilera       Ajusta la posición del cursor en la DDRAM.
                      00006 ;LCD_Autoscroll_Off                             Deshabilita la función de "autoscroll" para cuando se es
                            criben caracteres a la LCD.
                      00007 ;LCD_Autoscroll_On                              Habilita la función de "autoscroll" para cuando se escri
                            ben caracteres a la LCD.
                      00008 ;LCD_Scroll_Right                                       Recorre la pantalla a la Derecha, también se afe
                            cta la posición del cursor.
                      00009 ;LCD_Scroll_Left                                        Recorre la pantalla a la Izquierda, también se a
                            fecta la posición del cursor.
                      00010 ;LCD_Cursor_Right                                       Mueve el cursor una posición a la Derecha.
                      00011 ;LCD_Cursor_Left                                        Mueve el cursor una posición a la Izquierda.
                      00012 ;LCD_Cursor Modo                                        Ajusta el tipo de Cursor. El parámetro Modo pued
                            e ser:
                      00013 ;       --> E_LCD_CURSOR_OFF            0x00    [Apagado]
                      00014 ; --> E_LCD_CURSOR_ON                   0x02    [Encendido, Fijo]
                      00015 ; --> E_LCD_CURSOR_ON_BLINK 0x03        [Encendido, Parpadeando]
                      00016 ;LCD_Off                                                                        Apagado de la pantalla d
                            e la LCD.
                      00017 ;LCD_On                                                                         Encendido de la pantalla
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                             de la LCD.
                      00018 ;LCD_Home                                                                       Cursor en posición de "H
                            ome".
                      00019 ;LCD_Clear                                                              Borrado de la pantalla, cursor e
                            n posición "Home".
                      00020 
                      00021 
                      00022 
                      00023 
                      00024 ;--------------------------------------------------------------------------------------------------
                      00025 ; -----[ Definición de BITS en la palabra de control ]-----
                      00026 ; Entry Mode Set Control Bits
                      00027 #DEFINE BIT_S_AUTOSCROLL_ON     (1<<0)          ; !< Enable autoscroll. For use with Entry Mode Set comm
                            and
                      00028 #DEFINE BIT_S_AUTOSCROLL_OFF    0                               ; !< Disable autoscroll. For use with En
                            try Mode Set command
                      00029 #DEFINE BIT_ID_INCREMENT_CURSOR (1<<1)  ; !< Increment cursor position after each char. For use with Ent
                            ry Mode Set command
                      00030 #DEFINE BIT_ID_DECREMENT_CURSOR 0                               ; !< Decrement cursor position after eac
                            h char. For use with Entry Mode Set command
                      00031 
                      00032 ; Display On/Off Control Bits
                      00033 #DEFINE BIT_B_CURSOR_BLINK      (1<<0)
                      00034 #DEFINE BIT_B_CURSOR_NO_BLINK   0
                      00035 #DEFINE BIT_C_CURSOR_ON         (1<<1)
                      00036 #DEFINE BIT_C_CURSOR_OFF        0
                      00037 #DEFINE BIT_D_DISPLAY_ON        (1<<2)
                      00038 #DEFINE BIT_D_DISPLAY_OFF       0
                      00039 
                      00040 ; Cursor / Display Shift Control Bits
                      00041 #DEFINE BIT_RL_SHIFT_RIGHT      (1<<2)
                      00042 #DEFINE BIT_RL_SHIFT_LEFT       0
                      00043 #DEFINE BIT_SC_SHIFT_DISPLAY    (1<<3)          ;!< Seting this bit causes a display scroll
                      00044 #DEFINE BIT_SC_SHIFT_CURSOR     0                                               ;!< Clearing this bits c
                            auses a cursor move
                      00045 
                      00046 ; Function set Control Bits
                      00047 #DEFINE BIT_F_FONT_5_10         (1<<2)
                      00048 #DEFINE BIT_F_FONT_5_8          0
                      00049 #DEFINE BIT_N_DISP_LINES_2      (1<<3)
                      00050 #DEFINE BIT_N_DISP_LINES_1      0
                      00051 #DEFINE BIT_DL_DATALENGTH_8     (1<<4)
                      00052 #DEFINE BIT_DL_DATALENGTH_4     0
                      00053 
                      00054 ; Define "boolean" values
                      00055 #IFNDEF TRUE
                      00056 #DEFINE TRUE 1
                      00057 #ENDIF
                      00058 #IFNDEF FALSE
                      00059 #DEFINE FALSE 0
                      00060 #ENDIF
                      00061 ;--------------------------------------------------------------------------------------------------
                      00062 ; Enumeration defining the HD44780 commands
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00063 #DEFINE E_CLEAR_DISPLAY 0x01
                      00064 #DEFINE E_RETURN_HOME 0x02
                      00065 #DEFINE E_ENTRY_MODE_SET 0x04
                      00066 #DEFINE E_DISPLAY_ON_OFF_CTRL 0x08
                      00067 #DEFINE E_CURSOR_DISPLAY_SHIFT 0x10
                      00068 #DEFINE E_FUNCTION_SET 0x20
                      00069 #DEFINE E_SET_CGRAM_ADDR 0x40
                      00070 #DEFINE E_SET_DDRAM_ADDR 0x80
                      00071 ;--------------------------------------------------------------------------------------------------
                      00072 ; This enumeration defines the available cursor modes
                      00073 #DEFINE E_LCD_CURSOR_OFF  0x00
                      00074 #DEFINE E_LCD_CURSOR_ON  0x02
                      00075 #DEFINE E_LCD_CURSOR_ON_BLINK 0x03
                      00076 ;--------------------------------------------------------------------------------------------------
                      00077 ;* Represents the IO pins used to control the LCD
                      00078 ;       E_D0_PIN = 0,
                      00079 ;       E_D1_PIN,
                      00080 ;       E_D2_PIN,
                      00081 ;       E_D3_PIN,
                      00082 ;       E_D4_PIN,
                      00083 ;       E_D5_PIN,
                      00084 ;       E_D6_PIN,
                      00085 ;       E_D7_PIN,
                      00086 ;       E_EN_PIN,
                      00087 ;       E_RS_PIN,
                      00088 ;       E_RW_PIN,
                      00089 ;
                      00090 ;--------------------------------------------------------------------------------------------------
                      00091 ;uint8_t lcd_init(void * iodata, uint8_t cols, uint8_t rows)
                      00092 ;{
                      00093 ;       // Initialize IO pins
                      00094 ;       iomode = lcd_ioinit(iodata);
                      00095 ;       lcdrows = rows;
                      00096 ;       lcdcolumns = cols;
                      00097 ;
                      00098 ;       // Initial delay after power-up
                      00099 ;       delay_ms(100);
                      00100 ;
                      00101 ;       //  Check if LCD interface is 8 or 4 bit mode
                      00102 ;       if (iomode == 4) {
                      00103 ;               // Begin LCD controller Initialization (HD44780 page 45-46)
                      00104 ;               // Put a loop here to send these three?
                      00105 ;               lcd_iowrite4(0x03);
                      00106 ;               delay_ms(5);
                      00107 ;               lcd_iowrite4(0x03);
                      00108 ;               delay_us(120);
                      00109 ;               lcd_iowrite4(0x03);
                      00110 ;               delay_us(120);
                      00111 ;               lcd_iowrite4(0x02);
                      00112 ;               delay_us(120);
                      00113 ;               lcd_command(E_FUNCTION_SET | BIT_DL_DATALENGTH_4 | BIT_N_DISP_LINES_2 | BIT_F_FONT_5_10)
                            ;
                      00114 ;               delay_us(50);
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00115 ;       } else if (iomode == 8) {
                      00116 ;               // Begin LCD controller Initialization (HD44780 page 45-46)
                      00117 ;               lcd_command(E_FUNCTION_SET);
                      00118 ;               delay_ms(5);
                      00119 ;               lcd_command(E_FUNCTION_SET);
                      00120 ;               delay_us(120);
                      00121 ;               lcd_command(E_FUNCTION_SET);
                      00122 ;               delay_us(120);
                      00123 ;               lcd_command(E_FUNCTION_SET | BIT_DL_DATALENGTH_8 | BIT_N_DISP_LINES_2 | BIT_F_FONT_5_10)
                            ;
                      00124 ;               delay_us(50);
                      00125 ;       }
                      00126 ;       // Configure display after power up
                      00127 ;       lcd_command(E_DISPLAY_ON_OFF_CTRL | BIT_D_DISPLAY_OFF);
                      00128 ;       delay_us(50);
                      00129 ;       lcd_command(E_CLEAR_DISPLAY);
                      00130 ;       delay_ms(2);
                      00131 ;       lcd_command(E_ENTRY_MODE_SET | BIT_S_AUTOSCROLL_OFF | BIT_ID_INCREMENT_CURSOR);
                      00132 ;       delay_us(50);
                      00133 ;
                      00134 ;       return TRUE;
                      00135 ;}
                      00136 
                      00137 ;void lcd_puts(const char * string)
                      00138 ;{
                      00139 ;       while (*string != '\0')
                      00140 ;               lcd_write(*string++);
                      00141 ;}
                      00142 
                      00143 ;void lcd_create_char(uint8_t charnum, const uint8_t * chardata)
                      00144 ;{
                      00145 ;       uint8_t i;
                      00146 ;       charnum &= 0x07;
                      00147 ;       lcd_command(E_SET_CGRAM_ADDR | (charnum << 3));
                      00148 ;       for (i = 0; i < 8; i++)
                      00149 ;               lcd_write(chardata[i]);
                      00150 ;
                      00151 ;--------------------------------------------------------------------------------------------------
                      00152 ;-----[ Inicialización de manejador (Driver) de LCD [OBLIGATORIA] ]-----
                      00153 LCD_Init  MACRO                                                                                         
                            ;
                      00154                                                 VARIABLE dispctrl = 0x00        ; Se emplea en algunos M
                            acros.
                      00155                                                 call            LCD_Inicio
                      00156                                         ENDM
                      00157 ;--------------------------------------------------------------------------------------------------
                      00158 ;-----[ Borrado de pantalla, cursor en "Home" ]-----
                      00159 LCD_Clear       MACRO                                                                                   
                            ; 
                      00160                                                         movlw   E_CLEAR_DISPLAY         ;
                      00161                                                         call    SendCom                                 
                                    ; Tarda 1.52 mS
                      00162                                                 ENDM
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00163 ;--------------------------------------------------------------------------------------------------     
                      00164 ;-----[ Cursor en posición de "Home" ]-----                                             
                      00165 LCD_Home        MACRO                                                                   ; 
                      00166                                                         movlw   E_RETURN_HOME   ; 
                      00167                                                         call    SendCom                         ; Tarda 
                            1.52 mS
                      00168                                                 ENDM
                      00169 ;--------------------------------------------------------------------------------------------------     
                      00170 ;-----[ Encendido de la pantalla de la LCD ]-----                                               
                      00171 LCD_On                  MACRO                                                                   ; 
                      00172 dispctrl SET dispctrl | BIT_D_DISPLAY_ON        ; dispctrl |= BIT_D_DISPLAY_ON;
                      00173                                                         movlw           E_DISPLAY_ON_OFF_CTRL
                      00174                                                         iorlw           dispctrl
                      00175                                                         call            SendCom                 ; lcd_co
                            mmand(E_DISPLAY_ON_OFF_CTRL | dispctrl);
                      00176                                                 ENDM
                      00177 ;--------------------------------------------------------------------------------------------------     
                      00178 ;-----[ Apagado de la pantalla de la LCD ]-----                                         
                      00179 LCD_Off                 MACRO                                                                           
                                    ; 
                      00180 dispctrl SET dispctrl & ~BIT_D_DISPLAY_ON                       ; dispctrl &= ~BIT_D_DISPLAY_ON;
                      00181                                                         movlw   E_DISPLAY_ON_OFF_CTRL
                      00182                                                         iorlw   dispctrl                
                      00183                                                         call    SendCom                         ; lcd_co
                            mmand(E_DISPLAY_ON_OFF_CTRL | dispctrl); delay_us(50)
                      00184                                                 ENDM
                      00185 ;--------------------------------------------------------------------------------------------------     
                      00186 ;-----[ Ajusta el tipo de Cursor ]-----
                      00187 LCD_Cursor      MACRO  Modo                                     ; 
                      00188 
                      00189 ;               El parámetro Modo puede ser:
                      00190 ;       --> E_LCD_CURSOR_OFF            0x00    [Apagado]
                      00191 ; --> E_LCD_CURSOR_ON                   0x02    [Encendido, Fijo]
                      00192 ; --> E_LCD_CURSOR_ON_BLINK 0x03        [Encendido, Parpadeando]
                      00193 
                      00194 dispctrl SET dispctrl & 0xFC                    ; dispctrl &= 0xFC;
                      00195 dispctrl SET dispctrl | Modo                    ; dispctrl |= Modo;
                      00196                                                         movlw   E_DISPLAY_ON_OFF_CTRL
                      00197                                                         iorlw   dispctrl                
                      00198                                                         call    SendCom                         ; lcd_co
                            mmand(E_DISPLAY_ON_OFF_CTRL | dispctrl);
                      00199                                                 ENDM
                      00200 ;--------------------------------------------------------------------------------------------------     
                      00201 ;-----[ Mueve el cursor una posición a la Izquierda ]-----
                      00202 LCD_Cursor_Left MACRO                                                   ; 
                      00203 
                      00204 ; lcd_command(E_CURSOR_DISPLAY_SHIFT | BIT_SC_SHIFT_CURSOR | BIT_RL_SHIFT_LEFT);
                      00205                                                                         movlw           E_CURSOR_DISPLAY
                            _SHIFT
                      00206                                                                         iorlw           BIT_SC_SHIFT_CUR
                            SOR
                      00207                                                                         iorlw           BIT_RL_SHIFT_LEF
                            T
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00208                                                                         call            SendCom
                      00209                                                                 ENDM
                      00210 ;--------------------------------------------------------------------------------------------------     
                                                                                    
                      00211 ;-----[ Mueve el cursor una posición a la Derecha ]-----
                      00212 LCD_Cursor_Right        MACRO                                                   ;                       
                                                                    
                      00213 ;lcd_command(E_CURSOR_DISPLAY_SHIFT | BIT_SC_SHIFT_CURSOR | BIT_RL_SHIFT_RIGHT);                        
                                                            
                      00214                                                                                 movlw           E_CURSOR
                            _DISPLAY_SHIFT
                      00215                                                                                 iorlw           BIT_SC_S
                            HIFT_CURSOR
                      00216                                                                                 iorlw           BIT_RL_S
                            HIFT_RIGHT
                      00217                                                                                 call            SendCom
                      00218                                                                         ENDM
                      00219 ;--------------------------------------------------------------------------------------------------     
                                                                                            
                      00220 ;-----[ Recorre la pantalla a la Izquierda, también se afecta la posición del cursor ]-----
                      00221 LCD_Scroll_Left         MACRO                                           ; 
                      00222 ;lcd_command(E_CURSOR_DISPLAY_SHIFT | BIT_SC_SHIFT_DISPLAY | BIT_RL_SHIFT_LEFT);                        
                                                                                                                    
                      00223                                                                                 movlw           E_CURSOR
                            _DISPLAY_SHIFT
                      00224                                                                                 iorlw           BIT_SC_S
                            HIFT_DISPLAY
                      00225                                                                                 iorlw           BIT_RL_S
                            HIFT_LEFT
                      00226                                                                                 call            SendCom
                      00227                                                                         ENDM
                      00228 ;--------------------------------------------------------------------------------------------------     
                                                                                            
                      00229 ;-----[ Recorre la pantalla a la Derecha, también se afecta la posición del cursor ]-----
                      00230 LCD_Scroll_Right        MACRO                                           ; 
                      00231 ;lcd_command(E_CURSOR_DISPLAY_SHIFT | BIT_SC_SHIFT_DISPLAY | BIT_RL_SHIFT_RIGHT);                       
                                                                                                                    
                      00232                                                                                 movlw           E_CURSOR
                            _DISPLAY_SHIFT
                      00233                                                                                 iorlw           BIT_SC_S
                            HIFT_DISPLAY
                      00234                                                                                 iorlw           BIT_RL_S
                            HIFT_RIGHT
                      00235                                                                                 call            SendCom
                      00236                                                                         ENDM                            
                                                                    
                      00237 ;--------------------------------------------------------------------------------------------------     
                                                                                            
                      00238 ;-----[ Habilita la función de "autoscroll" para cuando se escriben caracteres a la LCD ]-----
                      00239 LCD_Autoscroll_On               MACRO                                           ; 
                      00240 ;lcd_command(E_ENTRY_MODE_SET | BIT_S_AUTOSCROLL_ON | BIT_ID_INCREMENT_CURSOR);                         
                                                                                                            
                      00241                                                                                         movlw           
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            E_ENTRY_MODE_SET
                      00242                                                                                         iorlw           
                            BIT_S_AUTOSCROLL_ON
                      00243                                                                                         iorlw           
                            BIT_ID_INCREMENT_CURSOR
                      00244                                                                                         call            
                            SendCom
                      00245                                                                                 ENDM                    
                      00246 ;--------------------------------------------------------------------------------------------------     
                      00247 ;-----[ Deshabilita la función de "autoscroll" para cuando se escriben caracteres a la LCD ]-----
                      00248 LCD_Autoscroll_Off      MACRO                                           ; 
                      00249 ;lcd_command(E_ENTRY_MODE_SET | BIT_S_AUTOSCROLL_OFF | BIT_ID_INCREMENT_CURSOR);                        
                                                                                                                    
                      00250                                                                                         movlw           
                            E_ENTRY_MODE_SET
                      00251                                                                                         iorlw           
                            BIT_S_AUTOSCROLL_OFF
                      00252                                                                                         iorlw           
                            BIT_ID_INCREMENT_CURSOR
                      00253                                                                                         call            
                            SendCom
                      00254                                                                                 ENDM                    
                      00255 ;--------------------------------------------------------------------------------------------------     
                                                                                                                            
                      00256 ;-----[ Ajusta la posición del cursor en la DDRAM. Si el cursor está habiilitado, se mostrará. ]
                      00257 LCD_GoTo                                                MACRO           Columna, Hilera 
                      00258         LOCAL Direccion_Hilera
                      00259 ; Se aplican límites para Hileras y Columnas:
                      00260 ;       IF (Hilera > Hileras)
                      00261 ;               Hilera_Final SET Hileras - 1
                      00262 ;       ENDIF
                      00263 ;       IF (Columna > Columnas) 
                      00264 ;               Columna_Final SET Columnas - 1
                      00265 ;       ENDIF
                      00266 
                      00267 ; PARA LCD de 20x4
                      00268 ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                      00269 ;#define LCD_LINEA2 0xC0 // Direccion de memoria para la segunda linea
                      00270 ;#define LCD_LINEA3 0x94 // Direccion de memoria para la tercera linea
                      00271 ;#define LCD_LINEA4 0xD4 // Direccion de memoria para la cuarta linea
                      00272                                         
                      00273 ; PARA LCD de 16x4
                      00274 ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                      00275 ;#define LCD_LINEA2 0x40 // Direccion de memoria para la segunda linea
                      00276 ;#define LCD_LINEA3 0x14 // Direccion de memoria para la tercera linea
                      00277 ;#define LCD_LINEA4 0x54 // Direccion de memoria para la cuarta linea                                   
                      00278 
                      00279 ; Cálculo de la máscara en función del número de línea en donde se coloca el cursor:
                      00280 ;            |      V I S I B L E S      |     No Mostrados       |
                      00281 ; LÍNEA 0 --> 00 01 02 03 04 05 ... 0E 0F 10 11 12 13 14 ... 26 27    En Total 40 Caracteres
                      00282 ; LÍNEA 1 --> 40 41 42 43 44 45 ... 4E 4F 50 51 52 53 54 ... 66 67    En Total 40 Caracteres
                      00283 ; LÍNEA 2 --> 14 15 16 17 18 19 ... 22 23 24 25 26 27 28 ... 3A 3B    En Total 40 Caracteres
                      00284 ; LÍNEA 3 --> 54 55 56 57 58 59 ... 62 63 64 65 66 67 68 ... 80 81    En Total 40 Caracteres
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00285 
                      00286         IF (Columnas == 16)
                      00287                 IF (Hilera == 0)
                      00288                         Direccion_Hilera SET 0x00
                      00289                 ENDIF   
                      00290                 IF (Hilera == 1)
                      00291                         Direccion_Hilera SET 0x40
                      00292                 ENDIF
                      00293                 IF (Hilera == 2)
                      00294                         Direccion_Hilera SET 0x14
                      00295                 ENDIF
                      00296                 IF (Hilera == 3)
                      00297                         Direccion_Hilera SET 0x54
                      00298                 ENDIF
                      00299         ENDIF
                      00300         
                      00301         IF (Columnas == 20)
                      00302                 IF (Hilera == 0)
                      00303                         Direccion_Hilera SET 0x00
                      00304                 ENDIF   
                      00305                 IF (Hilera == 1)
                      00306                         Direccion_Hilera SET 0xC0
                      00307                 ENDIF
                      00308                 IF (Hilera == 2)
                      00309                         Direccion_Hilera SET 0x94
                      00310                 ENDIF
                      00311                 IF (Hilera == 3)
                      00312                         Direccion_Hilera SET 0xD4
                      00313                 ENDIF
                      00314         ENDIF
                      00315         
                      00316 ; lcd_command(E_SET_DDRAM_ADDR | (col + rowaddr[ row ]));
                      00317                                                                                         movlw           
                            Direccion_Hilera
                      00318                                                                                         addlw           
                            Columna
                      00319                                                                                         iorlw           
                            E_SET_DDRAM_ADDR
                      00320                                                                                         call            
                            SendCom
                      00321                                                                                 ENDM                    
                      00322 ;--------------------------------------------------------------------------------------------------     
                      00323                                                                         
                      00324                                                                 
                      00325                                                                 
                      00326                                                                 
                      00327 ;--------------------------------------------------------------------------------------------------     
                                                                                                            
                      00328                                                                                                         
                                                            
                      00019         #INCLUDE "SaltaSiMacros.mac" ;  ;MACRO para funciones "if", igualar, impresion de caracteres, et
                            c (varios)
                      00001 ;MACROS SALTA_SI by MoustachedBird (beta)
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00002 
                      00003 ;-----[ Macro Load ]-----
                      00004 ; Carga un valor en una variables
                      00005 Load    MACRO   Var,Valor
                      00006         movlw   Valor   ; Toma el valor de la literal
                      00007         movwf   Var     ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
                      00008         ENDM
                      00009         ; Alias para el MACRO anterior:
                      00010         #DEFINE carga Load
                      00011 
                      00012 ;-----[ Macro llena ]-----
                      00013 ; Carga un valor en una variables
                      00014 llena   MACRO   Var1,Var2
                      00015         movfw   Var2    ; Toma el valor de la literal
                      00016         movwf   Var1    ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
                      00017         ENDM
                      00018 
                      00019 ;-----[ Macro imprime variable]-----
                      00020 ; imprime una variable
                      00021 imprimevar      MACRO   Var
                      00022         movfw   Var     ; 
                      00023         movwf   general_lcd
                      00024         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
                      00025         movfw general_lcd
                      00026         call  LCD_Char
                      00027 
                      00028         ENDM
                      00029 
                      00030 ;-----[ Macro imprime literal]-----
                      00031 ; imprime una variable
                      00032 imprimelit      MACRO   Lit
                      00033         movlw   Lit     ; 
                      00034         movwf   general_lcd
                      00035         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
                      00036         movfw general_lcd
                      00037         call  LCD_Char
                      00038 
                      00039         ENDM
                      00040 
                      00041 
                      00042 ;==============================================================================
                      00043 ;===========================[ VARIABLE - LITERAL ]=============================
                      00044 ;==============================================================================
                      00045 
                      00046 SaltaSiVarIgualConst    MACRO   Registro1_m1, Constante1_m1, Salto_m1
                      00047         movlw   Constante1_m1   ; Se emplea la resta para la comparación.
                      00048         subwf   Registro1_m1,W  ; (W)=(Registro1_m1) - Constante_m1
                      00049         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
                      00050                 goto    Salto_m1        ; Si Z=1 son iguales, por lo tanto salta  
                      00051         ENDM
                      00052 
                      00053 ;-----------------------------------------------------------------------------
                      00054 SaltaSiVarDiferenteConst        MACRO   Registro1_m2, Constante1_m2, Salto_m2
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00055         movlw   Constante1_m2   ; Se emplea la resta para la comparación.
                      00056         subwf   Registro1_m2,W  ; (W)=(Registro1_m2) - Constante_m2
                      00057         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
                      00058         goto    Salto_m2                ; Si Z=0 son diferentes, por lo tanto salta
                      00059         ENDM
                      00060 
                      00061 ;-----------------------------------------------------------------------------
                      00062 SaltaSiVarMayorConst    MACRO   Registro1_m3, Constante1_m3, Salto_m3
                      00063         movlw   Constante1_m3   ; Se emplea la resta para la comparación.
                      00064         subwf   Registro1_m3,W  ; (W)=(Registro1_m3) - Constante_m3
                      00065         btfsc   STATUS,C                ; ¿Carry=1? Si Carry=0 hubo prestamo y si Carry=1 no hubo presta
                            mo
                      00066                 goto ComprobarBanderaZ_m3 ;Si no hubo bit de prestamo puede ser igual o mayor por lo tan
                            to comprueba bandera de 0
                      00067         goto Salir_m3 ;Si hubo bit de prestamo, es menor, sale de la macro
                      00068 
                      00069         ComprobarBanderaZ_m3:
                      00070                 btfss   STATUS,Z                ;Si la Bandera Z de STATUS es 1, son iguales
                      00071                         goto    Salto_m3                ; La bandera Z es 0, por lo tanto es mayor
                      00072         
                      00073         Salir_m3: ; Para Salir de la macro en caso de que ninguna opción se cumpla
                      00074         ENDM
                      00075 
                      00076 ;-----------------------------------------------------------------------------
                      00077 SaltaSiVarMenorConst    MACRO   Registro1_m4, Constante1_m4, Salto_m4
                      00078         movlw   Constante1_m4   ; Se emplea la resta para la comparación.
                      00079         subwf   Registro1_m4,0  ; (W)=(Registro1_m4) - Constante_m4
                      00080         btfss   STATUS,C                ; ¿Carry=1? Si Carry=0 hubo prestamo y si Carry=1 no hubo presta
                            mo
                      00081         goto    Salto_m4                ; Si hubo bit de prestamo por lo tanto es menor
                      00082         ENDM
                      00083 
                      00084 ;-----------------------------------------------------------------------------
                      00085 SaltaSiVarMayorIgualConst       MACRO   Registro1_m5, Constante1_m5, Salto_m5
                      00086         movlw   Constante1_m5   ; Se emplea la resta para la comparación.
                      00087         subwf   Registro1_m5,0  ; (W)=(Registro1_m5) - Constante_m5
                      00088         btfsc   STATUS,C                ; ¿Carry=1? Si Carry=0 hubo prestamo y si Carry=1 no hubo presta
                            mo
                      00089         goto    Salto_m5                ; No hubo bit de prestamo por lo tanto es mayor
                      00090         ENDM
                      00091 
                      00092 ;-----------------------------------------------------------------------------
                      00093 SaltaSiVarMenorIgualConst       MACRO   Registro1_m6, Constante1_m6, Salto_m6
                      00094         movlw   Constante1_m6   ; Se emplea la resta para la comparación.
                      00095         subwf   Registro1_m6,W  ; (W)=(Registro1_m6) - Constante_m6
                      00096         btfsc   STATUS,C                ; ¿Carry=1? Si Carry=0 hubo prestamo y si Carry=1 no hubo presta
                            mo
                      00097                 goto Salir_m6 ;No hubo bit de prestamo por lo tanto sale de la macro
                      00098         
                      00099         Si_es_menor_m6:
                      00100                 goto    Salto_m6                ; La bandera Z es 0, por lo tanto es mayor
                      00101         
                      00102         Salir_m6: ; Para Salir de la macro en caso de que ninguna opción se cumpla
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00103                 btfsc   STATUS,Z                ;Si la Bandera Z de STATUS es 1,  son iguales
                      00104                         goto    Salto_m6                ; Si no son iguales, entonces sal de la macro
                      00105 
                      00106         ENDM
                      00107 
                      00108 ;==============================================================================
                      00109 ;==========================[ VARIABLE - VARIABLE ]=============================
                      00110 ;==============================================================================
                      00111 
                      00112 SaltaSiVarIgualVar      MACRO   Registro1_m7, Registro2_m7, Salto_m7
                      00113         movfw   Registro2_m7    ; Se emplea la resta para la comparación.
                      00114         subwf   Registro1_m7,W  ; (W)=(Registro1_m7) - Constante_m7
                      00115         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
                      00116                 goto    Salto_m7        ; Si Z=1 son iguales, por lo tanto salta  
                      00117         ENDM
                      00118 
                      00119 ;-----------------------------------------------------------------------------
                      00120 SaltaSiVarDiferenteVar  MACRO   Registro1_m8, Registro2_m8, Salto_m8
                      00121         movfw   Registro2_m8    ; Se emplea la resta para la comparación.
                      00122         subwf   Registro1_m8,W  ; (W)=(Registro1_m8) - Constante_m8
                      00123         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
                      00124         goto    Salto_m8                ; Si Z=0 son diferentes, por lo tanto salta
                      00125         ENDM
                      00126 
                      00127 ;-----------------------------------------------------------------------------
                      00128 SaltaSiVarMayorVar      MACRO   Registro1_m9, Registro2_m9, Salto_m9
                      00129         movfw   Registro2_m9    ; Se emplea la resta para la comparación.
                      00130         subwf   Registro1_m9,W  ; (W)=(Registro1_m9) - Constante_m9
                      00131         btfsc   STATUS,C                ; ¿Carry=1? Si Carry=0 hubo prestamo y si Carry=1 no hubo presta
                            mo
                      00132                 goto ComprobarBanderaZ_m9 ;Si no hubo bit de prestamo puede ser igual o mayor por lo tan
                            to comprueba bandera de 0
                      00133         goto Salir_m9 ;Si hubo bit de prestamo, es menor, sale de la macro
                      00134 
                      00135         ComprobarBanderaZ_m9:
                      00136                 btfss   STATUS,Z                ;Si la Bandera Z de STATUS es 1, son iguales
                      00137                         goto    Salto_m9                ; La bandera Z es 0, por lo tanto es mayor
                      00138         
                      00139         Salir_m9: ; Para Salir de la macro en caso de que ninguna opción se cumpla
                      00140         ENDM
                      00141 
                      00142 ;-----------------------------------------------------------------------------
                      00143 SaltaSiVarMenorVar      MACRO   Registro1_m10, Registro2_m10, Salto_m10
                      00144         movfw   Registro2_m10   ; Se emplea la resta para la comparación.
                      00145         subwf   Registro1_m10,W ; (W)=(Registro1_m10) - Constante_m10
                      00146         btfss   STATUS,C                ; ¿Carry=1? Si Carry=0 hubo prestamo y si Carry=1 no hubo presta
                            mo
                      00147         goto    Salto_m10               ; Si hubo bit de prestamo por lo tanto es menor
                      00148         ENDM
                      00149 ;-----------------------------------------------------------------------------
                      00150 SaltaSiVarMayorIgualVar MACRO   Registro1_m11, Registro2_m11, Salto_m11
                      00151         movfw   Registro2_m11   ; Se emplea la resta para la comparación.
                      00152         subwf   Registro1_m11,W ; (W)=(Registro1_m11) - Constante_m11
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00153         btfsc   STATUS,C                ; ¿Carry=1? Si Carry=0 hubo prestamo y si Carry=1 no hubo presta
                            mo
                      00154         goto    Salto_m11               ; No hubo bit de prestamo por lo tanto es mayor
                      00155         ENDM
                      00156 
                      00157 ;-----------------------------------------------------------------------------
                      00158 SaltaSiVarMenorIgualVar MACRO   Registro1_m12, Registro2_m12, Salto_m12
                      00159         movfw   Registro2_m12   ; Se emplea la resta para la comparación.
                      00160         subwf   Registro1_m12,W ; (W)=(Registro1_m6) - Constante_m6
                      00161         btfsc   STATUS,C                ; ¿Carry=1? Si Carry=0 hubo prestamo y si Carry=1 no hubo presta
                            mo
                      00162                 goto Salir_m12 ;No hubo bit de prestamo por lo tanto sale de la macro
                      00163         
                      00164 Si_es_menor_m12:
                      00165                 goto    Salto_m12               ; La bandera Z es 0, por lo tanto es mayor
                      00166         
                      00167 Salir_m12: ; Para Salir de la macro en caso de que ninguna opción se cumpla
                      00168                 btfsc   STATUS,Z                ;Si la Bandera Z de STATUS es 1,  son iguales
                      00169                         goto    Salto_m12               ; Si no son iguales, entonces sal de la macro
                      00170 
                      00171         ENDM
                      00172 
                      00173 ;==============================================================================
                      00174 ;==============================================================================
                      00175 ;==============================================================================
                      00020         #INCLUDE "EEPROM.mac" ;MACRO para implementar las funciones de la memoria EEPROM, cambiar de ban
                            co
                      00001 ;MACROS EEPROM by MoustachedBird
                      00002 
                      00003 ;IMPORTANTE!!!: EN CASO DE MANEJAR INTERRUPCIONES Y QUERER GRABAR
                      00004 ;EN LA EEPROM DESCOMENTAR LAS LINEAS DE CODIGO CORRESPONDIENTES EN LAS
                      00005 ;MACROS DE ESTE DOCUMENTO
                      00006 
                      00007 banco3 MACRO
                      00008         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
                      00009         bsf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
                      00010         ENDM
                      00011 
                      00012 banco2 MACRO
                      00013         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
                      00014         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
                      00015         ENDM
                      00016 
                      00017 banco1 MACRO
                      00018         bcf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
                      00019         bsf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
                      00020         ENDM
                      00021 
                      00022 banco0 MACRO
                      00023         bcf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
                      00024         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
                      00025         ENDM
                      00026 
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00027 ;La direccion de la EEPROM del PIC16F877A puede ir de 
                      00028 ;0x0000 a 0x1FFF
                      00029 
                      00030 ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                      00031 ;Macro para escribir una literal (valor numerico) en la EEPROM
                      00032 WRITE_EEPROMlit MACRO direccion,numero
                      00033                 banco2
                      00034                 movlw numero
                      00035                 movwf   EEDATA          ;DATO = numero
                      00036                 movlw direccion
                      00037                 movwf   EEADR           ;DIRECCION=direccion
                      00038                 banco3                  ;HABILITA EL BANCO 3
                      00039                 bcf     EECON1,EEPGD    ;APUNTA HACIA EEPROM DE DATOS           
                      00040                 bsf     EECON1,WREN     ;HABILITA ESCRITURA EN EEPROM
                      00041                 ;bcf INTCON, GIE        ;DESHABILITA INTERRUPCIONES (solo cuando haya interrupciones)   
                             
                      00042                 movlw   H'55'           ;PREPARA SECUENCIA DE SEGURIDAD
                      00043                 movwf   EECON2          ;ESCRIBE PRIMER DATO DE SECUENCIA
                      00044                 movlw   H'AA'           ;SEGUNDO DATO
                      00045                 movwf   EECON2          ;ESCRIBE SEGUNDO DATO DE SECUENCIA
                      00046                 bsf     EECON1,WR       ;INICIA CICLO DE ESCRITURA
                      00047                 btfsc   EECON1,WR       ;MALLA PARA ESPERAR AL FINAL DEL CICLO
                      00048         goto    $-1              ;SI WR=1, CICLO DE ESCRITURA AUN NO TERMINA (regresa a la linea anterio
                            r)
                      00049                 bcf     EECON1, WREN    ;DESHABILITA ESCRITURA
                      00050                 ;bsf            INTCON, GIE     ;HABILITA INTERRUPCIONES  (descomentar cuando haya inter
                            rupciones)              
                      00051                 banco0
Warning[205]: Found directive in column 1. (ENDM)
                      00052 ENDM
                      00053 
                      00054 ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                      00055 ;Macro para escribir una variable (registro) en la EEPROM
                      00056 WRITE_EEPROMvar MACRO direccion,reg
                      00057                 banco2
                      00058                 movfw reg                       
                      00059                 movwf   EEDATA          ;DATO = reg
                      00060                 movlw direccion
                      00061                 movwf   EEADR           ;DIRECCION=direccion
                      00062                 banco3                  ;HABILITA EL BANCO 3
                      00063                 bcf     EECON1,EEPGD    ;APUNTA HACIA EEPROM DE DATOS           
                      00064                 bsf     EECON1,WREN     ;HABILITA ESCRITURA EN EEPROM
                      00065                 ;bcf INTCON, GIE        ;DESHABILITA INTERRUPCIONES (solo cuando haya interrupciones)   
                             
                      00066                 movlw   H'55'           ;PREPARA SECUENCIA DE SEGURIDAD
                      00067                 movwf   EECON2          ;ESCRIBE PRIMER DATO DE SECUENCIA
                      00068                 movlw   H'AA'           ;SEGUNDO DATO
                      00069                 movwf   EECON2          ;ESCRIBE SEGUNDO DATO DE SECUENCIA
                      00070                 bsf     EECON1,WR       ;INICIA CICLO DE ESCRITURA
                      00071                 btfsc   EECON1,WR       ;MALLA PARA ESPERAR AL FINAL DEL CICLO
                      00072         goto    $-1              ;SI WR=1, CICLO DE ESCRITURA AUN NO TERMINA (regresa a la linea anterio
                            r)
                      00073                 bcf     EECON1, WREN    ;DESHABILITA ESCRITURA
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00074                 ;bsf            INTCON, GIE     ;HABILITA INTERRUPCIONES  (descomentar cuando haya inter
                            rupciones)              
                      00075                 banco0
Warning[205]: Found directive in column 1. (ENDM)
                      00076 ENDM
                      00077 
                      00078 ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                      00079 ;Macro para leer una direccion de la EEPROM y almacenar en en registro
                      00080 READ_EEPROM MACRO direccion,reg
                      00081                 banco2
                      00082                 movlw direccion
                      00083                 movwf   EEADR           ;DIRECCION=direccion
                      00084                 banco3
                      00085                 bcf     EECON1,EEPGD            ;APUNTA HACIA EEPROM DE DATOS           
                      00086                 bsf     EECON1,RD               ;HABILITA EL BIT 0 (RD) DEL REGISTRO EECON1             
                      00087                 banco2
                      00088                 movf    EEDATA,W                ;TRANSFIERE EL DATO EN EEDATA A W,
                      00089                 banco0
                      00090                 movwf reg
Warning[205]: Found directive in column 1. (ENDM)
                      00091 ENDM
                      00021         ;#INCLUDE "Macros_varias.mac" ;MACRO que contiene conjuntos de instrucciones necesarios para que
                             el programa funcione
                      00022         #INCLUDE "Teclado.mac" ;MACRO que contiene conjuntos de instrucciones necesarios para que el pro
                            grama funcione
                      00001 Multiplexea_tecla MACRO
                      00002                 ;Busca en FILA 1
                      00003         movlw B'00000001'  ;W <- 0000 0001
                      00004         movwf PORTD  ;PORTD <- 0000 0001        
                      00005                 
                      00006                 btfsc PORTD,4
                      00007                         goto Tecla1
                      00008                 
                      00009                 btfsc PORTD,5
                      00010                         goto Tecla2
                      00011 
                      00012                 btfsc PORTD,6
                      00013                         goto Tecla3
                      00014 
                      00015                 btfsc PORTD,7   
                      00016                         goto TeclaA
                      00017                 
                      00018         ;Busca en FILA 2
                      00019         movlw B'00000010'  ;W <- 0000 0010
                      00020         movwf PORTD  ;PORTD <- 0000 0010
                      00021 
                      00022                 btfsc PORTD,4
                      00023                         goto Tecla4
                      00024                 
                      00025                 btfsc PORTD,5
                      00026                         goto Tecla5
                      00027 
                      00028                 btfsc PORTD,6
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00029                         goto Tecla6
                      00030 
                      00031                 btfsc PORTD,7   
                      00032                         goto TeclaB
                      00033                 
                      00034         ;Busca en FILA 3
                      00035         movlw B'00000100'  ;W <- 0000 0100
                      00036         movwf PORTD  ;PORTD <- 0000 0100
                      00037 
                      00038                 btfsc PORTD,4
                      00039                         goto Tecla7
                      00040                 
                      00041                 btfsc PORTD,5
                      00042                         goto Tecla8
                      00043 
                      00044                 btfsc PORTD,6
                      00045                         goto Tecla9
                      00046 
                      00047                 btfsc PORTD,7   
                      00048                         goto TeclaC             
                      00049         
                      00050         ;Busca en FILA 4
                      00051         movlw B'00001000'  ;W <- 0000 1000
                      00052         movwf PORTD  ;PORTD <- 0000 1000
                      00053         
                      00054                 btfsc PORTD,4
                      00055                         goto Tecla_asterisco
                      00056                 
                      00057                 btfsc PORTD,5
                      00058                         goto Tecla0
                      00059 
                      00060                 btfsc PORTD,6
                      00061                         goto Tecla#
                      00062 
                      00063                 btfsc PORTD,7   
                      00064                         goto TeclaD     
                      00065 
                      00066 Termina_teclado:        
Warning[205]: Found directive in column 1. (ENDM)
                      00067 ENDM
                      00068 
                      00069 
                      00070 Graba_Tecla MACRO
                      00071 Tecla1: 
                      00072         call T100mS 
                      00073         call T100mS 
                      00074         movlw '1'
                      00075         movwf almacenaje
                      00076         goto Termina_teclado
                      00077 
                      00078 Tecla2:   
                      00079         call T100mS 
                      00080         call T100mS 
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00081         movlw '2'
                      00082         movwf almacenaje
                      00083         goto Termina_teclado
                      00084 
                      00085 Tecla3:   
                      00086         call T100mS 
                      00087         call T100mS 
                      00088         movlw '3'
                      00089         movwf almacenaje
                      00090         goto Termina_teclado
                      00091 
                      00092 TeclaA: 
                      00093         call T100mS 
                      00094         call T100mS   
                      00095         movlw 'A'
                      00096         movwf almacenaje
                      00097         goto Termina_teclado
                      00098 
                      00099 Tecla4:   
                      00100         call T100mS 
                      00101         call T100mS 
                      00102         movlw '4'
                      00103         movwf almacenaje
                      00104         goto Termina_teclado
                      00105 
                      00106 Tecla5:   
                      00107         call T100mS 
                      00108         call T100mS 
                      00109         movlw '5'
                      00110         movwf almacenaje
                      00111         goto Termina_teclado
                      00112 
                      00113 Tecla6:   
                      00114         call T100mS 
                      00115         call T100mS 
                      00116         movlw '6'
                      00117         movwf almacenaje
                      00118         goto Termina_teclado
                      00119         
                      00120 TeclaB:   
                      00121         call T100mS 
                      00122         call T100mS 
                      00123         movlw 'B'
                      00124         movwf almacenaje
                      00125         goto Termina_teclado
                      00126 
                      00127 Tecla7:   
                      00128         call T100mS 
                      00129         call T100mS 
                      00130         movlw '7'
                      00131         movwf almacenaje
                      00132         goto Termina_teclado
                      00133 
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00134 Tecla8:   
                      00135         call T100mS 
                      00136         call T100mS 
                      00137         movlw '8'
                      00138         movwf almacenaje
                      00139         goto Termina_teclado
                      00140 
                      00141 Tecla9:   
                      00142         call T100mS 
                      00143         call T100mS 
                      00144         movlw '9'
                      00145         movwf almacenaje
                      00146         goto Termina_teclado
                      00147 
                      00148 TeclaC:   
                      00149         call T100mS 
                      00150         call T100mS 
                      00151         movlw 'C'
                      00152         movwf almacenaje
                      00153         goto Termina_teclado
                      00154 
                      00155 Tecla_asterisco:
                      00156         call T100mS 
                      00157         call T100mS    
                      00158         movlw '*'
                      00159         movwf almacenaje
                      00160         goto Termina_teclado
                      00161 
                      00162 Tecla0:   
                      00163         call T100mS 
                      00164         call T100mS 
                      00165         movlw '0'
                      00166         movwf almacenaje
                      00167         goto Termina_teclado
                      00168 
                      00169 Tecla#:   
                      00170         call T100mS 
                      00171         call T100mS 
                      00172         movlw '#'
                      00173         movwf almacenaje
                      00174         goto Termina_teclado
                      00175 
                      00176 TeclaD:   
                      00177         call T100mS 
                      00178         call T100mS 
                      00179         movlw 'D'
                      00180         movwf almacenaje
                      00181         goto Termina_teclado
                      00182 
Warning[205]: Found directive in column 1. (ENDM)
                      00183 ENDM
                      00184 
                      00185 Detecta_sensor MACRO
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00186         btfsc PORTC,7
                      00187         goto enciende
                      00188         bcf PORTC,0
                      00189         goto fin_sensor
                      00190 enciende:       
                      00191         bsf PORTC,0
                      00192 fin_sensor:
                      00193 
Warning[205]: Found directive in column 1. (ENDM)
                      00194 ENDM
                      00023 
                      00024         IFNDEF LCD_4Bits_PORTB.h
                      00025                 #INCLUDE "LCD_4Bits_PORTB.h"
                      00001 ;------------------------------------------------------------------------------
                      00002 ; CONSTANTES EMPLEADAS en el manejador de la LCD.
                      00003 ;------------------------------------------------------------------------------
                      00004 ;-----[ CONSTANTES para el manejo de la LCD ]-----
                      00005 
                      00006         #DEFINE Hileras 2
                      00007         #DEFINE Columnas 16
                      00008         ;#DEFINE Columnas 20
                      00009                 
                      00010 ; --> Los siguientes son valores para usar PORTB <--
  00000006            00011 PORT_LCD        EQU     PORTB   ; Puerto que maneja al LCD 
  00000086            00012 TRIS_LCD        EQU     TRISB   ; Direcciones del Puerto del LCD
                      00013 
                      00014         #DEFINE RS PORTB,1
                      00015         #DEFINE Pin_RS 1
                      00016         #DEFINE RW PORTB,2
                      00017         #DEFINE E PORTB,3
                      00018 
                      00019 ; --> Los siguientes valores para emplear PORTD <--     
                      00020 ;PORT_LCD       EQU     PORTD   ; Puerto        que maneja al LCD
                      00021 ;TRIS_LCD       EQU     TRISD   ; Direcciones del Puerto del LCD
                      00022 
                      00023         ;#DEFINE        RS PORT_LCD,1
                      00024         ;#DEFINE        Pin_RS 1
                      00025         ;#DEFINE        E PORT_LCD,2
                      00026         ;#DEFINE        RW PORT_LCD,0                                                                   
                                                            
                      00027 ;##############################################################################
                      00028 
                      00029 #DEFINE LCD_4Bits_PORTB.h
                      00026         ENDIF
                      00027         
                      00028 ;============================================================================== 
                      00029 ;=========================[ CONFIGURACION DE PUERTOS ]========================================
                      00030 ;==============================================================================
                      00031 ; STATUS = IRP - RP1 - RP0 - T0  - PD  - Z  - DC  - C 
                      00032 
                      00033                         ;Ajusta para acceder al BANCO 1
0000   1303           00034         bcf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0001   1683           00035         bsf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00036         
                      00037         ; Se ajusta ADCON1 para:                        
0002   3082           00038         movlw B'10000010'                                                               
                      00039                 ; Configuracion B7: "Justificado a la Derecha" 
                      00040                 ; Configuracion B6 a B4: No importa
                      00041                 ; Configuracion B3 a B0:
                      00042                 ; AN7, AN6 Y AN5 DIGITALES (PUERTO E)
                      00043                 ; AN4, AN3, AN2, AN1 Y AN0 ANALOGICOS (PUERTO A)  
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0003   009F           00044         movwf ADCON1
                      00045 
                      00046                 ;CONFIGURACION DEL PUERTO A
0004   301F           00047         movlw B'00011111' ;TODOS LOS PINES DEL PORTA COMO ENTRADA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0005   0085           00048         movwf TRISA
                      00049         
                      00050                 ;CONFIGURACION DEL PUERTO C 
                      00051                 ;(Todo el puerto C se comporta como salida)
0006   30F0           00052         movlw B'11110000'  ; W <- 0x00
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0007   0087           00053         movwf TRISC  ; (Registro 0x87) <- W     
                      00054         
                      00055                 ;CONFIGURACION DEL PUERTO D
                      00056                 ;Se configura el puerto a utilizar por el teclado, en este caso 
                      00057                 ;el puerto D 
                      00058                 ;(Los bits mas significativos del PORTD se comportan como entrada)
0008   30F0           00059         movlw B'11110000'  ; W <- 11110000
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0009   0088           00060         movwf TRISD  ; (Registro 0x86) <- W             
                      00061         ;       clrf    INTCON                          ; Se deshabilitan las interrupciones.
                      00062 
                      00063                 ;CONFIGURACION DEL PUERTO E
000A   3000           00064         movlw B'00000000' ;TODOS LOS PINES DEL PORTE COMO SALIDA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
000B   0089           00065         movwf TRISE
                      00066 
                      00067                 ;Ajusta para acceder al BANCO 0
000C   1303           00068         bcf STATUS,RP1 ;El BIT 6 del registro 3 se pone a "0"
000D   1283           00069         bcf STATUS,RP0 ;El BIT 5 del registro 3 de pone a "0"
                      00070                         
000E   30C1           00071         movlw   B'11000001'     ; Se ajusta: Oscilador a F R/C, Canal Analógico RA0,
000F   009F           00072         movwf ADCON0                    ; Enciende Conversor A/D, conversión en progreso.
                      00073 
                      00074 ;============================================================================== 
                      00075 ;================================[ VARIABLES ]========================================
                      00076 ;==============================================================================
                      00077         CBLOCK  0x20
                      00078         ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00079                 ;VARIABLES DEL PROGRAMA         
  00000020            00080                 menu
  00000021            00081                 sala
  00000022            00082                 usuario
  00000023            00083                 almacenaje
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000024            00084                 cont_clave
                      00085         
                      00086         ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00087                 ;VARIABLES DEL PROGRAMA         
  00000025            00088                 d1
  00000026            00089                 d2
  00000027            00090                 d3
  00000028            00091                 d4
                      00092 
                      00093         ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00094                 ;VARIABLES PARA LCD
  00000029            00095                 Var      ; Variable para sacar información hacia la LCD.
  0000002A            00096                 Point   ; Apuntador para Tablas.
  0000002B            00097                 Select  ; Copia del bit asociado con RS en la LCD.
  0000002C            00098                 OutCod  ; Variable Temporal para el código de salida.
                      00099                         
  0000002D            00100                 LCD_Dato
  0000002E            00101                 LCD_GuardaDato
  0000002F            00102                 LCD_GuardaTRISB
  00000030            00103                 LCD_Auxiliar1
  00000031            00104                 LCD_Auxiliar2
                      00105 
  00000032            00106                 general_lcd
                      00107                 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00108                 ;VARIABLES AUXILIARES 
  00000033            00109                 aux_eeprom ;auxiliar eeprom
  00000034            00110                 aux_eeprom1
  00000035            00111                 aux_eeprom2
  00000036            00112                 aux_eeprom3
  00000037            00113                 aux_eeprom4
  00000038            00114                 aux_menu                
  00000039            00115                 llave           
                      00116 
                      00117         ENDC
                      00118 
Warning[203]: Found opcode in column 1. (goto)
0010   291C           00119 goto Variables_iniciales
                      00120 
                      00121 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00122 ;IMPRESION MENU 4
                      00123 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
0011                  00124 Line7:  
0011   0782           00125         addwf   PCL,F                                                   ; Modifica el Contador del Progr
                            ama [PC]
0012   3420 3449 344E 00126         DT " INGRESE USUARIO", 0x00
       3447 3452 3445 
       3453 3445 3420 
       3455 3453 3455 
       3441 3452 3449 
       344F 3400 
                      00127 
0023                  00128 Line8:
0023   0782           00129         addwf   PCL,F                                                   ; Modifica el Contador del Progr
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            ama [PC]
0024   3428 3431 342D 00130         DT "(1-3 o A) #=MENU", 0x00
       3433 3420 346F 
       3420 3441 3429 
       3420 3423 343D 
       344D 3445 344E 
       3455 3400 
                      00131 
0035                  00132 menu4:
0035   01AA           00133         clrf                    Point                                   ; Reinicio del Apuntador de la T
                            abla
                      00134         LCD_GoTo  0,0                                           ; Pasa a la columna "0", Línea "1"
  0000                    M         LOCAL Direccion_Hilera
                          M ; Se aplican límites para Hileras y Columnas:
                          M ;       IF (Hilera > Hileras)
                          M ;               Hilera_Final SET Hileras - 1
                          M ;       ENDIF
                          M ;       IF (Columna > Columnas) 
                          M ;               Columna_Final SET Columnas - 1
                          M ;       ENDIF
                          M 
                          M ; PARA LCD de 20x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0xC0 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x94 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0xD4 // Direccion de memoria para la cuarta linea
                          M                                         
                          M ; PARA LCD de 16x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0x40 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x14 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0x54 // Direccion de memoria para la cuarta linea                                   
                          M 
                          M ; Cálculo de la máscara en función del número de línea en donde se coloca el cursor:
                          M ;            |      V I S I B L E S      |     No Mostrados       |
                          M ; LÍNEA 0 --> 00 01 02 03 04 05 ... 0E 0F 10 11 12 13 14 ... 26 27    En Total 40 Caracteres
                          M ; LÍNEA 1 --> 40 41 42 43 44 45 ... 4E 4F 50 51 52 53 54 ... 66 67    En Total 40 Caracteres
                          M ; LÍNEA 2 --> 14 15 16 17 18 19 ... 22 23 24 25 26 27 28 ... 3A 3B    En Total 40 Caracteres
                          M ; LÍNEA 3 --> 54 55 56 57 58 59 ... 62 63 64 65 66 67 68 ... 80 81    En Total 40 Caracteres
                          M 
                          M         IF (Columnas == 16)
                          M                 IF (0      == 0)
Warning[207]: Found label after column 1. (Direccion_Hilera)
  00000000                M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (0      == 1)
                          M                         Direccion_Hilera SET 0x40
                          M                 ENDIF
                          M                 IF (0      == 2)
                          M                         Direccion_Hilera SET 0x14
                          M                 ENDIF
                          M                 IF (0      == 3)
                          M                         Direccion_Hilera SET 0x54
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 ENDIF
                          M         ENDIF
                          M         
                          M         IF (Columnas == 20)
                          M                 IF (0      == 0)
                          M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (0      == 1)
                          M                         Direccion_Hilera SET 0xC0
                          M                 ENDIF
                          M                 IF (0      == 2)
                          M                         Direccion_Hilera SET 0x94
                          M                 ENDIF
                          M                 IF (0      == 3)
                          M                         Direccion_Hilera SET 0xD4
                          M                 ENDIF
                          M         ENDIF
                          M         
                          M ; lcd_command(E_SET_DDRAM_ADDR | (col + rowaddr[ row ]));
0036   3000               M                                                                                         movlw           
                            Direccion_Hilera
0037   3E00               M                                                                                         addlw           
                            0
0038   3880               M                                                                                         iorlw           
                            E_SET_DDRAM_ADDR
0039   24F5               M                                                                                         call            
                            SendCom
003A   14AB           00135         bsf                             Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
                      00136 
003B                  00137 Mess7:
003B   082A           00138         movf                    Point,W                         ; Carga el dato apuntado... 
003C   2011           00139         call                    Line7                                   ; Obtén el código ASCII apuntado
                             en la tabla 
003D   14AB           00140         bsf                             Select,Pin_RS   ; Select command mode 
003E   24C7           00141         call                    LCD_Char                        ; ... Envíalo a la LCD  
003F   0AAA           00142         incf                    Point,F                         ; Apunta al próximo caracter 
0040   082A           00143         movf                    Point,W                         ; y carga el apuntador 
0041   3C10           00144         sublw                   D'16'                                   ; Verifica si ya se enviaron tod
                            os los caracteres 
0042   1D03           00145         btfss                   STATUS,Z                        ; ... concluye si ya se enviaron 16
0043   283B           00146                 goto                    Mess7                                   ; Continuúa...
                      00147         LCD_GoTo  0,1                                           ; Pasa a la columna "0", Línea "1"
  0000                    M         LOCAL Direccion_Hilera
                          M ; Se aplican límites para Hileras y Columnas:
                          M ;       IF (Hilera > Hileras)
                          M ;               Hilera_Final SET Hileras - 1
                          M ;       ENDIF
                          M ;       IF (Columna > Columnas) 
                          M ;               Columna_Final SET Columnas - 1
                          M ;       ENDIF
                          M 
                          M ; PARA LCD de 20x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M ;#define LCD_LINEA2 0xC0 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x94 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0xD4 // Direccion de memoria para la cuarta linea
                          M                                         
                          M ; PARA LCD de 16x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0x40 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x14 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0x54 // Direccion de memoria para la cuarta linea                                   
                          M 
                          M ; Cálculo de la máscara en función del número de línea en donde se coloca el cursor:
                          M ;            |      V I S I B L E S      |     No Mostrados       |
                          M ; LÍNEA 0 --> 00 01 02 03 04 05 ... 0E 0F 10 11 12 13 14 ... 26 27    En Total 40 Caracteres
                          M ; LÍNEA 1 --> 40 41 42 43 44 45 ... 4E 4F 50 51 52 53 54 ... 66 67    En Total 40 Caracteres
                          M ; LÍNEA 2 --> 14 15 16 17 18 19 ... 22 23 24 25 26 27 28 ... 3A 3B    En Total 40 Caracteres
                          M ; LÍNEA 3 --> 54 55 56 57 58 59 ... 62 63 64 65 66 67 68 ... 80 81    En Total 40 Caracteres
                          M 
                          M         IF (Columnas == 16)
                          M                 IF (1      == 0)
                          M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (1      == 1)
Warning[207]: Found label after column 1. (Direccion_Hilera)
  00000040                M                         Direccion_Hilera SET 0x40
                          M                 ENDIF
                          M                 IF (1      == 2)
                          M                         Direccion_Hilera SET 0x14
                          M                 ENDIF
                          M                 IF (1      == 3)
                          M                         Direccion_Hilera SET 0x54
                          M                 ENDIF
                          M         ENDIF
                          M         
                          M         IF (Columnas == 20)
                          M                 IF (1      == 0)
                          M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (1      == 1)
                          M                         Direccion_Hilera SET 0xC0
                          M                 ENDIF
                          M                 IF (1      == 2)
                          M                         Direccion_Hilera SET 0x94
                          M                 ENDIF
                          M                 IF (1      == 3)
                          M                         Direccion_Hilera SET 0xD4
                          M                 ENDIF
                          M         ENDIF
                          M         
                          M ; lcd_command(E_SET_DDRAM_ADDR | (col + rowaddr[ row ]));
0044   3040               M                                                                                         movlw           
                            Direccion_Hilera
0045   3E00               M                                                                                         addlw           
                            0
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0046   3880               M                                                                                         iorlw           
                            E_SET_DDRAM_ADDR
0047   24F5               M                                                                                         call            
                            SendCom
0048   01AA           00148         clrf                    Point                                   ; Reinicia el Apuntador de la Ta
                            bla.    
                      00149 
0049                  00150 Mess8:
0049   082A           00151         movf                    Point,W                         ; Carga el dato apuntado... 
004A   2023           00152         call                    Line8                           ; Obtén el código ASCII apuntado en la t
                            abla 
004B   14AB           00153         bsf                             Select,Pin_RS   ; Select command mode 
004C   24C7           00154         call                    LCD_Char                        ; ... Envíalo a la LCD  
004D   0AAA           00155         incf                    Point,F                         ; Apunta al próximo caracter 
004E   082A           00156         movf                    Point,W                         ; y carga el apuntador 
004F   3C10           00157         sublw                   D'16'                                   ; Verifica si ya se enviaron tod
                            os los caracteres 
0050   1D03           00158         btfss                   STATUS,Z                        ; ... concluye si ya se enviaron 16
0051   2849           00159                 goto                    Mess8                                   ; Continuúa...
                      00160         
0052   0008           00161         return  
                      00162 
                      00163 
                      00164 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00165 ;IMPRESION MENU 3
                      00166 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
0053                  00167 Line5:  
0053   0782           00168         addwf   PCL,F                                                   ; Modifica el Contador del Progr
                            ama [PC]
0054   3449 344E 3447 00169         DT "INGRESE LA SALA ", 0x00
       3452 3445 3453 
       3445 3420 344C 
       3441 3420 3453 
       3441 344C 3441 
       3420 3400 
                      00170 
0065                  00171 Line6:
0065   0782           00172         addwf   PCL,F                                                   ; Modifica el Contador del Progr
                            ama [PC]
0066   3428 3431 3420 00173         DT "(1 a 4)   #=MENU", 0x00
       3461 3420 3434 
       3429 3420 3420 
       3420 3423 343D 
       344D 3445 344E 
       3455 3400 
                      00174 
0077                  00175 menu3:
0077   01AA           00176         clrf                    Point                                   ; Reinicio del Apuntador de la T
                            abla
                      00177         LCD_GoTo  0,0                                           ; Pasa a la columna "0", Línea "1"
  0000                    M         LOCAL Direccion_Hilera
                          M ; Se aplican límites para Hileras y Columnas:
                          M ;       IF (Hilera > Hileras)
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M ;               Hilera_Final SET Hileras - 1
                          M ;       ENDIF
                          M ;       IF (Columna > Columnas) 
                          M ;               Columna_Final SET Columnas - 1
                          M ;       ENDIF
                          M 
                          M ; PARA LCD de 20x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0xC0 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x94 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0xD4 // Direccion de memoria para la cuarta linea
                          M                                         
                          M ; PARA LCD de 16x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0x40 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x14 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0x54 // Direccion de memoria para la cuarta linea                                   
                          M 
                          M ; Cálculo de la máscara en función del número de línea en donde se coloca el cursor:
                          M ;            |      V I S I B L E S      |     No Mostrados       |
                          M ; LÍNEA 0 --> 00 01 02 03 04 05 ... 0E 0F 10 11 12 13 14 ... 26 27    En Total 40 Caracteres
                          M ; LÍNEA 1 --> 40 41 42 43 44 45 ... 4E 4F 50 51 52 53 54 ... 66 67    En Total 40 Caracteres
                          M ; LÍNEA 2 --> 14 15 16 17 18 19 ... 22 23 24 25 26 27 28 ... 3A 3B    En Total 40 Caracteres
                          M ; LÍNEA 3 --> 54 55 56 57 58 59 ... 62 63 64 65 66 67 68 ... 80 81    En Total 40 Caracteres
                          M 
                          M         IF (Columnas == 16)
                          M                 IF (0      == 0)
Warning[207]: Found label after column 1. (Direccion_Hilera)
  00000000                M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (0      == 1)
                          M                         Direccion_Hilera SET 0x40
                          M                 ENDIF
                          M                 IF (0      == 2)
                          M                         Direccion_Hilera SET 0x14
                          M                 ENDIF
                          M                 IF (0      == 3)
                          M                         Direccion_Hilera SET 0x54
                          M                 ENDIF
                          M         ENDIF
                          M         
                          M         IF (Columnas == 20)
                          M                 IF (0      == 0)
                          M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (0      == 1)
                          M                         Direccion_Hilera SET 0xC0
                          M                 ENDIF
                          M                 IF (0      == 2)
                          M                         Direccion_Hilera SET 0x94
                          M                 ENDIF
                          M                 IF (0      == 3)
                          M                         Direccion_Hilera SET 0xD4
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 ENDIF
                          M         ENDIF
                          M         
                          M ; lcd_command(E_SET_DDRAM_ADDR | (col + rowaddr[ row ]));
0078   3000               M                                                                                         movlw           
                            Direccion_Hilera
0079   3E00               M                                                                                         addlw           
                            0
007A   3880               M                                                                                         iorlw           
                            E_SET_DDRAM_ADDR
007B   24F5               M                                                                                         call            
                            SendCom
007C   14AB           00178         bsf                             Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
                      00179 
007D                  00180 Mess5:
007D   082A           00181         movf                    Point,W                         ; Carga el dato apuntado... 
007E   2053           00182         call                    Line5                                   ; Obtén el código ASCII apuntado
                             en la tabla 
007F   14AB           00183         bsf                             Select,Pin_RS   ; Select command mode 
0080   24C7           00184         call                    LCD_Char                        ; ... Envíalo a la LCD  
0081   0AAA           00185         incf                    Point,F                         ; Apunta al próximo caracter 
0082   082A           00186         movf                    Point,W                         ; y carga el apuntador 
0083   3C10           00187         sublw                   D'16'                                   ; Verifica si ya se enviaron tod
                            os los caracteres 
0084   1D03           00188         btfss                   STATUS,Z                        ; ... concluye si ya se enviaron 16
0085   287D           00189                 goto                    Mess5                                   ; Continuúa...
                      00190         LCD_GoTo  0,1                                           ; Pasa a la columna "0", Línea "1"
  0000                    M         LOCAL Direccion_Hilera
                          M ; Se aplican límites para Hileras y Columnas:
                          M ;       IF (Hilera > Hileras)
                          M ;               Hilera_Final SET Hileras - 1
                          M ;       ENDIF
                          M ;       IF (Columna > Columnas) 
                          M ;               Columna_Final SET Columnas - 1
                          M ;       ENDIF
                          M 
                          M ; PARA LCD de 20x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0xC0 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x94 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0xD4 // Direccion de memoria para la cuarta linea
                          M                                         
                          M ; PARA LCD de 16x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0x40 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x14 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0x54 // Direccion de memoria para la cuarta linea                                   
                          M 
                          M ; Cálculo de la máscara en función del número de línea en donde se coloca el cursor:
                          M ;            |      V I S I B L E S      |     No Mostrados       |
                          M ; LÍNEA 0 --> 00 01 02 03 04 05 ... 0E 0F 10 11 12 13 14 ... 26 27    En Total 40 Caracteres
                          M ; LÍNEA 1 --> 40 41 42 43 44 45 ... 4E 4F 50 51 52 53 54 ... 66 67    En Total 40 Caracteres
                          M ; LÍNEA 2 --> 14 15 16 17 18 19 ... 22 23 24 25 26 27 28 ... 3A 3B    En Total 40 Caracteres
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M ; LÍNEA 3 --> 54 55 56 57 58 59 ... 62 63 64 65 66 67 68 ... 80 81    En Total 40 Caracteres
                          M 
                          M         IF (Columnas == 16)
                          M                 IF (1      == 0)
                          M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (1      == 1)
Warning[207]: Found label after column 1. (Direccion_Hilera)
  00000040                M                         Direccion_Hilera SET 0x40
                          M                 ENDIF
                          M                 IF (1      == 2)
                          M                         Direccion_Hilera SET 0x14
                          M                 ENDIF
                          M                 IF (1      == 3)
                          M                         Direccion_Hilera SET 0x54
                          M                 ENDIF
                          M         ENDIF
                          M         
                          M         IF (Columnas == 20)
                          M                 IF (1      == 0)
                          M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (1      == 1)
                          M                         Direccion_Hilera SET 0xC0
                          M                 ENDIF
                          M                 IF (1      == 2)
                          M                         Direccion_Hilera SET 0x94
                          M                 ENDIF
                          M                 IF (1      == 3)
                          M                         Direccion_Hilera SET 0xD4
                          M                 ENDIF
                          M         ENDIF
                          M         
                          M ; lcd_command(E_SET_DDRAM_ADDR | (col + rowaddr[ row ]));
0086   3040               M                                                                                         movlw           
                            Direccion_Hilera
0087   3E00               M                                                                                         addlw           
                            0
0088   3880               M                                                                                         iorlw           
                            E_SET_DDRAM_ADDR
0089   24F5               M                                                                                         call            
                            SendCom
008A   01AA           00191         clrf                    Point                                   ; Reinicia el Apuntador de la Ta
                            bla.    
                      00192 
008B                  00193 Mess6:
008B   082A           00194         movf                    Point,W                         ; Carga el dato apuntado... 
008C   2065           00195         call                    Line6                           ; Obtén el código ASCII apuntado en la t
                            abla 
008D   14AB           00196         bsf                             Select,Pin_RS   ; Select command mode 
008E   24C7           00197         call                    LCD_Char                        ; ... Envíalo a la LCD  
008F   0AAA           00198         incf                    Point,F                         ; Apunta al próximo caracter 
0090   082A           00199         movf                    Point,W                         ; y carga el apuntador 
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0091   3C10           00200         sublw                   D'16'                                   ; Verifica si ya se enviaron tod
                            os los caracteres 
0092   1D03           00201         btfss                   STATUS,Z                        ; ... concluye si ya se enviaron 16
0093   288B           00202                 goto                    Mess6                                   ; Continuúa...
                      00203         
0094   0008           00204         return  
                      00205 
                      00206 
                      00207 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00208 ;IMPRESION MENU 1
                      00209 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
0095                  00210 Line3:  
0095   0782           00211         addwf   PCL,F                                                   ; Modifica el Contador del Progr
                            ama [PC]
0096   3455 3453 3455 00212         DT "USUARIO ACEPTADO", 0x00
       3441 3452 3449 
       344F 3420 3441 
       3443 3445 3450 
       3454 3441 3444 
       344F 3400 
                      00213 
00A7                  00214 Line4:
00A7   0782           00215         addwf   PCL,F                                                   ; Modifica el Contador del Progr
                            ama [PC]
00A8   3455 3453 3455 00216         DT "USUARIO DENEGADO", 0x00
       3441 3452 3449 
       344F 3420 3444 
       3445 344E 3445 
       3447 3441 3444 
       344F 3400 
                      00217 
00B9                  00218 menu1:
00B9   2588           00219         call LIMPIA_LCD
00BA   01AA           00220         clrf                    Point                                   ; Reinicio del Apuntador de la T
                            abla
                      00221         LCD_GoTo  0,0                                           ; Pasa a la columna "0", Línea "1"
  0000                    M         LOCAL Direccion_Hilera
                          M ; Se aplican límites para Hileras y Columnas:
                          M ;       IF (Hilera > Hileras)
                          M ;               Hilera_Final SET Hileras - 1
                          M ;       ENDIF
                          M ;       IF (Columna > Columnas) 
                          M ;               Columna_Final SET Columnas - 1
                          M ;       ENDIF
                          M 
                          M ; PARA LCD de 20x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0xC0 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x94 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0xD4 // Direccion de memoria para la cuarta linea
                          M                                         
                          M ; PARA LCD de 16x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M ;#define LCD_LINEA2 0x40 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x14 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0x54 // Direccion de memoria para la cuarta linea                                   
                          M 
                          M ; Cálculo de la máscara en función del número de línea en donde se coloca el cursor:
                          M ;            |      V I S I B L E S      |     No Mostrados       |
                          M ; LÍNEA 0 --> 00 01 02 03 04 05 ... 0E 0F 10 11 12 13 14 ... 26 27    En Total 40 Caracteres
                          M ; LÍNEA 1 --> 40 41 42 43 44 45 ... 4E 4F 50 51 52 53 54 ... 66 67    En Total 40 Caracteres
                          M ; LÍNEA 2 --> 14 15 16 17 18 19 ... 22 23 24 25 26 27 28 ... 3A 3B    En Total 40 Caracteres
                          M ; LÍNEA 3 --> 54 55 56 57 58 59 ... 62 63 64 65 66 67 68 ... 80 81    En Total 40 Caracteres
                          M 
                          M         IF (Columnas == 16)
                          M                 IF (0      == 0)
Warning[207]: Found label after column 1. (Direccion_Hilera)
  00000000                M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (0      == 1)
                          M                         Direccion_Hilera SET 0x40
                          M                 ENDIF
                          M                 IF (0      == 2)
                          M                         Direccion_Hilera SET 0x14
                          M                 ENDIF
                          M                 IF (0      == 3)
                          M                         Direccion_Hilera SET 0x54
                          M                 ENDIF
                          M         ENDIF
                          M         
                          M         IF (Columnas == 20)
                          M                 IF (0      == 0)
                          M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (0      == 1)
                          M                         Direccion_Hilera SET 0xC0
                          M                 ENDIF
                          M                 IF (0      == 2)
                          M                         Direccion_Hilera SET 0x94
                          M                 ENDIF
                          M                 IF (0      == 3)
                          M                         Direccion_Hilera SET 0xD4
                          M                 ENDIF
                          M         ENDIF
                          M         
                          M ; lcd_command(E_SET_DDRAM_ADDR | (col + rowaddr[ row ]));
00BB   3000               M                                                                                         movlw           
                            Direccion_Hilera
00BC   3E00               M                                                                                         addlw           
                            0
00BD   3880               M                                                                                         iorlw           
                            E_SET_DDRAM_ADDR
00BE   24F5               M                                                                                         call            
                            SendCom
00BF   14AB           00222         bsf                             Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
00C0                  00223 Mess3:
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00C0   082A           00224         movf                    Point,W                         ; Carga el dato apuntado... 
00C1   2095           00225         call                    Line3                                   ; Obtén el código ASCII apuntado
                             en la tabla 
00C2   14AB           00226         bsf                             Select,Pin_RS   ; Select command mode 
00C3   24C7           00227         call                    LCD_Char                        ; ... Envíalo a la LCD  
00C4   0AAA           00228         incf                    Point,F                         ; Apunta al próximo caracter 
00C5   082A           00229         movf                    Point,W                         ; y carga el apuntador 
00C6   3C10           00230         sublw                   D'16'                                   ; Verifica si ya se enviaron tod
                            os los caracteres 
00C7   1D03           00231         btfss                   STATUS,Z                        ; ... concluye si ya se enviaron 16
00C8   28C0           00232                 goto                    Mess3                                   ; Continuúa...
00C9   0008           00233         return
                      00234 
00CA                  00235 menu2:
00CA   2588           00236         call LIMPIA_LCD
                      00237         LCD_GoTo  0,0                                           ; Pasa a la columna "0", Línea "1"
  0000                    M         LOCAL Direccion_Hilera
                          M ; Se aplican límites para Hileras y Columnas:
                          M ;       IF (Hilera > Hileras)
                          M ;               Hilera_Final SET Hileras - 1
                          M ;       ENDIF
                          M ;       IF (Columna > Columnas) 
                          M ;               Columna_Final SET Columnas - 1
                          M ;       ENDIF
                          M 
                          M ; PARA LCD de 20x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0xC0 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x94 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0xD4 // Direccion de memoria para la cuarta linea
                          M                                         
                          M ; PARA LCD de 16x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0x40 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x14 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0x54 // Direccion de memoria para la cuarta linea                                   
                          M 
                          M ; Cálculo de la máscara en función del número de línea en donde se coloca el cursor:
                          M ;            |      V I S I B L E S      |     No Mostrados       |
                          M ; LÍNEA 0 --> 00 01 02 03 04 05 ... 0E 0F 10 11 12 13 14 ... 26 27    En Total 40 Caracteres
                          M ; LÍNEA 1 --> 40 41 42 43 44 45 ... 4E 4F 50 51 52 53 54 ... 66 67    En Total 40 Caracteres
                          M ; LÍNEA 2 --> 14 15 16 17 18 19 ... 22 23 24 25 26 27 28 ... 3A 3B    En Total 40 Caracteres
                          M ; LÍNEA 3 --> 54 55 56 57 58 59 ... 62 63 64 65 66 67 68 ... 80 81    En Total 40 Caracteres
                          M 
                          M         IF (Columnas == 16)
                          M                 IF (0      == 0)
Warning[207]: Found label after column 1. (Direccion_Hilera)
  00000000                M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (0      == 1)
                          M                         Direccion_Hilera SET 0x40
                          M                 ENDIF
                          M                 IF (0      == 2)
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                         Direccion_Hilera SET 0x14
                          M                 ENDIF
                          M                 IF (0      == 3)
                          M                         Direccion_Hilera SET 0x54
                          M                 ENDIF
                          M         ENDIF
                          M         
                          M         IF (Columnas == 20)
                          M                 IF (0      == 0)
                          M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (0      == 1)
                          M                         Direccion_Hilera SET 0xC0
                          M                 ENDIF
                          M                 IF (0      == 2)
                          M                         Direccion_Hilera SET 0x94
                          M                 ENDIF
                          M                 IF (0      == 3)
                          M                         Direccion_Hilera SET 0xD4
                          M                 ENDIF
                          M         ENDIF
                          M         
                          M ; lcd_command(E_SET_DDRAM_ADDR | (col + rowaddr[ row ]));
00CB   3000               M                                                                                         movlw           
                            Direccion_Hilera
00CC   3E00               M                                                                                         addlw           
                            0
00CD   3880               M                                                                                         iorlw           
                            E_SET_DDRAM_ADDR
00CE   24F5               M                                                                                         call            
                            SendCom
00CF   01AA           00238         clrf                    Point                                   ; Reinicia el Apuntador de la Ta
                            bla.    
                      00239 
00D0                  00240 Mess4:
00D0   082A           00241         movf                    Point,W                         ; Carga el dato apuntado... 
00D1   20A7           00242         call                    Line4                           ; Obtén el código ASCII apuntado en la t
                            abla 
00D2   14AB           00243         bsf                             Select,Pin_RS   ; Select command mode 
00D3   24C7           00244         call                    LCD_Char                        ; ... Envíalo a la LCD  
00D4   0AAA           00245         incf                    Point,F                         ; Apunta al próximo caracter 
00D5   082A           00246         movf                    Point,W                         ; y carga el apuntador 
00D6   3C10           00247         sublw                   D'16'                                   ; Verifica si ya se enviaron tod
                            os los caracteres 
00D7   1D03           00248         btfss                   STATUS,Z                        ; ... concluye si ya se enviaron 16
00D8   28D0           00249                 goto                    Mess4                                   ; Continuúa...
                      00250         
00D9   0008           00251         return  
                      00252 
                      00253 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00254 ;IMPRESION MENU 0
                      00255 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
00DA                  00256 Line1:  
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00DA   0782           00257         addwf   PCL,F                                                   ; Modifica el Contador del Progr
                            ama [PC]
00DB   3432 3420 343D 00258         DT "2 = MENU USUARIO", 0x00
       3420 344D 3445 
       344E 3455 3420 
       3455 3453 3455 
       3441 3452 3449 
       344F 3400 
                      00259 
00EC                  00260 Line2:
00EC   0782           00261         addwf   PCL,F                                                   ; Modifica el Contador del Progr
                            ama [PC]
00ED   3431 343D 3443 00262         DT "1=CLAVES 3=ACCES", 0x00
       344C 3441 3456 
       3445 3453 3420 
       3433 343D 3441 
       3443 3443 3445 
       3453 3400 
                      00263 
00FE                  00264 menu0:
00FE   01AA           00265         clrf                    Point                                   ; Reinicio del Apuntador de la T
                            abla
                      00266         LCD_GoTo  0,0                                           ; Pasa a la columna "0", Línea "2"
  0000                    M         LOCAL Direccion_Hilera
                          M ; Se aplican límites para Hileras y Columnas:
                          M ;       IF (Hilera > Hileras)
                          M ;               Hilera_Final SET Hileras - 1
                          M ;       ENDIF
                          M ;       IF (Columna > Columnas) 
                          M ;               Columna_Final SET Columnas - 1
                          M ;       ENDIF
                          M 
                          M ; PARA LCD de 20x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0xC0 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x94 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0xD4 // Direccion de memoria para la cuarta linea
                          M                                         
                          M ; PARA LCD de 16x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0x40 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x14 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0x54 // Direccion de memoria para la cuarta linea                                   
                          M 
                          M ; Cálculo de la máscara en función del número de línea en donde se coloca el cursor:
                          M ;            |      V I S I B L E S      |     No Mostrados       |
                          M ; LÍNEA 0 --> 00 01 02 03 04 05 ... 0E 0F 10 11 12 13 14 ... 26 27    En Total 40 Caracteres
                          M ; LÍNEA 1 --> 40 41 42 43 44 45 ... 4E 4F 50 51 52 53 54 ... 66 67    En Total 40 Caracteres
                          M ; LÍNEA 2 --> 14 15 16 17 18 19 ... 22 23 24 25 26 27 28 ... 3A 3B    En Total 40 Caracteres
                          M ; LÍNEA 3 --> 54 55 56 57 58 59 ... 62 63 64 65 66 67 68 ... 80 81    En Total 40 Caracteres
                          M 
                          M         IF (Columnas == 16)
                          M                 IF (0      == 0)
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Warning[207]: Found label after column 1. (Direccion_Hilera)
  00000000                M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (0      == 1)
                          M                         Direccion_Hilera SET 0x40
                          M                 ENDIF
                          M                 IF (0      == 2)
                          M                         Direccion_Hilera SET 0x14
                          M                 ENDIF
                          M                 IF (0      == 3)
                          M                         Direccion_Hilera SET 0x54
                          M                 ENDIF
                          M         ENDIF
                          M         
                          M         IF (Columnas == 20)
                          M                 IF (0      == 0)
                          M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (0      == 1)
                          M                         Direccion_Hilera SET 0xC0
                          M                 ENDIF
                          M                 IF (0      == 2)
                          M                         Direccion_Hilera SET 0x94
                          M                 ENDIF
                          M                 IF (0      == 3)
                          M                         Direccion_Hilera SET 0xD4
                          M                 ENDIF
                          M         ENDIF
                          M         
                          M ; lcd_command(E_SET_DDRAM_ADDR | (col + rowaddr[ row ]));
00FF   3000               M                                                                                         movlw           
                            Direccion_Hilera
0100   3E00               M                                                                                         addlw           
                            0
0101   3880               M                                                                                         iorlw           
                            E_SET_DDRAM_ADDR
0102   24F5               M                                                                                         call            
                            SendCom
0103   14AB           00267         bsf                             Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
                      00268 
0104                  00269 Mess1:
0104   082A           00270         movf                    Point,W                         ; Carga el dato apuntado... 
0105   20DA           00271         call                    Line1                                   ; Obtén el código ASCII apuntado
                             en la tabla 
0106   14AB           00272         bsf                             Select,Pin_RS   ; Select command mode 
0107   24C7           00273         call                    LCD_Char                        ; ... Envíalo a la LCD  
0108   0AAA           00274         incf                    Point,F                         ; Apunta al próximo caracter 
0109   082A           00275         movf                    Point,W                         ; y carga el apuntador 
010A   3C10           00276         sublw                   D'16'                                   ; Verifica si ya se enviaron tod
                            os los caracteres 
010B   1D03           00277         btfss                   STATUS,Z                        ; ... concluye si ya se enviaron 16
010C   2904           00278                 goto                    Mess1                                   ; Continuúa...
                      00279         LCD_GoTo  0,1                                           ; Pasa a la columna "0", Línea "1"
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                    M         LOCAL Direccion_Hilera
                          M ; Se aplican límites para Hileras y Columnas:
                          M ;       IF (Hilera > Hileras)
                          M ;               Hilera_Final SET Hileras - 1
                          M ;       ENDIF
                          M ;       IF (Columna > Columnas) 
                          M ;               Columna_Final SET Columnas - 1
                          M ;       ENDIF
                          M 
                          M ; PARA LCD de 20x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0xC0 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x94 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0xD4 // Direccion de memoria para la cuarta linea
                          M                                         
                          M ; PARA LCD de 16x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0x40 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x14 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0x54 // Direccion de memoria para la cuarta linea                                   
                          M 
                          M ; Cálculo de la máscara en función del número de línea en donde se coloca el cursor:
                          M ;            |      V I S I B L E S      |     No Mostrados       |
                          M ; LÍNEA 0 --> 00 01 02 03 04 05 ... 0E 0F 10 11 12 13 14 ... 26 27    En Total 40 Caracteres
                          M ; LÍNEA 1 --> 40 41 42 43 44 45 ... 4E 4F 50 51 52 53 54 ... 66 67    En Total 40 Caracteres
                          M ; LÍNEA 2 --> 14 15 16 17 18 19 ... 22 23 24 25 26 27 28 ... 3A 3B    En Total 40 Caracteres
                          M ; LÍNEA 3 --> 54 55 56 57 58 59 ... 62 63 64 65 66 67 68 ... 80 81    En Total 40 Caracteres
                          M 
                          M         IF (Columnas == 16)
                          M                 IF (1      == 0)
                          M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (1      == 1)
Warning[207]: Found label after column 1. (Direccion_Hilera)
  00000040                M                         Direccion_Hilera SET 0x40
                          M                 ENDIF
                          M                 IF (1      == 2)
                          M                         Direccion_Hilera SET 0x14
                          M                 ENDIF
                          M                 IF (1      == 3)
                          M                         Direccion_Hilera SET 0x54
                          M                 ENDIF
                          M         ENDIF
                          M         
                          M         IF (Columnas == 20)
                          M                 IF (1      == 0)
                          M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (1      == 1)
                          M                         Direccion_Hilera SET 0xC0
                          M                 ENDIF
                          M                 IF (1      == 2)
                          M                         Direccion_Hilera SET 0x94
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 ENDIF
                          M                 IF (1      == 3)
                          M                         Direccion_Hilera SET 0xD4
                          M                 ENDIF
                          M         ENDIF
                          M         
                          M ; lcd_command(E_SET_DDRAM_ADDR | (col + rowaddr[ row ]));
010D   3040               M                                                                                         movlw           
                            Direccion_Hilera
010E   3E00               M                                                                                         addlw           
                            0
010F   3880               M                                                                                         iorlw           
                            E_SET_DDRAM_ADDR
0110   24F5               M                                                                                         call            
                            SendCom
0111   01AA           00280         clrf                    Point                                   ; Reinicia el Apuntador de la Ta
                            bla.    
                      00281 
0112                  00282 Mess2:
0112   082A           00283         movf                    Point,W                         ; Carga el dato apuntado... 
0113   20EC           00284         call                    Line2                           ; Obtén el código ASCII apuntado en la t
                            abla 
0114   14AB           00285         bsf                             Select,Pin_RS   ; Select command mode 
0115   24C7           00286         call                    LCD_Char                        ; ... Envíalo a la LCD  
0116   0AAA           00287         incf                    Point,F                         ; Apunta al próximo caracter 
0117   082A           00288         movf                    Point,W                         ; y carga el apuntador 
0118   3C10           00289         sublw                   D'16'                                   ; Verifica si ya se enviaron tod
                            os los caracteres 
0119   1D03           00290         btfss                   STATUS,Z                        ; ... concluye si ya se enviaron 16
011A   2912           00291                 goto                    Mess2                                   ; Continuúa...
                      00292         
011B   0008           00293         return  
                      00294 
                      00295 ;============================================================================== 
                      00296 ;====================[ VALORES INICIALES DE VARIABLES ]========================================
                      00297 ;==============================================================================
011C                  00298 Variables_iniciales:
                      00299                 ;-------------- SE LEE EL LA DIRECCION 44 EN LA EEPROM ------------
                      00300                 banco2
011C   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
011D   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
011E   302C           00301                 movlw  .44 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
011F   008D           00302                 movwf   EEADR           ;DIRECCION EEPROM=44
0120   27CF           00303                 call    EERD            ;LEE EN EEPROM, RESULTADO EN W
0121   00B3           00304                 movwf aux_eeprom
                      00305                 ;------------------------------------------------------------------
                      00306                 SaltaSiVarIgualConst aux_eeprom,'Z',continua_prog 
0122   305A               M         movlw   'Z'             ; Se emplea la resta para la comparación.
0123   0233               M         subwf   aux_eeprom,W    ; (W)=(Registro1_m1) - Constante_m1
0124   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
0125   2942               M                 goto    continua_prog   ; Si Z=1 son iguales, por lo tanto salta  
                      00307                         ;---------------SE ESCRIBE 'A' en la direccion 20 EEPROM-------------           
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                                                    
                      00308                         banco2
0126   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0127   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
0128   3041           00309                         movlw 'A'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0129   008C           00310                         movwf   EEDATA          ;DATO =A
012A   3014           00311                         movlw .20
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
012B   008D           00312                         movwf   EEADR           ;DIRECCION EEPROM=0
012C   27C0           00313                         call EEWR
                      00314                         ;---------------SE ESCRIBE 'A' en la direccion 21 EEPROM-------------           
                                                    
                      00315                         banco2
012D   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
012E   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
012F   3041           00316                         movlw 'A'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0130   008C           00317                         movwf   EEDATA          ;DATO =A
0131   3015           00318                         movlw .21
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0132   008D           00319                         movwf   EEADR           ;DIRECCION EEPROM=0
0133   27C0           00320                         call EEWR
                      00321                         ;---------------SE ESCRIBE 'A' en la direccion 22 EEPROM-------------           
                                                    
                      00322                         banco2
0134   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0135   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
0136   3041           00323                         movlw 'A'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0137   008C           00324                         movwf   EEDATA          ;DATO =A
0138   3016           00325                         movlw .22
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0139   008D           00326                         movwf   EEADR           ;DIRECCION EEPROM=0
013A   27C0           00327                         call EEWR
                      00328                         ;---------------SE ESCRIBE 'A' en la direccion 23 EEPROM-------------           
                                                    
                      00329                         banco2
013B   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
013C   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
013D   3041           00330                         movlw 'A'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
013E   008C           00331                         movwf   EEDATA          ;DATO =A
013F   3017           00332                         movlw .23
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0140   008D           00333                         movwf   EEADR           ;DIRECCION EEPROM=0
0141   27C0           00334                         call EEWR
0142                  00335 continua_prog: 
0142   01A0           00336                 clrf menu
0143   01A2           00337                 clrf usuario
0144   01A1           00338                 clrf sala
0145   01A4           00339                 clrf cont_clave
0146   01A5           00340                 clrf d1
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0147   01A6           00341                 clrf d2
0148   01A7           00342                 clrf d3
0149   01A8           00343                 clrf d4         
                      00344 
                      00345 ;============================================================================== 
                      00346 ;===============================[ PROGRAMA  INICIO ]========================================
                      00347 ;==============================================================================
                      00348 
                      00349 ;-=-=-=-=-=-=-=-=-=-= ( Parte obligatoria para iniciar LCD ) =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                            -=
                      00350         LCD_Init      ; INICIA LCD 
  0000                    M                                                 VARIABLE dispctrl = 0x00        ; Se emplea en algunos M
                            acros.
014A   24D7               M                                                 call            LCD_Inicio
014B   2540           00351         call T1mS      ; Retardo de tiempo (1 mili segundo)
                      00352   
                      00353         LCD_Off         ; BORRA RESIDUOS DE LA LCD (la apaga)
  00000000                M dispctrl SET dispctrl & ~BIT_D_DISPLAY_ON                       ; dispctrl &= ~BIT_D_DISPLAY_ON;
014C   3008               M                                                         movlw   E_DISPLAY_ON_OFF_CTRL
014D   3800               M                                                         iorlw   dispctrl                
014E   24F5               M                                                         call    SendCom                         ; lcd_co
                            mmand(E_DISPLAY_ON_OFF_CTRL | dispctrl); delay_us(50)
014F   2540           00354         call T1mS               ; Retardo de tiempo (1 mili segundo)
                      00355 
                      00356         LCD_Home
0150   3002               M                                                         movlw   E_RETURN_HOME   ; 
0151   24F5               M                                                         call    SendCom                         ; Tarda 
                            1.52 mS
                      00357         LCD_On
  00000004                M dispctrl SET dispctrl | BIT_D_DISPLAY_ON        ; dispctrl |= BIT_D_DISPLAY_ON;
0152   3008               M                                                         movlw           E_DISPLAY_ON_OFF_CTRL
0153   3804               M                                                         iorlw           dispctrl
0154   24F5               M                                                         call            SendCom                 ; lcd_co
                            mmand(E_DISPLAY_ON_OFF_CTRL | dispctrl);
                      00358 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-    
                                    
0155   20FE           00359         call menu0
0156                  00360 Inicio:
                      00361 ;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                      00362 ;=-=-=-=-=-=-=-=-=-=-=-=-=-( LECTURA DEL TECLADO )-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                      00363 ;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                      00364         Multiplexea_tecla
                          M                 ;Busca en FILA 1
0156   3001               M         movlw B'00000001'  ;W <- 0000 0001
0157   0088               M         movwf PORTD  ;PORTD <- 0000 0001        
                          M                 
0158   1A08               M                 btfsc PORTD,4
0159   2B1F               M                         goto Tecla1
                          M                 
015A   1A88               M                 btfsc PORTD,5
015B   2B24               M                         goto Tecla2
                          M 
015C   1B08               M                 btfsc PORTD,6
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

015D   2B29               M                         goto Tecla3
                          M 
015E   1B88               M                 btfsc PORTD,7   
015F   2B2E               M                         goto TeclaA
                          M                 
                          M         ;Busca en FILA 2
0160   3002               M         movlw B'00000010'  ;W <- 0000 0010
0161   0088               M         movwf PORTD  ;PORTD <- 0000 0010
                          M 
0162   1A08               M                 btfsc PORTD,4
0163   2B33               M                         goto Tecla4
                          M                 
0164   1A88               M                 btfsc PORTD,5
0165   2B38               M                         goto Tecla5
                          M 
0166   1B08               M                 btfsc PORTD,6
0167   2B3D               M                         goto Tecla6
                          M 
0168   1B88               M                 btfsc PORTD,7   
0169   2B42               M                         goto TeclaB
                          M                 
                          M         ;Busca en FILA 3
016A   3004               M         movlw B'00000100'  ;W <- 0000 0100
016B   0088               M         movwf PORTD  ;PORTD <- 0000 0100
                          M 
016C   1A08               M                 btfsc PORTD,4
016D   2B47               M                         goto Tecla7
                          M                 
016E   1A88               M                 btfsc PORTD,5
016F   2B4C               M                         goto Tecla8
                          M 
0170   1B08               M                 btfsc PORTD,6
0171   2B51               M                         goto Tecla9
                          M 
0172   1B88               M                 btfsc PORTD,7   
0173   2B56               M                         goto TeclaC             
                          M         
                          M         ;Busca en FILA 4
0174   3008               M         movlw B'00001000'  ;W <- 0000 1000
0175   0088               M         movwf PORTD  ;PORTD <- 0000 1000
                          M         
0176   1A08               M                 btfsc PORTD,4
0177   2B5B               M                         goto Tecla_asterisco
                          M                 
0178   1A88               M                 btfsc PORTD,5
0179   2B60               M                         goto Tecla0
                          M 
017A   1B08               M                 btfsc PORTD,6
017B   2B65               M                         goto Tecla#
                          M 
017C   1B88               M                 btfsc PORTD,7   
017D   2B6A               M                         goto TeclaD     
                          M 
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

017E                      M Termina_teclado:        
                      00365 
                      00366 ;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                      00367 ;=-=-=-=-=-=-=-=-=-=-=-=-=-( INTERPRETACION DE TECLAS )-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00368 ;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                      00369         SaltaSiVarIgualConst almacenaje,0,NoTecla
017E   3000               M         movlw   0               ; Se emplea la resta para la comparación.
017F   0223               M         subwf   almacenaje,W    ; (W)=(Registro1_m1) - Constante_m1
0180   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
0181   2B19               M                 goto    NoTecla         ; Si Z=1 son iguales, por lo tanto salta  
                      00370                 SaltaSiVarIgualConst menu,.0,emenu0_2 ;MENU PRINCIPAL
0182   3000               M         movlw   .0              ; Se emplea la resta para la comparación.
0183   0220               M         subwf   menu,W          ; (W)=(Registro1_m1) - Constante_m1
0184   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
0185   299F               M                 goto    emenu0_2        ; Si Z=1 son iguales, por lo tanto salta  
                      00371                 SaltaSiVarIgualConst menu,.1,emenu1_2 ;CAMBIAR CLAVES
0186   3001               M         movlw   .1              ; Se emplea la resta para la comparación.
0187   0220               M         subwf   menu,W          ; (W)=(Registro1_m1) - Constante_m1
0188   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
0189   29BC               M                 goto    emenu1_2        ; Si Z=1 son iguales, por lo tanto salta  
                      00372                 SaltaSiVarIgualConst menu,.2,emenu2_2 ;CAMBIAR ACCESOS
018A   3002               M         movlw   .2              ; Se emplea la resta para la comparación.
018B   0220               M         subwf   menu,W          ; (W)=(Registro1_m1) - Constante_m1
018C   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
018D   29E6               M                 goto    emenu2_2        ; Si Z=1 son iguales, por lo tanto salta  
                      00373                 SaltaSiVarIgualConst menu,.3,emenu3_2 ;INGRESAR USUARIO
018E   3003               M         movlw   .3              ; Se emplea la resta para la comparación.
018F   0220               M         subwf   menu,W          ; (W)=(Registro1_m1) - Constante_m1
0190   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
0191   2A2F               M                 goto    emenu3_2        ; Si Z=1 son iguales, por lo tanto salta  
                      00374                 SaltaSiVarIgualConst menu,.4,emenu4_2 ;INGRESAR SALA
0192   3004               M         movlw   .4              ; Se emplea la resta para la comparación.
0193   0220               M         subwf   menu,W          ; (W)=(Registro1_m1) - Constante_m1
0194   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
0195   2A77               M                 goto    emenu4_2        ; Si Z=1 son iguales, por lo tanto salta  
                      00375                 SaltaSiVarIgualConst menu,.5,emenu5_2 ;INGRESAR CLAVE 
0196   3005               M         movlw   .5              ; Se emplea la resta para la comparación.
0197   0220               M         subwf   menu,W          ; (W)=(Registro1_m1) - Constante_m1
0198   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
0199   2A9F               M                 goto    emenu5_2        ; Si Z=1 son iguales, por lo tanto salta  
                      00376                 SaltaSiVarIgualConst menu,.6,emenu6_2 ;ACCEDER A ALGUNA SALA
019A   3006               M         movlw   .6              ; Se emplea la resta para la comparación.
019B   0220               M         subwf   menu,W          ; (W)=(Registro1_m1) - Constante_m1
019C   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
019D   2AF3               M                 goto    emenu6_2        ; Si Z=1 son iguales, por lo tanto salta  
019E   2B17           00377                 goto finalmenus_2 
                      00378 ;================== MENU 0===========================
                      00379 ;MENU PRINCIPAL
019F                  00380 emenu0_2:
                      00381         SaltaSiVarIgualConst almacenaje,'2',Asmenu2
019F   3032               M         movlw   '2'             ; Se emplea la resta para la comparación.
01A0   0223               M         subwf   almacenaje,W    ; (W)=(Registro1_m1) - Constante_m1
01A1   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01A2   29AC               M                 goto    Asmenu2         ; Si Z=1 son iguales, por lo tanto salta  
                      00382         SaltaSiVarIgualConst almacenaje,'1',Asmenu1
01A3   3031               M         movlw   '1'             ; Se emplea la resta para la comparación.
01A4   0223               M         subwf   almacenaje,W    ; (W)=(Registro1_m1) - Constante_m1
01A5   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
01A6   29B0               M                 goto    Asmenu1         ; Si Z=1 son iguales, por lo tanto salta  
                      00383         SaltaSiVarIgualConst almacenaje,'3',Asmenu3
01A7   3033               M         movlw   '3'             ; Se emplea la resta para la comparación.
01A8   0223               M         subwf   almacenaje,W    ; (W)=(Registro1_m1) - Constante_m1
01A9   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
01AA   29B6               M                 goto    Asmenu3         ; Si Z=1 son iguales, por lo tanto salta  
01AB   29BB           00384         goto Afinalsmenu
01AC                  00385 Asmenu2:     ;SE PIDE QUE INGRESE UNA SALA
01AC   2077           00386         call menu3  
                      00387         carga menu,.4
01AD   3004               M         movlw   .4      ; Toma el valor de la literal
01AE   00A0               M         movwf   menu    ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
01AF   29BB           00388         goto Afinalsmenu
01B0                  00389 Asmenu1:   ;SE PIDE CONTRASEÑA DEL ADMINISTRADOR (cambiar claves)
01B0   236F           00390         call menu5
                      00391         carga menu,.5
01B1   3005               M         movlw   .5      ; Toma el valor de la literal
01B2   00A0               M         movwf   menu    ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
                      00392         carga aux_menu,'A'
01B3   3041               M         movlw   'A'     ; Toma el valor de la literal
01B4   00B8               M         movwf   aux_menu ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
01B5   29BB           00393         goto Afinalsmenu
01B6                  00394 Asmenu3:   ;SE PIDE CONTRASEÑA DEL ADMINISTRADOR (cambiar accesos)
                      00395         carga aux_menu,'B'
01B6   3042               M         movlw   'B'     ; Toma el valor de la literal
01B7   00B8               M         movwf   aux_menu ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
01B8   236F           00396         call menu5
                      00397         carga menu,.5
01B9   3005               M         movlw   .5      ; Toma el valor de la literal
01BA   00A0               M         movwf   menu    ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
01BB                  00398 Afinalsmenu:
01BB   2B17           00399         goto finalmenus_2
                      00400 ;================== MENU 1===========================
01BC                  00401 emenu1_2:
01BC   3001           00402     movlw 0x01
Message[305]: Using default destination of 1 (file).
01BD   07A4           00403         addwf cont_clave        
                      00404         SaltaSiVarIgualConst cont_clave,1,Bdigito1
01BE   3001               M         movlw   1               ; Se emplea la resta para la comparación.
01BF   0224               M         subwf   cont_clave,W    ; (W)=(Registro1_m1) - Constante_m1
01C0   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
01C1   29CB               M                 goto    Bdigito1        ; Si Z=1 son iguales, por lo tanto salta  
                      00405         SaltaSiVarIgualConst cont_clave,2,Bdigito2
01C2   3002               M         movlw   2               ; Se emplea la resta para la comparación.
01C3   0224               M         subwf   cont_clave,W    ; (W)=(Registro1_m1) - Constante_m1
01C4   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
01C5   29CF               M                 goto    Bdigito2        ; Si Z=1 son iguales, por lo tanto salta  
                      00406         SaltaSiVarIgualConst cont_clave,3,Bdigito3
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01C6   3003               M         movlw   3               ; Se emplea la resta para la comparación.
01C7   0224               M         subwf   cont_clave,W    ; (W)=(Registro1_m1) - Constante_m1
01C8   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
01C9   29D3               M                 goto    Bdigito3        ; Si Z=1 son iguales, por lo tanto salta  
01CA   29D7           00407         goto Bdigito4
01CB                  00408 Bdigito1:
                      00409         llena d1,almacenaje
01CB   0823               M         movfw   almacenaje ; Toma el valor de la literal
01CC   00A5               M         movwf   d1      ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
01CD   236F           00410         call menu5
01CE   29E5           00411         goto Bfinaldigitos 
01CF                  00412 Bdigito2:
                      00413         llena d2,almacenaje
01CF   0823               M         movfw   almacenaje ; Toma el valor de la literal
01D0   00A6               M         movwf   d2      ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
01D1   236F           00414         call menu5
01D2   29E5           00415         goto Bfinaldigitos 
01D3                  00416 Bdigito3:
                      00417         llena d3,almacenaje
01D3   0823               M         movfw   almacenaje ; Toma el valor de la literal
01D4   00A7               M         movwf   d3      ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
01D5   236F           00418         call menu5
01D6   29E5           00419         goto Bfinaldigitos 
01D7                  00420 Bdigito4:
                      00421         llena d4,almacenaje
01D7   0823               M         movfw   almacenaje ; Toma el valor de la literal
01D8   00A8               M         movwf   d4      ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
01D9   236F           00422         call menu5
01DA   2568           00423         call T1S
01DB   258B           00424         call ESCRIBE_CLAVES_EEPROM
01DC   01A4           00425         clrf cont_clave
01DD   01A5           00426         clrf d1
01DE   01A6           00427         clrf d2
01DF   01A7           00428         clrf d3
01E0   01A8           00429         clrf d4
01E1   01A0           00430         clrf menu
01E2   01A2           00431         clrf usuario
01E3   01B8           00432         clrf aux_menu
01E4   20FE           00433         call menu0
                      00434 
01E5                  00435 Bfinaldigitos:
01E5   2B17           00436         goto finalmenus_2
                      00437 ;================== MENU 2===========================
01E6                  00438 emenu2_2:
                      00439         SaltaSiVarIgualConst almacenaje,'1',Fsmenu1
01E6   3031               M         movlw   '1'             ; Se emplea la resta para la comparación.
01E7   0223               M         subwf   almacenaje,W    ; (W)=(Registro1_m1) - Constante_m1
01E8   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
01E9   29FB               M                 goto    Fsmenu1         ; Si Z=1 son iguales, por lo tanto salta  
                      00440         SaltaSiVarIgualConst almacenaje,'2',Fsmenu2
01EA   3032               M         movlw   '2'             ; Se emplea la resta para la comparación.
01EB   0223               M         subwf   almacenaje,W    ; (W)=(Registro1_m1) - Constante_m1
01EC   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01ED   2A05               M                 goto    Fsmenu2         ; Si Z=1 son iguales, por lo tanto salta  
                      00441         SaltaSiVarIgualConst almacenaje,'3',Fsmenu3
01EE   3033               M         movlw   '3'             ; Se emplea la resta para la comparación.
01EF   0223               M         subwf   almacenaje,W    ; (W)=(Registro1_m1) - Constante_m1
01F0   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
01F1   2A0F               M                 goto    Fsmenu3         ; Si Z=1 son iguales, por lo tanto salta  
                      00442         SaltaSiVarIgualConst almacenaje,'4',Fsmenu4
01F2   3034               M         movlw   '4'             ; Se emplea la resta para la comparación.
01F3   0223               M         subwf   almacenaje,W    ; (W)=(Registro1_m1) - Constante_m1
01F4   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
01F5   2A19               M                 goto    Fsmenu4         ; Si Z=1 son iguales, por lo tanto salta  
                      00443         SaltaSiVarIgualConst almacenaje,'#',Fsmenu#
01F6   3023               M         movlw   '#'             ; Se emplea la resta para la comparación.
01F7   0223               M         subwf   almacenaje,W    ; (W)=(Registro1_m1) - Constante_m1
01F8   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
01F9   2A23               M                 goto    Fsmenu#         ; Si Z=1 son iguales, por lo tanto salta  
01FA   2A2C           00444         goto Ffinalsmenu
                      00445 ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
01FB                  00446 Fsmenu1:
                      00447         SaltaSiVarIgualConst d1,'S',Asid1
01FB   3053               M         movlw   'S'             ; Se emplea la resta para la comparación.
01FC   0225               M         subwf   d1,W            ; (W)=(Registro1_m1) - Constante_m1
01FD   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
01FE   2A02               M                 goto    Asid1           ; Si Z=1 son iguales, por lo tanto salta  
                      00448         carga d1,'S'
01FF   3053               M         movlw   'S'     ; Toma el valor de la literal
0200   00A5               M         movwf   d1      ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
0201   2A04           00449         goto Afinalsinod1
0202                  00450 Asid1:
                      00451         carga d1,'N'
0202   304E               M         movlw   'N'     ; Toma el valor de la literal
0203   00A5               M         movwf   d1      ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
0204                  00452 Afinalsinod1:
0204   2A2C           00453         goto Ffinalsmenu
                      00454 ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0205                  00455 Fsmenu2:
                      00456         SaltaSiVarIgualConst d2,'S',Asid2
0205   3053               M         movlw   'S'             ; Se emplea la resta para la comparación.
0206   0226               M         subwf   d2,W            ; (W)=(Registro1_m1) - Constante_m1
0207   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
0208   2A0C               M                 goto    Asid2           ; Si Z=1 son iguales, por lo tanto salta  
                      00457         carga d2,'S'
0209   3053               M         movlw   'S'     ; Toma el valor de la literal
020A   00A6               M         movwf   d2      ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
020B   2A0E           00458         goto Afinalsinod2
020C                  00459 Asid2:
                      00460         carga d2,'N'
020C   304E               M         movlw   'N'     ; Toma el valor de la literal
020D   00A6               M         movwf   d2      ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
020E                  00461 Afinalsinod2:
020E   2A2C           00462         goto Ffinalsmenu
                      00463 ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
020F                  00464 Fsmenu3:
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00465         SaltaSiVarIgualConst d3,'S',Asid3
020F   3053               M         movlw   'S'             ; Se emplea la resta para la comparación.
0210   0227               M         subwf   d3,W            ; (W)=(Registro1_m1) - Constante_m1
0211   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
0212   2A16               M                 goto    Asid3           ; Si Z=1 son iguales, por lo tanto salta  
                      00466         carga d3,'S'
0213   3053               M         movlw   'S'     ; Toma el valor de la literal
0214   00A7               M         movwf   d3      ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
0215   2A18           00467         goto Afinalsinod3
0216                  00468 Asid3:
                      00469         carga d3,'N'
0216   304E               M         movlw   'N'     ; Toma el valor de la literal
0217   00A7               M         movwf   d3      ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
0218                  00470 Afinalsinod3:
0218   2A2C           00471         goto Ffinalsmenu
                      00472 ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0219                  00473 Fsmenu4:
                      00474         SaltaSiVarIgualConst d4,'S',Asid4
0219   3053               M         movlw   'S'             ; Se emplea la resta para la comparación.
021A   0228               M         subwf   d4,W            ; (W)=(Registro1_m1) - Constante_m1
021B   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
021C   2A20               M                 goto    Asid4           ; Si Z=1 son iguales, por lo tanto salta  
                      00475         carga d4,'S'
021D   3053               M         movlw   'S'     ; Toma el valor de la literal
021E   00A8               M         movwf   d4      ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
021F   2A22           00476         goto Afinalsinod4
0220                  00477 Asid4:
                      00478         carga d4,'N'
0220   304E               M         movlw   'N'     ; Toma el valor de la literal
0221   00A8               M         movwf   d4      ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
0222                  00479 Afinalsinod4:
0222   2A2C           00480         goto Ffinalsmenu        
                      00481 ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0223                  00482 Fsmenu#:
0223   01A5           00483         clrf d1
0224   01A6           00484         clrf d2
0225   01A7           00485         clrf d3
0226   01A8           00486         clrf d4
0227   01A0           00487         clrf menu
0228   01A2           00488         clrf usuario
0229   01B8           00489         clrf aux_menu
022A   20FE           00490         call menu0
022B   2B17           00491         goto finalmenus_2
                      00492 ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
022C                  00493 Ffinalsmenu:
022C   2610           00494         call ESCRIBE_SALAS_EEPROM
022D   2418           00495         call menu6
022E   2B17           00496         goto finalmenus_2       
                      00497 ;================== MENU 3===========================
022F                  00498 emenu3_2:
                      00499         SaltaSiVarIgualConst almacenaje,'1',Dsmenu1
022F   3031               M         movlw   '1'             ; Se emplea la resta para la comparación.
0230   0223               M         subwf   almacenaje,W    ; (W)=(Registro1_m1) - Constante_m1
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0231   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
0232   2A44               M                 goto    Dsmenu1         ; Si Z=1 son iguales, por lo tanto salta  
                      00500         SaltaSiVarIgualConst almacenaje,'2',Dsmenu2
0233   3032               M         movlw   '2'             ; Se emplea la resta para la comparación.
0234   0223               M         subwf   almacenaje,W    ; (W)=(Registro1_m1) - Constante_m1
0235   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
0236   2A44               M                 goto    Dsmenu2         ; Si Z=1 son iguales, por lo tanto salta  
                      00501         SaltaSiVarIgualConst almacenaje,'3',Dsmenu3
0237   3033               M         movlw   '3'             ; Se emplea la resta para la comparación.
0238   0223               M         subwf   almacenaje,W    ; (W)=(Registro1_m1) - Constante_m1
0239   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
023A   2A44               M                 goto    Dsmenu3         ; Si Z=1 son iguales, por lo tanto salta  
                      00502         SaltaSiVarIgualConst almacenaje,'A',DsmenuA
023B   3041               M         movlw   'A'             ; Se emplea la resta para la comparación.
023C   0223               M         subwf   almacenaje,W    ; (W)=(Registro1_m1) - Constante_m1
023D   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
023E   2A5B               M                 goto    DsmenuA         ; Si Z=1 son iguales, por lo tanto salta  
                      00503         SaltaSiVarIgualConst almacenaje,'#',Dsmenu#
023F   3023               M         movlw   '#'             ; Se emplea la resta para la comparación.
0240   0223               M         subwf   almacenaje,W    ; (W)=(Registro1_m1) - Constante_m1
0241   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
0242   2A71               M                 goto    Dsmenu#         ; Si Z=1 son iguales, por lo tanto salta  
0243   2A76           00504         goto Dfinalsmenu
0244                  00505 Dsmenu1:
0244                  00506 Dsmenu2:
0244                  00507 Dsmenu3:
                      00508         llena usuario,almacenaje
0244   0823               M         movfw   almacenaje ; Toma el valor de la literal
0245   00A2               M         movwf   usuario ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
                      00509         SaltaSiVarIgualConst aux_menu,'X',cambia_clavesd
0246   3058               M         movlw   'X'             ; Se emplea la resta para la comparación.
0247   0238               M         subwf   aux_menu,W      ; (W)=(Registro1_m1) - Constante_m1
0248   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
0249   2A4F               M                 goto    cambia_clavesd  ; Si Z=1 son iguales, por lo tanto salta  
                      00510         SaltaSiVarIgualConst aux_menu,'Y',cambia_accesosd
024A   3059               M         movlw   'Y'             ; Se emplea la resta para la comparación.
024B   0238               M         subwf   aux_menu,W      ; (W)=(Registro1_m1) - Constante_m1
024C   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
024D   2A55               M                 goto    cambia_accesosd ; Si Z=1 son iguales, por lo tanto salta  
024E   2A76           00511         goto Dfinalsmenu
024F                  00512 cambia_clavesd:
024F   236F           00513         call menu5
                      00514         llena usuario,almacenaje
0250   0823               M         movfw   almacenaje ; Toma el valor de la literal
0251   00A2               M         movwf   usuario ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
                      00515         carga menu,1 ;CAMBIA CLAVES
0252   3001               M         movlw   1       ; Toma el valor de la literal
0253   00A0               M         movwf   menu    ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
0254   2A76           00516         goto Dfinalsmenu
0255                  00517 cambia_accesosd
0255   2418           00518         call menu6
                      00519         carga menu,2 ;CAMBIA ACCESOS
0256   3002               M         movlw   2       ; Toma el valor de la literal
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0257   00A0               M         movwf   menu    ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
                      00520         llena usuario,almacenaje
0258   0823               M         movfw   almacenaje ; Toma el valor de la literal
0259   00A2               M         movwf   usuario ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
025A   2A76           00521         goto Dfinalsmenu
                      00522 
025B                  00523 DsmenuA:
                      00524         SaltaSiVarIgualConst aux_menu,'Y',Dfinalsmenu ;NO SE PUEDEN CAMBIAR ACCESOS AL ADMINISTRADOR
025B   3059               M         movlw   'Y'             ; Se emplea la resta para la comparación.
025C   0238               M         subwf   aux_menu,W      ; (W)=(Registro1_m1) - Constante_m1
025D   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
025E   2A76               M                 goto    Dfinalsmenu     ; Si Z=1 son iguales, por lo tanto salta  
                      00525         llena usuario,almacenaje
025F   0823               M         movfw   almacenaje ; Toma el valor de la literal
0260   00A2               M         movwf   usuario ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
                      00526         SaltaSiVarDiferenteConst aux_menu,'X',otra_d
0261   3058               M         movlw   'X'             ; Se emplea la resta para la comparación.
0262   0238               M         subwf   aux_menu,W      ; (W)=(Registro1_m2) - Constante_m2
0263   1D03               M         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
0264   2A70               M         goto    otra_d                  ; Si Z=0 son diferentes, por lo tanto salta
0265   305A           00527     movlw 'Z'
                      00528         banco2
0266   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0267   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0268   008C           00529         movwf   EEDATA          ;DATO = d1
0269   302C           00530         movlw .44
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
026A   008D           00531         movwf   EEADR           ;DIRECCION EEPROM=0
026B   27C0           00532         call EEWR
                      00533         
                      00534         carga menu,1 ;CAMBIA CLAVES
026C   3001               M         movlw   1       ; Toma el valor de la literal
026D   00A0               M         movwf   menu    ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
026E   236F           00535         call menu5
026F   2A76           00536         goto Dfinalsmenu
0270                  00537 otra_d:
0270   2A76           00538         goto Dfinalsmenu
0271                  00539 Dsmenu#:
0271   01A0           00540         clrf menu
0272   01A2           00541         clrf usuario
0273   01B8           00542         clrf aux_menu
0274   20FE           00543         call menu0
0275   2A76           00544         goto Dfinalsmenu
0276                  00545 Dfinalsmenu:
0276   2B17           00546         goto finalmenus_2
                      00547 ;================== MENU 4===========================
0277                  00548 emenu4_2:
                      00549         SaltaSiVarIgualConst almacenaje,'1',Csmenu1
0277   3031               M         movlw   '1'             ; Se emplea la resta para la comparación.
0278   0223               M         subwf   almacenaje,W    ; (W)=(Registro1_m1) - Constante_m1
0279   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
027A   2A8C               M                 goto    Csmenu1         ; Si Z=1 son iguales, por lo tanto salta  
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00550         SaltaSiVarIgualConst almacenaje,'2',Csmenu2
027B   3032               M         movlw   '2'             ; Se emplea la resta para la comparación.
027C   0223               M         subwf   almacenaje,W    ; (W)=(Registro1_m1) - Constante_m1
027D   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
027E   2A8C               M                 goto    Csmenu2         ; Si Z=1 son iguales, por lo tanto salta  
                      00551         SaltaSiVarIgualConst almacenaje,'3',Csmenu3
027F   3033               M         movlw   '3'             ; Se emplea la resta para la comparación.
0280   0223               M         subwf   almacenaje,W    ; (W)=(Registro1_m1) - Constante_m1
0281   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
0282   2A8C               M                 goto    Csmenu3         ; Si Z=1 son iguales, por lo tanto salta  
                      00552         SaltaSiVarIgualConst almacenaje,'4',Csmenu4
0283   3034               M         movlw   '4'             ; Se emplea la resta para la comparación.
0284   0223               M         subwf   almacenaje,W    ; (W)=(Registro1_m1) - Constante_m1
0285   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
0286   2A8C               M                 goto    Csmenu4         ; Si Z=1 son iguales, por lo tanto salta  
                      00553         SaltaSiVarIgualConst almacenaje,'#',Csmenu#
0287   3023               M         movlw   '#'             ; Se emplea la resta para la comparación.
0288   0223               M         subwf   almacenaje,W    ; (W)=(Registro1_m1) - Constante_m1
0289   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
028A   2A96               M                 goto    Csmenu#         ; Si Z=1 son iguales, por lo tanto salta  
028B   2A9E           00554         goto Cfinalsmenu
028C                  00555 Csmenu1:
028C                  00556 Csmenu2:
028C                  00557 Csmenu3:
028C                  00558 Csmenu4:
                      00559         carga menu,.6
028C   3006               M         movlw   .6      ; Toma el valor de la literal
028D   00A0               M         movwf   menu    ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
028E   236F           00560         call menu5
                      00561         llena sala,almacenaje
028F   0823               M         movfw   almacenaje ; Toma el valor de la literal
0290   00A1               M         movwf   sala    ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
0291   01A5           00562         clrf d1
0292   01A6           00563         clrf d2
0293   01A7           00564         clrf d3
0294   01A8           00565         clrf d4
0295   2A9E           00566         goto Cfinalsmenu
0296                  00567 Csmenu#:
0296   20FE           00568         call menu0
0297   01A0           00569         clrf menu       
0298   01A1           00570         clrf sala       
0299   01A5           00571         clrf d1
029A   01A6           00572         clrf d2
029B   01A7           00573         clrf d3
029C   01A8           00574         clrf d4
029D   2A9E           00575         goto Cfinalsmenu
029E                  00576 Cfinalsmenu:
029E   2B17           00577         goto finalmenus_2
                      00578 ;================== MENU 5===========================
029F                  00579 emenu5_2:
029F   3001           00580         movlw 0x01
Message[305]: Using default destination of 1 (file).
02A0   07A4           00581         addwf cont_clave
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00582         
                      00583         SaltaSiVarIgualConst cont_clave,1,Adigito1
02A1   3001               M         movlw   1               ; Se emplea la resta para la comparación.
02A2   0224               M         subwf   cont_clave,W    ; (W)=(Registro1_m1) - Constante_m1
02A3   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
02A4   2AAE               M                 goto    Adigito1        ; Si Z=1 son iguales, por lo tanto salta  
                      00584         SaltaSiVarIgualConst cont_clave,2,Adigito2
02A5   3002               M         movlw   2               ; Se emplea la resta para la comparación.
02A6   0224               M         subwf   cont_clave,W    ; (W)=(Registro1_m1) - Constante_m1
02A7   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
02A8   2AB2               M                 goto    Adigito2        ; Si Z=1 son iguales, por lo tanto salta  
                      00585         SaltaSiVarIgualConst cont_clave,3,Adigito3
02A9   3003               M         movlw   3               ; Se emplea la resta para la comparación.
02AA   0224               M         subwf   cont_clave,W    ; (W)=(Registro1_m1) - Constante_m1
02AB   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
02AC   2AB6               M                 goto    Adigito3        ; Si Z=1 son iguales, por lo tanto salta  
02AD   2ABA           00586         goto Adigito4
02AE                  00587 Adigito1:
                      00588         llena d1,almacenaje
02AE   0823               M         movfw   almacenaje ; Toma el valor de la literal
02AF   00A5               M         movwf   d1      ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
02B0   236F           00589         call menu5
02B1   2AF2           00590         goto Afinaldigitos 
02B2                  00591 Adigito2:
                      00592         llena d2,almacenaje
02B2   0823               M         movfw   almacenaje ; Toma el valor de la literal
02B3   00A6               M         movwf   d2      ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
02B4   236F           00593         call menu5
02B5   2AF2           00594         goto Afinaldigitos 
02B6                  00595 Adigito3:
                      00596         llena d3,almacenaje
02B6   0823               M         movfw   almacenaje ; Toma el valor de la literal
02B7   00A7               M         movwf   d3      ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
02B8   236F           00597         call menu5
02B9   2AF2           00598         goto Afinaldigitos 
02BA                  00599 Adigito4:
                      00600         llena d4,almacenaje
02BA   0823               M         movfw   almacenaje ; Toma el valor de la literal
02BB   00A8               M         movwf   d4      ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
02BC   236F           00601         call menu5
02BD   2557           00602         call T100mS
02BE   2557           00603         call T100mS
02BF   2557           00604         call T100mS
02C0   270B           00605         call VALIDA_ADMIN
02C1   1839           00606         btfsc llave,0
02C2   2AC9           00607                 goto admin_acept
                      00608         ;admin_rechazado
02C3   20CA           00609                 call menu2
02C4   2568           00610                 call T1S
02C5   01A0           00611                 clrf menu
02C6   20FE           00612                 call menu0
02C7   01B8           00613                 clrf aux_menu   
02C8   2AED           00614                 goto final_admina
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02C9                  00615 admin_acept:
02C9   20B9           00616                 call menu1
02CA   2568           00617                 call T1S
                      00618                 SaltaSiVarIgualConst aux_menu,'A',ad_cambiar_claves
02CB   3041               M         movlw   'A'             ; Se emplea la resta para la comparación.
02CC   0238               M         subwf   aux_menu,W      ; (W)=(Registro1_m1) - Constante_m1
02CD   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
02CE   2AE8               M                 goto    ad_cambiar_claves ; Si Z=1 son iguales, por lo tanto salta  
                      00619                 carga menu,3 ;Ingresa usuario (cambiar accesos)
02CF   3003               M         movlw   3       ; Toma el valor de la literal
02D0   00A0               M         movwf   menu    ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
02D1   2035           00620                 call menu4
                      00621                 LCD_GoTo  5,1                                           ; Pasa a la columna "0", Línea "
                            1"
  0000                    M         LOCAL Direccion_Hilera
                          M ; Se aplican límites para Hileras y Columnas:
                          M ;       IF (Hilera > Hileras)
                          M ;               Hilera_Final SET Hileras - 1
                          M ;       ENDIF
                          M ;       IF (Columna > Columnas) 
                          M ;               Columna_Final SET Columnas - 1
                          M ;       ENDIF
                          M 
                          M ; PARA LCD de 20x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0xC0 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x94 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0xD4 // Direccion de memoria para la cuarta linea
                          M                                         
                          M ; PARA LCD de 16x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0x40 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x14 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0x54 // Direccion de memoria para la cuarta linea                                   
                          M 
                          M ; Cálculo de la máscara en función del número de línea en donde se coloca el cursor:
                          M ;            |      V I S I B L E S      |     No Mostrados       |
                          M ; LÍNEA 0 --> 00 01 02 03 04 05 ... 0E 0F 10 11 12 13 14 ... 26 27    En Total 40 Caracteres
                          M ; LÍNEA 1 --> 40 41 42 43 44 45 ... 4E 4F 50 51 52 53 54 ... 66 67    En Total 40 Caracteres
                          M ; LÍNEA 2 --> 14 15 16 17 18 19 ... 22 23 24 25 26 27 28 ... 3A 3B    En Total 40 Caracteres
                          M ; LÍNEA 3 --> 54 55 56 57 58 59 ... 62 63 64 65 66 67 68 ... 80 81    En Total 40 Caracteres
                          M 
                          M         IF (Columnas == 16)
                          M                 IF (1      == 0)
                          M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (1      == 1)
Warning[207]: Found label after column 1. (Direccion_Hilera)
  00000040                M                         Direccion_Hilera SET 0x40
                          M                 ENDIF
                          M                 IF (1      == 2)
                          M                         Direccion_Hilera SET 0x14
                          M                 ENDIF
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 IF (1      == 3)
                          M                         Direccion_Hilera SET 0x54
                          M                 ENDIF
                          M         ENDIF
                          M         
                          M         IF (Columnas == 20)
                          M                 IF (1      == 0)
                          M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (1      == 1)
                          M                         Direccion_Hilera SET 0xC0
                          M                 ENDIF
                          M                 IF (1      == 2)
                          M                         Direccion_Hilera SET 0x94
                          M                 ENDIF
                          M                 IF (1      == 3)
                          M                         Direccion_Hilera SET 0xD4
                          M                 ENDIF
                          M         ENDIF
                          M         
                          M ; lcd_command(E_SET_DDRAM_ADDR | (col + rowaddr[ row ]));
02D2   3040               M                                                                                         movlw           
                            Direccion_Hilera
02D3   3E05               M                                                                                         addlw           
                            5
02D4   3880               M                                                                                         iorlw           
                            E_SET_DDRAM_ADDR
02D5   24F5               M                                                                                         call            
                            SendCom
                      00622                 imprimelit ' '  
02D6   3020               M         movlw   ' '     ; 
02D7   00B2               M         movwf   general_lcd
02D8   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
02D9   0832               M         movfw general_lcd
02DA   24C7               M         call  LCD_Char
                          M 
                      00623                 imprimelit ' '
02DB   3020               M         movlw   ' '     ; 
02DC   00B2               M         movwf   general_lcd
02DD   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
02DE   0832               M         movfw general_lcd
02DF   24C7               M         call  LCD_Char
                          M 
                      00624                 imprimelit ' '
02E0   3020               M         movlw   ' '     ; 
02E1   00B2               M         movwf   general_lcd
02E2   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
02E3   0832               M         movfw general_lcd
02E4   24C7               M         call  LCD_Char
                          M 
                      00625                 carga aux_menu,'Y'
02E5   3059               M         movlw   'Y'     ; Toma el valor de la literal
02E6   00B8               M         movwf   aux_menu ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02E7   2AED           00626                 goto final_admina
02E8                  00627 ad_cambiar_claves:
02E8   2035           00628                 call menu4
                      00629                 carga menu,3 ;ingresar usuario (cambiar claves)
02E9   3003               M         movlw   3       ; Toma el valor de la literal
02EA   00A0               M         movwf   menu    ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
                      00630                 carga aux_menu,'X'
02EB   3058               M         movlw   'X'     ; Toma el valor de la literal
02EC   00B8               M         movwf   aux_menu ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
02ED                  00631 final_admina:
02ED   01A4           00632         clrf cont_clave
02EE   01A5           00633         clrf d1
02EF   01A6           00634         clrf d2
02F0   01A7           00635         clrf d3
02F1   01A8           00636         clrf d4
02F2                  00637 Afinaldigitos:
02F2   2B17           00638         goto finalmenus_2
                      00639 ;================== MENU 6===========================
02F3                  00640 emenu6_2:
02F3   3001           00641         movlw 0x01
Message[305]: Using default destination of 1 (file).
02F4   07A4           00642         addwf cont_clave        
                      00643         SaltaSiVarIgualConst cont_clave,1,Cdigito1
02F5   3001               M         movlw   1               ; Se emplea la resta para la comparación.
02F6   0224               M         subwf   cont_clave,W    ; (W)=(Registro1_m1) - Constante_m1
02F7   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
02F8   2B02               M                 goto    Cdigito1        ; Si Z=1 son iguales, por lo tanto salta  
                      00644         SaltaSiVarIgualConst cont_clave,2,Cdigito2
02F9   3002               M         movlw   2               ; Se emplea la resta para la comparación.
02FA   0224               M         subwf   cont_clave,W    ; (W)=(Registro1_m1) - Constante_m1
02FB   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
02FC   2B06               M                 goto    Cdigito2        ; Si Z=1 son iguales, por lo tanto salta  
                      00645         SaltaSiVarIgualConst cont_clave,3,Cdigito3
02FD   3003               M         movlw   3               ; Se emplea la resta para la comparación.
02FE   0224               M         subwf   cont_clave,W    ; (W)=(Registro1_m1) - Constante_m1
02FF   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
0300   2B0A               M                 goto    Cdigito3        ; Si Z=1 son iguales, por lo tanto salta  
0301   2B0E           00646         goto Cdigito4
0302                  00647 Cdigito1:
                      00648         llena d1,almacenaje
0302   0823               M         movfw   almacenaje ; Toma el valor de la literal
0303   00A5               M         movwf   d1      ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
0304   236F           00649         call menu5
0305   2B17           00650         goto Cfinaldigitos 
0306                  00651 Cdigito2:
                      00652         llena d2,almacenaje
0306   0823               M         movfw   almacenaje ; Toma el valor de la literal
0307   00A6               M         movwf   d2      ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
0308   236F           00653         call menu5
0309   2B17           00654         goto Cfinaldigitos 
030A                  00655 Cdigito3:
                      00656         llena d3,almacenaje
030A   0823               M         movfw   almacenaje ; Toma el valor de la literal
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

030B   00A7               M         movwf   d3      ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
030C   236F           00657         call menu5
030D   2B17           00658         goto Cfinaldigitos 
030E                  00659 Cdigito4:
                      00660         llena d4,almacenaje
030E   0823               M         movfw   almacenaje ; Toma el valor de la literal
030F   00A8               M         movwf   d4      ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
0310   236F           00661         call menu5
0311   2557           00662         call T100mS
0312   2557           00663         call T100mS
0313   2557           00664         call T100mS
0314   270B           00665         call VALIDA_ADMIN
0315   26CC           00666         call VERIFICA_ACCESO
0316   01A4           00667         clrf cont_clave
0317                  00668 Cfinaldigitos:
                      00669         
                      00670 ;================== FINAL DE LOS MENUS===========================
0317                  00671 finalmenus_2:
                      00672         carga almacenaje,0
0317   3000               M         movlw   0       ; Toma el valor de la literal
0318   00A3               M         movwf   almacenaje ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
0319                  00673 NoTecla:
                      00674 
                      00675 ;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                      00676         ;DETECTA SENSOR BIT 7 PUERTO C COMO ENTREADA Y BIT 0 COMO SALIDA
                      00677 ;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                      00678         Detecta_sensor
0319   1B87               M         btfsc PORTC,7
031A   2B1D               M         goto enciende
031B   1007               M         bcf PORTC,0
031C   2B1E               M         goto fin_sensor
031D                      M enciende:       
031D   1407               M         bsf PORTC,0
031E                      M fin_sensor:
                          M 
031E   2956           00679         goto Inicio
                      00680 
                      00681 ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   
                      00682 ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (Teclas) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    
                      00683 ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   
                      00684         Graba_Tecla
031F                      M Tecla1: 
031F   2557               M         call T100mS 
0320   2557               M         call T100mS 
0321   3031               M         movlw '1'
0322   00A3               M         movwf almacenaje
0323   297E               M         goto Termina_teclado
                          M 
0324                      M Tecla2:   
0324   2557               M         call T100mS 
0325   2557               M         call T100mS 
0326   3032               M         movlw '2'
0327   00A3               M         movwf almacenaje
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0328   297E               M         goto Termina_teclado
                          M 
0329                      M Tecla3:   
0329   2557               M         call T100mS 
032A   2557               M         call T100mS 
032B   3033               M         movlw '3'
032C   00A3               M         movwf almacenaje
032D   297E               M         goto Termina_teclado
                          M 
032E                      M TeclaA: 
032E   2557               M         call T100mS 
032F   2557               M         call T100mS   
0330   3041               M         movlw 'A'
0331   00A3               M         movwf almacenaje
0332   297E               M         goto Termina_teclado
                          M 
0333                      M Tecla4:   
0333   2557               M         call T100mS 
0334   2557               M         call T100mS 
0335   3034               M         movlw '4'
0336   00A3               M         movwf almacenaje
0337   297E               M         goto Termina_teclado
                          M 
0338                      M Tecla5:   
0338   2557               M         call T100mS 
0339   2557               M         call T100mS 
033A   3035               M         movlw '5'
033B   00A3               M         movwf almacenaje
033C   297E               M         goto Termina_teclado
                          M 
033D                      M Tecla6:   
033D   2557               M         call T100mS 
033E   2557               M         call T100mS 
033F   3036               M         movlw '6'
0340   00A3               M         movwf almacenaje
0341   297E               M         goto Termina_teclado
                          M         
0342                      M TeclaB:   
0342   2557               M         call T100mS 
0343   2557               M         call T100mS 
0344   3042               M         movlw 'B'
0345   00A3               M         movwf almacenaje
0346   297E               M         goto Termina_teclado
                          M 
0347                      M Tecla7:   
0347   2557               M         call T100mS 
0348   2557               M         call T100mS 
0349   3037               M         movlw '7'
034A   00A3               M         movwf almacenaje
034B   297E               M         goto Termina_teclado
                          M 
034C                      M Tecla8:   
034C   2557               M         call T100mS 
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

034D   2557               M         call T100mS 
034E   3038               M         movlw '8'
034F   00A3               M         movwf almacenaje
0350   297E               M         goto Termina_teclado
                          M 
0351                      M Tecla9:   
0351   2557               M         call T100mS 
0352   2557               M         call T100mS 
0353   3039               M         movlw '9'
0354   00A3               M         movwf almacenaje
0355   297E               M         goto Termina_teclado
                          M 
0356                      M TeclaC:   
0356   2557               M         call T100mS 
0357   2557               M         call T100mS 
0358   3043               M         movlw 'C'
0359   00A3               M         movwf almacenaje
035A   297E               M         goto Termina_teclado
                          M 
035B                      M Tecla_asterisco:
035B   2557               M         call T100mS 
035C   2557               M         call T100mS    
035D   302A               M         movlw '*'
035E   00A3               M         movwf almacenaje
035F   297E               M         goto Termina_teclado
                          M 
0360                      M Tecla0:   
0360   2557               M         call T100mS 
0361   2557               M         call T100mS 
0362   3030               M         movlw '0'
0363   00A3               M         movwf almacenaje
0364   297E               M         goto Termina_teclado
                          M 
0365                      M Tecla#:   
0365   2557               M         call T100mS 
0366   2557               M         call T100mS 
0367   3023               M         movlw '#'
0368   00A3               M         movwf almacenaje
0369   297E               M         goto Termina_teclado
                          M 
036A                      M TeclaD:   
036A   2557               M         call T100mS 
036B   2557               M         call T100mS 
036C   3044               M         movlw 'D'
036D   00A3               M         movwf almacenaje
036E   297E               M         goto Termina_teclado
                          M 
                      00685 
                      00686 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00687 ;LETREROS LCD 
                      00688 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
036F                  00689 menu5:
                      00690         LCD_GoTo  0,0   ; Pasa a la columna "0", Línea "0"      
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000                    M         LOCAL Direccion_Hilera
                          M ; Se aplican límites para Hileras y Columnas:
                          M ;       IF (Hilera > Hileras)
                          M ;               Hilera_Final SET Hileras - 1
                          M ;       ENDIF
                          M ;       IF (Columna > Columnas) 
                          M ;               Columna_Final SET Columnas - 1
                          M ;       ENDIF
                          M 
                          M ; PARA LCD de 20x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0xC0 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x94 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0xD4 // Direccion de memoria para la cuarta linea
                          M                                         
                          M ; PARA LCD de 16x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0x40 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x14 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0x54 // Direccion de memoria para la cuarta linea                                   
                          M 
                          M ; Cálculo de la máscara en función del número de línea en donde se coloca el cursor:
                          M ;            |      V I S I B L E S      |     No Mostrados       |
                          M ; LÍNEA 0 --> 00 01 02 03 04 05 ... 0E 0F 10 11 12 13 14 ... 26 27    En Total 40 Caracteres
                          M ; LÍNEA 1 --> 40 41 42 43 44 45 ... 4E 4F 50 51 52 53 54 ... 66 67    En Total 40 Caracteres
                          M ; LÍNEA 2 --> 14 15 16 17 18 19 ... 22 23 24 25 26 27 28 ... 3A 3B    En Total 40 Caracteres
                          M ; LÍNEA 3 --> 54 55 56 57 58 59 ... 62 63 64 65 66 67 68 ... 80 81    En Total 40 Caracteres
                          M 
                          M         IF (Columnas == 16)
                          M                 IF (0      == 0)
Warning[207]: Found label after column 1. (Direccion_Hilera)
  00000000                M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (0      == 1)
                          M                         Direccion_Hilera SET 0x40
                          M                 ENDIF
                          M                 IF (0      == 2)
                          M                         Direccion_Hilera SET 0x14
                          M                 ENDIF
                          M                 IF (0      == 3)
                          M                         Direccion_Hilera SET 0x54
                          M                 ENDIF
                          M         ENDIF
                          M         
                          M         IF (Columnas == 20)
                          M                 IF (0      == 0)
                          M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (0      == 1)
                          M                         Direccion_Hilera SET 0xC0
                          M                 ENDIF
                          M                 IF (0      == 2)
                          M                         Direccion_Hilera SET 0x94
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 ENDIF
                          M                 IF (0      == 3)
                          M                         Direccion_Hilera SET 0xD4
                          M                 ENDIF
                          M         ENDIF
                          M         
                          M ; lcd_command(E_SET_DDRAM_ADDR | (col + rowaddr[ row ]));
036F   3000               M                                                                                         movlw           
                            Direccion_Hilera
0370   3E00               M                                                                                         addlw           
                            0
0371   3880               M                                                                                         iorlw           
                            E_SET_DDRAM_ADDR
0372   24F5               M                                                                                         call            
                            SendCom
                      00691         ;INGRESE 4 DIGTOS
                      00692         imprimelit 'I'  ;1
0373   3049               M         movlw   'I'     ; 
0374   00B2               M         movwf   general_lcd
0375   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0376   0832               M         movfw general_lcd
0377   24C7               M         call  LCD_Char
                          M 
                      00693         imprimelit 'N'  ;2
0378   304E               M         movlw   'N'     ; 
0379   00B2               M         movwf   general_lcd
037A   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
037B   0832               M         movfw general_lcd
037C   24C7               M         call  LCD_Char
                          M 
                      00694         imprimelit 'G'  ;3
037D   3047               M         movlw   'G'     ; 
037E   00B2               M         movwf   general_lcd
037F   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0380   0832               M         movfw general_lcd
0381   24C7               M         call  LCD_Char
                          M 
                      00695         imprimelit 'R'  ;4
0382   3052               M         movlw   'R'     ; 
0383   00B2               M         movwf   general_lcd
0384   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0385   0832               M         movfw general_lcd
0386   24C7               M         call  LCD_Char
                          M 
                      00696         imprimelit 'E'  ;5
0387   3045               M         movlw   'E'     ; 
0388   00B2               M         movwf   general_lcd
0389   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
038A   0832               M         movfw general_lcd
038B   24C7               M         call  LCD_Char
                          M 
                      00697         imprimelit 'S'  ;6
038C   3053               M         movlw   'S'     ; 
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

038D   00B2               M         movwf   general_lcd
038E   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
038F   0832               M         movfw general_lcd
0390   24C7               M         call  LCD_Char
                          M 
                      00698         imprimelit 'E'  ;7
0391   3045               M         movlw   'E'     ; 
0392   00B2               M         movwf   general_lcd
0393   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0394   0832               M         movfw general_lcd
0395   24C7               M         call  LCD_Char
                          M 
                      00699         imprimelit ' '  ;8
0396   3020               M         movlw   ' '     ; 
0397   00B2               M         movwf   general_lcd
0398   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0399   0832               M         movfw general_lcd
039A   24C7               M         call  LCD_Char
                          M 
                      00700         imprimelit '4'  ;9
039B   3034               M         movlw   '4'     ; 
039C   00B2               M         movwf   general_lcd
039D   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
039E   0832               M         movfw general_lcd
039F   24C7               M         call  LCD_Char
                          M 
                      00701         imprimelit ' '  ;10
03A0   3020               M         movlw   ' '     ; 
03A1   00B2               M         movwf   general_lcd
03A2   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
03A3   0832               M         movfw general_lcd
03A4   24C7               M         call  LCD_Char
                          M 
                      00702         imprimelit 'D'  ;11
03A5   3044               M         movlw   'D'     ; 
03A6   00B2               M         movwf   general_lcd
03A7   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
03A8   0832               M         movfw general_lcd
03A9   24C7               M         call  LCD_Char
                          M 
                      00703         imprimelit 'I'  ;12
03AA   3049               M         movlw   'I'     ; 
03AB   00B2               M         movwf   general_lcd
03AC   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
03AD   0832               M         movfw general_lcd
03AE   24C7               M         call  LCD_Char
                          M 
                      00704         imprimelit 'G'  ;13
03AF   3047               M         movlw   'G'     ; 
03B0   00B2               M         movwf   general_lcd
03B1   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
03B2   0832               M         movfw general_lcd
03B3   24C7               M         call  LCD_Char
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 58


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M 
                      00705         imprimelit 'T'  ;14
03B4   3054               M         movlw   'T'     ; 
03B5   00B2               M         movwf   general_lcd
03B6   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
03B7   0832               M         movfw general_lcd
03B8   24C7               M         call  LCD_Char
                          M 
                      00706         imprimelit 'O'  ;15
03B9   304F               M         movlw   'O'     ; 
03BA   00B2               M         movwf   general_lcd
03BB   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
03BC   0832               M         movfw general_lcd
03BD   24C7               M         call  LCD_Char
                          M 
                      00707         imprimelit 'S'  ;16
03BE   3053               M         movlw   'S'     ; 
03BF   00B2               M         movwf   general_lcd
03C0   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
03C1   0832               M         movfw general_lcd
03C2   24C7               M         call  LCD_Char
                          M 
                      00708         LCD_GoTo  0,1; Pasa a la columna "0", Línea "1"
  0000                    M         LOCAL Direccion_Hilera
                          M ; Se aplican límites para Hileras y Columnas:
                          M ;       IF (Hilera > Hileras)
                          M ;               Hilera_Final SET Hileras - 1
                          M ;       ENDIF
                          M ;       IF (Columna > Columnas) 
                          M ;               Columna_Final SET Columnas - 1
                          M ;       ENDIF
                          M 
                          M ; PARA LCD de 20x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0xC0 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x94 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0xD4 // Direccion de memoria para la cuarta linea
                          M                                         
                          M ; PARA LCD de 16x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0x40 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x14 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0x54 // Direccion de memoria para la cuarta linea                                   
                          M 
                          M ; Cálculo de la máscara en función del número de línea en donde se coloca el cursor:
                          M ;            |      V I S I B L E S      |     No Mostrados       |
                          M ; LÍNEA 0 --> 00 01 02 03 04 05 ... 0E 0F 10 11 12 13 14 ... 26 27    En Total 40 Caracteres
                          M ; LÍNEA 1 --> 40 41 42 43 44 45 ... 4E 4F 50 51 52 53 54 ... 66 67    En Total 40 Caracteres
                          M ; LÍNEA 2 --> 14 15 16 17 18 19 ... 22 23 24 25 26 27 28 ... 3A 3B    En Total 40 Caracteres
                          M ; LÍNEA 3 --> 54 55 56 57 58 59 ... 62 63 64 65 66 67 68 ... 80 81    En Total 40 Caracteres
                          M 
                          M         IF (Columnas == 16)
                          M                 IF (1      == 0)
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 59


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (1      == 1)
Warning[207]: Found label after column 1. (Direccion_Hilera)
  00000040                M                         Direccion_Hilera SET 0x40
                          M                 ENDIF
                          M                 IF (1      == 2)
                          M                         Direccion_Hilera SET 0x14
                          M                 ENDIF
                          M                 IF (1      == 3)
                          M                         Direccion_Hilera SET 0x54
                          M                 ENDIF
                          M         ENDIF
                          M         
                          M         IF (Columnas == 20)
                          M                 IF (1      == 0)
                          M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (1      == 1)
                          M                         Direccion_Hilera SET 0xC0
                          M                 ENDIF
                          M                 IF (1      == 2)
                          M                         Direccion_Hilera SET 0x94
                          M                 ENDIF
                          M                 IF (1      == 3)
                          M                         Direccion_Hilera SET 0xD4
                          M                 ENDIF
                          M         ENDIF
                          M         
                          M ; lcd_command(E_SET_DDRAM_ADDR | (col + rowaddr[ row ]));
03C3   3040               M                                                                                         movlw           
                            Direccion_Hilera
03C4   3E00               M                                                                                         addlw           
                            0
03C5   3880               M                                                                                         iorlw           
                            E_SET_DDRAM_ADDR
03C6   24F5               M                                                                                         call            
                            SendCom
                      00709         ;LETRERO RARO QUE NO PIENSO ESCRIBIR JEJE
                      00710         imprimelit ' '  ;1
03C7   3020               M         movlw   ' '     ; 
03C8   00B2               M         movwf   general_lcd
03C9   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
03CA   0832               M         movfw general_lcd
03CB   24C7               M         call  LCD_Char
                          M 
                      00711         imprimelit ' '  ;2
03CC   3020               M         movlw   ' '     ; 
03CD   00B2               M         movwf   general_lcd
03CE   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
03CF   0832               M         movfw general_lcd
03D0   24C7               M         call  LCD_Char
                          M 
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 60


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00712         imprimelit ' '  ;3
03D1   3020               M         movlw   ' '     ; 
03D2   00B2               M         movwf   general_lcd
03D3   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
03D4   0832               M         movfw general_lcd
03D5   24C7               M         call  LCD_Char
                          M 
                      00713         imprimelit ' '  ;4
03D6   3020               M         movlw   ' '     ; 
03D7   00B2               M         movwf   general_lcd
03D8   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
03D9   0832               M         movfw general_lcd
03DA   24C7               M         call  LCD_Char
                          M 
                      00714         imprimelit ' '  ;5
03DB   3020               M         movlw   ' '     ; 
03DC   00B2               M         movwf   general_lcd
03DD   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
03DE   0832               M         movfw general_lcd
03DF   24C7               M         call  LCD_Char
                          M 
                      00715         imprimevar d1  ;6
03E0   0825               M         movfw   d1      ; 
03E1   00B2               M         movwf   general_lcd
03E2   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
03E3   0832               M         movfw general_lcd
03E4   24C7               M         call  LCD_Char
                          M 
                      00716         imprimevar d2  ;7
03E5   0826               M         movfw   d2      ; 
03E6   00B2               M         movwf   general_lcd
03E7   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
03E8   0832               M         movfw general_lcd
03E9   24C7               M         call  LCD_Char
                          M 
                      00717         imprimevar d3  ;8
03EA   0827               M         movfw   d3      ; 
03EB   00B2               M         movwf   general_lcd
03EC   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
03ED   0832               M         movfw general_lcd
03EE   24C7               M         call  LCD_Char
                          M 
                      00718         imprimevar d4  ;9
03EF   0828               M         movfw   d4      ; 
03F0   00B2               M         movwf   general_lcd
03F1   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
03F2   0832               M         movfw general_lcd
03F3   24C7               M         call  LCD_Char
                          M 
                      00719         imprimelit ' '  ;10
03F4   3020               M         movlw   ' '     ; 
03F5   00B2               M         movwf   general_lcd
03F6   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 61


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03F7   0832               M         movfw general_lcd
03F8   24C7               M         call  LCD_Char
                          M 
                      00720         imprimelit ' '  ;11
03F9   3020               M         movlw   ' '     ; 
03FA   00B2               M         movwf   general_lcd
03FB   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
03FC   0832               M         movfw general_lcd
03FD   24C7               M         call  LCD_Char
                          M 
                      00721         imprimelit ' '  ;12
03FE   3020               M         movlw   ' '     ; 
03FF   00B2               M         movwf   general_lcd
0400   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0401   0832               M         movfw general_lcd
0402   24C7               M         call  LCD_Char
                          M 
                      00722         imprimelit ' '  ;13
0403   3020               M         movlw   ' '     ; 
0404   00B2               M         movwf   general_lcd
0405   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0406   0832               M         movfw general_lcd
0407   24C7               M         call  LCD_Char
                          M 
                      00723         imprimelit ' '  ;14
0408   3020               M         movlw   ' '     ; 
0409   00B2               M         movwf   general_lcd
040A   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
040B   0832               M         movfw general_lcd
040C   24C7               M         call  LCD_Char
                          M 
                      00724         imprimelit ' '  ;15
040D   3020               M         movlw   ' '     ; 
040E   00B2               M         movwf   general_lcd
040F   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0410   0832               M         movfw general_lcd
0411   24C7               M         call  LCD_Char
                          M 
                      00725         imprimelit ' '  ;16
0412   3020               M         movlw   ' '     ; 
0413   00B2               M         movwf   general_lcd
0414   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0415   0832               M         movfw general_lcd
0416   24C7               M         call  LCD_Char
                          M 
0417   0008           00726         return
                      00727 
0418                  00728 menu6:
0418   2674           00729         call LEE_SALAS_EEPROM
                      00730         LCD_GoTo  0,0   ; Pasa a la columna "0", Línea "0"      
  0000                    M         LOCAL Direccion_Hilera
                          M ; Se aplican límites para Hileras y Columnas:
                          M ;       IF (Hilera > Hileras)
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 62


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M ;               Hilera_Final SET Hileras - 1
                          M ;       ENDIF
                          M ;       IF (Columna > Columnas) 
                          M ;               Columna_Final SET Columnas - 1
                          M ;       ENDIF
                          M 
                          M ; PARA LCD de 20x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0xC0 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x94 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0xD4 // Direccion de memoria para la cuarta linea
                          M                                         
                          M ; PARA LCD de 16x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0x40 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x14 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0x54 // Direccion de memoria para la cuarta linea                                   
                          M 
                          M ; Cálculo de la máscara en función del número de línea en donde se coloca el cursor:
                          M ;            |      V I S I B L E S      |     No Mostrados       |
                          M ; LÍNEA 0 --> 00 01 02 03 04 05 ... 0E 0F 10 11 12 13 14 ... 26 27    En Total 40 Caracteres
                          M ; LÍNEA 1 --> 40 41 42 43 44 45 ... 4E 4F 50 51 52 53 54 ... 66 67    En Total 40 Caracteres
                          M ; LÍNEA 2 --> 14 15 16 17 18 19 ... 22 23 24 25 26 27 28 ... 3A 3B    En Total 40 Caracteres
                          M ; LÍNEA 3 --> 54 55 56 57 58 59 ... 62 63 64 65 66 67 68 ... 80 81    En Total 40 Caracteres
                          M 
                          M         IF (Columnas == 16)
                          M                 IF (0      == 0)
Warning[207]: Found label after column 1. (Direccion_Hilera)
  00000000                M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (0      == 1)
                          M                         Direccion_Hilera SET 0x40
                          M                 ENDIF
                          M                 IF (0      == 2)
                          M                         Direccion_Hilera SET 0x14
                          M                 ENDIF
                          M                 IF (0      == 3)
                          M                         Direccion_Hilera SET 0x54
                          M                 ENDIF
                          M         ENDIF
                          M         
                          M         IF (Columnas == 20)
                          M                 IF (0      == 0)
                          M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (0      == 1)
                          M                         Direccion_Hilera SET 0xC0
                          M                 ENDIF
                          M                 IF (0      == 2)
                          M                         Direccion_Hilera SET 0x94
                          M                 ENDIF
                          M                 IF (0      == 3)
                          M                         Direccion_Hilera SET 0xD4
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 63


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 ENDIF
                          M         ENDIF
                          M         
                          M ; lcd_command(E_SET_DDRAM_ADDR | (col + rowaddr[ row ]));
0419   3000               M                                                                                         movlw           
                            Direccion_Hilera
041A   3E00               M                                                                                         addlw           
                            0
041B   3880               M                                                                                         iorlw           
                            E_SET_DDRAM_ADDR
041C   24F5               M                                                                                         call            
                            SendCom
                      00731         ;CONF(1-4) #M *AD
                      00732         imprimelit 'C'  ;1
041D   3043               M         movlw   'C'     ; 
041E   00B2               M         movwf   general_lcd
041F   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0420   0832               M         movfw general_lcd
0421   24C7               M         call  LCD_Char
                          M 
                      00733         imprimelit 'O'  ;2
0422   304F               M         movlw   'O'     ; 
0423   00B2               M         movwf   general_lcd
0424   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0425   0832               M         movfw general_lcd
0426   24C7               M         call  LCD_Char
                          M 
                      00734         imprimelit 'N'  ;3
0427   304E               M         movlw   'N'     ; 
0428   00B2               M         movwf   general_lcd
0429   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
042A   0832               M         movfw general_lcd
042B   24C7               M         call  LCD_Char
                          M 
                      00735         imprimelit 'F'  ;4
042C   3046               M         movlw   'F'     ; 
042D   00B2               M         movwf   general_lcd
042E   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
042F   0832               M         movfw general_lcd
0430   24C7               M         call  LCD_Char
                          M 
                      00736         imprimelit '('  ;5
0431   3028               M         movlw   '('     ; 
0432   00B2               M         movwf   general_lcd
0433   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0434   0832               M         movfw general_lcd
0435   24C7               M         call  LCD_Char
                          M 
                      00737         imprimelit '1'  ;6
0436   3031               M         movlw   '1'     ; 
0437   00B2               M         movwf   general_lcd
0438   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0439   0832               M         movfw general_lcd
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 64


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

043A   24C7               M         call  LCD_Char
                          M 
                      00738         imprimelit '-'  ;7
043B   302D               M         movlw   '-'     ; 
043C   00B2               M         movwf   general_lcd
043D   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
043E   0832               M         movfw general_lcd
043F   24C7               M         call  LCD_Char
                          M 
                      00739         imprimelit '4'  ;8
0440   3034               M         movlw   '4'     ; 
0441   00B2               M         movwf   general_lcd
0442   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0443   0832               M         movfw general_lcd
0444   24C7               M         call  LCD_Char
                          M 
                      00740         imprimelit ')'  ;9
0445   3029               M         movlw   ')'     ; 
0446   00B2               M         movwf   general_lcd
0447   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0448   0832               M         movfw general_lcd
0449   24C7               M         call  LCD_Char
                          M 
                      00741         imprimelit ' '  ;10
044A   3020               M         movlw   ' '     ; 
044B   00B2               M         movwf   general_lcd
044C   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
044D   0832               M         movfw general_lcd
044E   24C7               M         call  LCD_Char
                          M 
                      00742         imprimelit 'M'  ;11
044F   304D               M         movlw   'M'     ; 
0450   00B2               M         movwf   general_lcd
0451   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0452   0832               M         movfw general_lcd
0453   24C7               M         call  LCD_Char
                          M 
                      00743         imprimelit 'E'  ;12
0454   3045               M         movlw   'E'     ; 
0455   00B2               M         movwf   general_lcd
0456   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0457   0832               M         movfw general_lcd
0458   24C7               M         call  LCD_Char
                          M 
                      00744         imprimelit 'N'  ;13
0459   304E               M         movlw   'N'     ; 
045A   00B2               M         movwf   general_lcd
045B   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
045C   0832               M         movfw general_lcd
045D   24C7               M         call  LCD_Char
                          M 
                      00745         imprimelit 'U'  ;14
045E   3055               M         movlw   'U'     ; 
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 65


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

045F   00B2               M         movwf   general_lcd
0460   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0461   0832               M         movfw general_lcd
0462   24C7               M         call  LCD_Char
                          M 
                      00746         imprimelit '='  ;15
0463   303D               M         movlw   '='     ; 
0464   00B2               M         movwf   general_lcd
0465   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0466   0832               M         movfw general_lcd
0467   24C7               M         call  LCD_Char
                          M 
                      00747         imprimelit '#'  ;16
0468   3023               M         movlw   '#'     ; 
0469   00B2               M         movwf   general_lcd
046A   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
046B   0832               M         movfw general_lcd
046C   24C7               M         call  LCD_Char
                          M 
                      00748         LCD_GoTo  0,1; Pasa a la columna "0", Línea "1"
  0000                    M         LOCAL Direccion_Hilera
                          M ; Se aplican límites para Hileras y Columnas:
                          M ;       IF (Hilera > Hileras)
                          M ;               Hilera_Final SET Hileras - 1
                          M ;       ENDIF
                          M ;       IF (Columna > Columnas) 
                          M ;               Columna_Final SET Columnas - 1
                          M ;       ENDIF
                          M 
                          M ; PARA LCD de 20x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0xC0 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x94 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0xD4 // Direccion de memoria para la cuarta linea
                          M                                         
                          M ; PARA LCD de 16x4
                          M ;#define LCD_LINEA1 0x00 // Direccion de memoria para la primera linea
                          M ;#define LCD_LINEA2 0x40 // Direccion de memoria para la segunda linea
                          M ;#define LCD_LINEA3 0x14 // Direccion de memoria para la tercera linea
                          M ;#define LCD_LINEA4 0x54 // Direccion de memoria para la cuarta linea                                   
                          M 
                          M ; Cálculo de la máscara en función del número de línea en donde se coloca el cursor:
                          M ;            |      V I S I B L E S      |     No Mostrados       |
                          M ; LÍNEA 0 --> 00 01 02 03 04 05 ... 0E 0F 10 11 12 13 14 ... 26 27    En Total 40 Caracteres
                          M ; LÍNEA 1 --> 40 41 42 43 44 45 ... 4E 4F 50 51 52 53 54 ... 66 67    En Total 40 Caracteres
                          M ; LÍNEA 2 --> 14 15 16 17 18 19 ... 22 23 24 25 26 27 28 ... 3A 3B    En Total 40 Caracteres
                          M ; LÍNEA 3 --> 54 55 56 57 58 59 ... 62 63 64 65 66 67 68 ... 80 81    En Total 40 Caracteres
                          M 
                          M         IF (Columnas == 16)
                          M                 IF (1      == 0)
                          M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (1      == 1)
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 66


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Warning[207]: Found label after column 1. (Direccion_Hilera)
  00000040                M                         Direccion_Hilera SET 0x40
                          M                 ENDIF
                          M                 IF (1      == 2)
                          M                         Direccion_Hilera SET 0x14
                          M                 ENDIF
                          M                 IF (1      == 3)
                          M                         Direccion_Hilera SET 0x54
                          M                 ENDIF
                          M         ENDIF
                          M         
                          M         IF (Columnas == 20)
                          M                 IF (1      == 0)
                          M                         Direccion_Hilera SET 0x00
                          M                 ENDIF   
                          M                 IF (1      == 1)
                          M                         Direccion_Hilera SET 0xC0
                          M                 ENDIF
                          M                 IF (1      == 2)
                          M                         Direccion_Hilera SET 0x94
                          M                 ENDIF
                          M                 IF (1      == 3)
                          M                         Direccion_Hilera SET 0xD4
                          M                 ENDIF
                          M         ENDIF
                          M         
                          M ; lcd_command(E_SET_DDRAM_ADDR | (col + rowaddr[ row ]));
046D   3040               M                                                                                         movlw           
                            Direccion_Hilera
046E   3E00               M                                                                                         addlw           
                            0
046F   3880               M                                                                                         iorlw           
                            E_SET_DDRAM_ADDR
0470   24F5               M                                                                                         call            
                            SendCom
                      00749         ;LETRERO RARO QUE NO PIENSO ESCRIBIR JEJE
                      00750         imprimelit 'U'  ;1
0471   3055               M         movlw   'U'     ; 
0472   00B2               M         movwf   general_lcd
0473   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0474   0832               M         movfw general_lcd
0475   24C7               M         call  LCD_Char
                          M 
                      00751         imprimelit 's'  ;2
0476   3073               M         movlw   's'     ; 
0477   00B2               M         movwf   general_lcd
0478   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0479   0832               M         movfw general_lcd
047A   24C7               M         call  LCD_Char
                          M 
                      00752         imprimelit ':'  ;3
047B   303A               M         movlw   ':'     ; 
047C   00B2               M         movwf   general_lcd
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 67


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

047D   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
047E   0832               M         movfw general_lcd
047F   24C7               M         call  LCD_Char
                          M 
                      00753         imprimevar usuario  ;4
0480   0822               M         movfw   usuario ; 
0481   00B2               M         movwf   general_lcd
0482   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0483   0832               M         movfw general_lcd
0484   24C7               M         call  LCD_Char
                          M 
                      00754         imprimelit ' '  ;5
0485   3020               M         movlw   ' '     ; 
0486   00B2               M         movwf   general_lcd
0487   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0488   0832               M         movfw general_lcd
0489   24C7               M         call  LCD_Char
                          M 
                      00755         imprimelit '1'  ;6
048A   3031               M         movlw   '1'     ; 
048B   00B2               M         movwf   general_lcd
048C   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
048D   0832               M         movfw general_lcd
048E   24C7               M         call  LCD_Char
                          M 
                      00756         imprimevar d1  ;7
048F   0825               M         movfw   d1      ; 
0490   00B2               M         movwf   general_lcd
0491   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0492   0832               M         movfw general_lcd
0493   24C7               M         call  LCD_Char
                          M 
                      00757         imprimelit ' '  ;8
0494   3020               M         movlw   ' '     ; 
0495   00B2               M         movwf   general_lcd
0496   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
0497   0832               M         movfw general_lcd
0498   24C7               M         call  LCD_Char
                          M 
                      00758         imprimelit '2'  ;9
0499   3032               M         movlw   '2'     ; 
049A   00B2               M         movwf   general_lcd
049B   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
049C   0832               M         movfw general_lcd
049D   24C7               M         call  LCD_Char
                          M 
                      00759         imprimevar d2  ;10
049E   0826               M         movfw   d2      ; 
049F   00B2               M         movwf   general_lcd
04A0   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
04A1   0832               M         movfw general_lcd
04A2   24C7               M         call  LCD_Char
                          M 
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 68


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00760         imprimelit ' '  ;11
04A3   3020               M         movlw   ' '     ; 
04A4   00B2               M         movwf   general_lcd
04A5   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
04A6   0832               M         movfw general_lcd
04A7   24C7               M         call  LCD_Char
                          M 
                      00761         imprimelit '3'  ;12
04A8   3033               M         movlw   '3'     ; 
04A9   00B2               M         movwf   general_lcd
04AA   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
04AB   0832               M         movfw general_lcd
04AC   24C7               M         call  LCD_Char
                          M 
                      00762         imprimevar d3  ;13
04AD   0827               M         movfw   d3      ; 
04AE   00B2               M         movwf   general_lcd
04AF   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
04B0   0832               M         movfw general_lcd
04B1   24C7               M         call  LCD_Char
                          M 
                      00763         imprimelit ' '  ;14
04B2   3020               M         movlw   ' '     ; 
04B3   00B2               M         movwf   general_lcd
04B4   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
04B5   0832               M         movfw general_lcd
04B6   24C7               M         call  LCD_Char
                          M 
                      00764         imprimelit '4'  ;15
04B7   3034               M         movlw   '4'     ; 
04B8   00B2               M         movwf   general_lcd
04B9   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
04BA   0832               M         movfw general_lcd
04BB   24C7               M         call  LCD_Char
                          M 
                      00765         imprimevar d4  ;16
04BC   0828               M         movfw   d4      ; 
04BD   00B2               M         movwf   general_lcd
04BE   14AB               M         bsf     Select,Pin_RS   ; Selección del MODO de DATOS; RS <- "1" 
04BF   0832               M         movfw general_lcd
04C0   24C7               M         call  LCD_Char
                          M 
04C1   0008           00766         return
                      00767         
                      00768 
                      00769 
                      00770 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00771 ;MACROS DE LCD Y RETARDOS DE TIEMPO
                      00772 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                      00773         
                      00774         #INCLUDE "LCD_4Bits_PORTB.inc"  ; Manejador de la LCD.
                      00001 ;------------------------------------------------------------------------------
                      00002 ; Manejador de una LCD empleando comunicación en 4 Bits
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 69


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00003 ;------------------------------------------------------------------------------
                      00004 ;
                      00005         IFNDEF LCD_4Bits_PORTB.h
                      00006                 #INCLUDE "LCD_4Bits_PORTB.h"
                      00007         ENDIF
                      00008         
                      00009 ;-----[ ALTA de VARIABLES LOCALES ]-----
                      00010 ;------------------------------------------------------------------------------ 
                      00011 ;-----[ Subrutinas ]------
                      00012 ; Genera un pulso en la terminal E, para escribir un dato / comando a la LCD
04C2                  00013 PulseE:
04C2   1586           00014         bsf             E                                                       ; E <- "1" 
04C3   2540           00015         call    T1mS                                    ; Retardo de 1ms 
04C4   1186           00016         bcf             E                                                       ; E <- "0"
04C5   2540           00017         call    T1mS                                    ; Retardo de 1ms 
04C6   0008           00018         return                                                  ; Es todo.
                      00019 ;--------------------------------------------------------------------------------------------------
                      00020 ; Envío de un caracter (Comando o Dato) en dos partes [baja y alta] por <RB4:RB7>
                      00021 ;
                      00022 ; Si se antecede esta
04C7                  00023 LCD_Char:
04C7   00AC           00024         movwf           OutCod                                  ; Almacena el (dato / comando)de salida.
                             
04C8   39F0           00025         andlw           0xF0                                            ; Limpia la parte baja [low nybb
                            le]
04C9   0086           00026         movwf           PORT_LCD                                ; Muestra por el PUERTO la parte alta [h
                            igh nybble]
                      00027          
04CA   18AB           00028         btfsc           Select,Pin_RS           ; Prueba la línea "RS" 
04CB   1486           00029         bsf                     RS                                                      ; y envía un dat
                            o
                      00030         
04CC   24C2           00031         call            PulseE                                  ; Pulsa la señal de reloj pra enviar la 
                            información... 
04CD   2540           00032         call            T1mS                                            ; Espera por 1 milisegundo
                      00033 
04CE   0EAC           00034         swapf           OutCod,F                                ; Intercambia las partes alta y baja [lo
                            w - high nybbles]
04CF   082C           00035         movf            OutCod,W                                ; Recupera el código de salida
04D0   39F0           00036         andlw           0xF0                                            ; Limpia la parte baja [low nybb
                            le] 
04D1   0086           00037         movwf           PORT_LCD                                ; Muestra por el PUERTO la parte baja [l
                            ow nybble]
                      00038          
04D2   18AB           00039         btfsc           Select,Pin_RS           ; Prueba la línea "RS"  
04D3   1486           00040         bsf                     RS                                                      ; y envía un dat
                            o
                      00041         
04D4   24C2           00042         call            PulseE                                  ; Pulsa la señal de reloj pra enviar la 
                            información...
04D5   2540           00043         call            T1mS                                            ; Espera por 1 milisegundo
04D6   0008           00044         return                                                                  ; Listo.
                      00045 ;------------------------------------------------------------------------------
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 70


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00046 ; Inicialización del LCD 
04D7                  00047 LCD_Inicio:
                      00048         SelBanco        TRIS_LCD                ; Selecciona el Banco adecuado. 
                          M         IF TRIS_LCD & 0x0100                                                                            
                                                    ; Reg > 0xFF, (Bancos 2 o 3)
                          M                 IF (Banco_Actual & 0x0100) == 0                                 ; 0000 0001 0000 0000
                          M                         bsf STATUS, RP1
                          M                 ENDIF
                          M         ELSE
                          M                 IF (Banco_Actual & 0x0100) == 0x0100            ; 0000 0001 0000 0000
                          M                         bcf STATUS, RP1
                          M                 ENDIF
                          M         ENDIF
                          M         IF TRIS_LCD & 0x0080                                                                            
                                                    ; Reg > 0x7F, (Bancos 1, 2 o 3)
                          M                 IF (Banco_Actual & 0x0080) == 0                                 ; 0000 0000 0000 0000
04D7   1683               M                         bsf STATUS, RP0
                          M                 ENDIF
                          M         ELSE
                          M                 IF (Banco_Actual & 0x0080) == 0x0080            ; 0000 000 1000 0000
                          M                         bcf STATUS, RP0
                          M                 ENDIF
                          M         ENDIF
  00000080                M Banco_Actual SET TRIS_LCD & 0x180                                                       ; Banco_Actual 0
                            000 000X XXXX XXXX
                          M                                                                                                         
                                                                                                    ;                       
04D8   0103           00049         clrw                                                                    ; Todos los bits de este
                             PUERTO son salidas. 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
04D9   0086           00050         movwf                   TRIS_LCD                ; 
                      00051         SelBanco        PORT_LCD                ; Selecciona el Banco adecuado.
                          M         IF PORT_LCD & 0x0100                                                                            
                                                    ; Reg > 0xFF, (Bancos 2 o 3)
                          M                 IF (Banco_Actual & 0x0100) == 0                                 ; 0000 0001 0000 0000
                          M                         bsf STATUS, RP1
                          M                 ENDIF
                          M         ELSE
                          M                 IF (Banco_Actual & 0x0100) == 0x0100            ; 0000 0001 0000 0000
                          M                         bcf STATUS, RP1
                          M                 ENDIF
                          M         ENDIF
                          M         IF PORT_LCD & 0x0080                                                                            
                                                    ; Reg > 0x7F, (Bancos 1, 2 o 3)
                          M                 IF (Banco_Actual & 0x0080) == 0                                 ; 0000 0000 0000 0000
                          M                         bsf STATUS, RP0
                          M                 ENDIF
                          M         ELSE
                          M                 IF (Banco_Actual & 0x0080) == 0x0080            ; 0000 000 1000 0000
04DA   1283               M                         bcf STATUS, RP0
                          M                 ENDIF
                          M         ENDIF
  00000000                M Banco_Actual SET PORT_LCD & 0x180                                                       ; Banco_Actual 0
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 71


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            000 000X XXXX XXXX
                          M                                                                                                         
                                                                                                    ;                       
04DB   0186           00052         clrf                    PORT_LCD                ; Limpia las salidas.
04DC   254C           00053         call                    T10mS                           ; Espera por 10 milisegundos.
                      00054         
04DD   30F0           00055         movlw           0xF0                            ; Máscara para el código. 
04DE   00AB           00056         movwf                   Select                  ; Sin alterar la parte alta [High nybble] 
                      00057  
04DF   3030           00058         movlw                   0x30                            ; Carga del valor inicial 
04E0   0086           00059         movwf                   PORT_LCD                ; Traslado a la LCD  
04E1   24C2           00060         call                    PulseE                  ; Captura del código inicial. 
04E2   2540           00061         call                    T1mS                            ; Espera por 1 milisegundo
04E3   24C2           00062         call                    PulseE                  ; Captura del código inicial, de nuevo.
04E4   2540           00063         call                    T1mS                            ; Espera por 1 milisegundo
04E5   24C2           00064         call                    PulseE                  ; Captura del código inicial, de nuevo.
04E6   1206           00065         bcf                             PORT_LCD,4      ; Ajuste al MODO de 4-bit
04E7   24C2           00066         call                    PulseE                  ; Captura de la información.
                      00067          
04E8   3028           00068         movlw                   0x28                            ; Ajuste al MODO de 4-bit mode, 2 lineas
                             
04E9   24C7           00069         call                    LCD_Char                ; Envío del código
04EA   3008           00070         movlw                   0x08                            ; Código para el APAGADO de la LCD 
04EB   24C7           00071         call                    LCD_Char                ; Envío del código
04EC   3001           00072         movlw                   0x01                            ; Código para la LIMPIEZA de la LCD 
04ED   24C7           00073         call                    LCD_Char                ; Envío del código
04EE   3006           00074         movlw                   0x06                            ; Código para la HABILITACIÓN del CURSOR
                             y AUTO INCREMENTO   
04EF   24C7           00075         call                    LCD_Char                ; Envío del código
04F0   3080           00076         movlw                   0x80                            ; Código para el AJUSTE a CERO de la DIR
                            ECCIÓN de MEMORIA. 
04F1   24C7           00077         call                    LCD_Char                ; Envío del código
04F2   300C           00078         movlw                   0x0C                            ; Código para el ENCENDIDO de la LCD
04F3   24C7           00079         call                    LCD_Char                ; Envío del código
                      00080  
04F4   0008           00081         return                                                          ; Se terminó
                      00082 ;------------------------------------------------------------------------------
                      00083 ; Envío de un COMANDO a la LCD
04F5                  00084 LCD_Com:
04F5                  00085 SendCom:
04F5   10AB           00086         bcf                             Select,Pin_RS   ; Selecciona el MODO de COMANDO; RS <- "0" 
04F6   24C7           00087         call                    LCD_Char                        ; Envía el código (Comando en este caso)
04F7   0008           00088         return
                      00089 ;------------------------------------------------------------------------------
                      00090 ; Envío de un CARACTER (Dato) a la LCD
04F8                  00091 LCD_Caracter:
04F8   14AB           00092         bsf                             Select,Pin_RS   ; Selecciona el MODO de DATO; RS <- "1" 
04F9   24C7           00093         call                    LCD_Char                        ; Envía el código (Dato en este caso)
04FA   0008           00094         return
                      00095 
                      00096 ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                      00097 ; R E V I S A R   subrutinas incorporadas de la versión básica del manejador LCD
                      00098 
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 72


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00099 ; Subrutina "LCD_CodigoCGROM" -----------------------------------------------------------
                      00100 ;
                      00101 ; A partir del carácter ASCII número 127 los códigos de los caracteres definidos en la
                      00102 ; tabla CGROM del LM016L no coinciden con los códigos ASCII. Así por ejemplo, el código
                      00103 ; ASCII de la "Ñ" en la tabla CGRAM del LM016L es EEh.
                      00104 ;
                      00105 ; Esta subrutina convierte los códigos ASCII de la "Ñ", "º" y otros, a códigos CGROM para que
                      00106 ; que puedan ser visualizado en el módulo LM016L.
                      00107 ; 
                      00108 ; Entrada:      En (W) el código ASCII del carácter que se desea visualizar.
                      00109 ; Salida:       En (W) el código definido en la tabla CGROM.
                      00110 
04FB                  00111 LCD_CodigoCGROM:
04FB   00AD           00112         movwf   LCD_Dato                                        ; Guarda el valor del carácter y comprue
                            ba si es
04FC                  00113 LCD_EnheMinuscula:                              ; un carácter especial.
04FC   3CF1           00114         sublw   'ñ'                                                     ; ¿Es la "ñ"?
04FD   1D03           00115         btfss   STATUS,Z
04FE   2D02           00116         goto    LCD_EnheMayuscula       ; No es "ñ".
04FF   30EE           00117         movlw   b'11101110'                             ; Código CGROM de la "ñ".
0500   00AD           00118         movwf   LCD_Dato
0501   2D0F           00119         goto    LCD_FinCGROM
0502                  00120 LCD_EnheMayuscula:
0502   082D           00121         movf    LCD_Dato,W                              ; Recupera el código ASCII de entrada.
0503   3CD1           00122         sublw   'Ñ'                                                     ; ¿Es la "Ñ"?
0504   1D03           00123         btfss   STATUS,Z
0505   2D09           00124         goto    LCD_Grado                                       ; No es "Ñ".
0506   30EE           00125         movlw   b'11101110'                             ; Código CGROM de la "ñ". (No hay símbolo para
0507   00AD           00126         movwf   LCD_Dato                                        ; la "Ñ" mayúscula en la CGROM).
0508   2D0F           00127         goto    LCD_FinCGROM    
0509                  00128 LCD_Grado:
0509   082D           00129         movf    LCD_Dato,W                              ; Recupera el código ASCII de entrada.
050A   3CBA           00130         sublw   'º'                                                     ; ¿Es el símbolo "º"?
050B   1D03           00131         btfss   STATUS,Z
050C   2D0F           00132         goto    LCD_FinCGROM                    ; No es "º".
050D   30DF           00133         movlw   b'11011111'                             ; Código CGROM del símbolo "º".
050E   00AD           00134         movwf   LCD_Dato
050F                  00135 LCD_FinCGROM:
050F   082D           00136         movf    LCD_Dato,W                              ; En (W) el código buscado.
0510   0008           00137         return
                      00138 
                      00139 ; Subrutina "LCD_DosEspaciosBlancos" y "LCD_LineaBlanco" --------------------------------
                      00140 ; Visualiza espacios en blanco.
                      00141 
0511                  00142 LCD_LineaEnBlanco:
0511   3016           00143         movlw           Columnas
0512   2D18           00144         goto            LCD_EnviaBlancos
0513                  00145 LCD_UnEspacioBlanco:
0513   3001           00146         movlw           .1
0514   2D18           00147         goto    LCD_EnviaBlancos
0515                  00148 LCD_DosEspaciosBlancos:
0515   3002           00149         movlw           .2
0516   2D18           00150         goto    LCD_EnviaBlancos
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 73


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0517                  00151 LCD_TresEspaciosBlancos:
0517   3003           00152         movlw           .3
0518                  00153 LCD_EnviaBlancos:
0518   00B0           00154         movwf           LCD_Auxiliar1                                           ; (LCD_Auxiliar1) se uti
                            liza como contador.
0519                  00155 LCD_EnviaOtroBlanco:    
0519   3020           00156         movlw           ' '                                                                             
                                    ; Esto es un espacio en blanco.
051A   24F8           00157         call            LCD_Caracter                                            ; Visualiza tanto espaci
                            os en blanco como se
051B   0BB0           00158         decfsz  LCD_Auxiliar1,F                                 ; haya cargado en (LCD_Auxiliar1).
051C   2D19           00159         goto            LCD_EnviaOtroBlanco
051D   0008           00160         return
                      00161         
                      00162 ;--------------------------------------------------------------------------------------------------
                      00163 ; Subrutinas "LCD_ByteCompleto" y "LCD_Byte" --------------------------------------------
                      00164 ; Subrutina "LCD_ByteCompleto", visualiza el byte que almacena el registro W en el
                      00165 ; lugar actual de la pantalla. Por ejemplo, si (W)=b'10101110' visualiza "AE".
                      00166 ;
                      00167 ; Subrutina "LCD_Byte" igual que la anterior, pero en caso de que el nibble alto sea cero 
                      00168 ; visualiza en su lugar un espacio en blanco. Por ejemplo si (W)=b'10101110' visualiza "AE"
                      00169 ; y si (W)=b'00001110', visualiza " E" (un espacio blanco delante).
                      00170 ;
                      00171 ; Utilizan la subrutina "LCD_Nibble" que se analiza más adelante.
                      00172 ;
051E                  00173 LCD_Byte:
051E   00B1           00174         movwf           LCD_Auxiliar2                           ; Guarda el valor de entrada.
051F   39F0           00175         andlw           b'11110000'                                     ; Analiza si el nibble alto es c
                            ero.
0520   1D03           00176         btfss           STATUS,Z                                                ; Si es cero lo apaga.
0521   2D26           00177         goto            LCD_VisualizaAlto               ; No es cero y lo visualiza.
0522   3020           00178         movlw           ' '                                                                     ; Visual
                            iza un espacio en blanco.
0523   24F8           00179         call            LCD_Caracter                            ;
0524   2D28           00180         goto            LCD_VisualizaBajo               ;
                      00181 
0525                  00182 LCD_ByteCompleto:
0525   00B1           00183         movwf           LCD_Auxiliar2                           ; Guarda el valor de entrada.
0526                  00184 LCD_VisualizaAlto:
0526   0E31           00185         swapf           LCD_Auxiliar2,W                 ; Pone el nibble alto en la parte baja.
0527   2529           00186         call            LCD_Nibble                                      ; Lo visualiza.
0528                  00187 LCD_VisualizaBajo:
0528   0831           00188         movf            LCD_Auxiliar2,W                 ; Repite el proceso con el nibble bajo.
                      00189 
                      00190 ; Subrutina "LCD_Nibble" ----------------------------------------------------------------
                      00191 ;
                      00192 ; Visualiza en el lugar actual de la pantalla, el valor hexadecimal que almacena en el nibble
                      00193 ; bajo del registro W. El nibble alto de W no es tenido en cuenta. Ejemplos:
                      00194 ; - Si (W)=b'01010110', se visualizará "6". 
                      00195 ; - Si (W)=b'10101110', se visualizará "E". 
                      00196 ;
0529                  00197 LCD_Nibble:
0529   390F           00198         andlw           b'00001111'                                                     ; Se queda con l
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 74


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            a parte baja.
052A   00B0           00199         movwf           LCD_Auxiliar1                                           ; Lo guarda.
052B   3C09           00200         sublw           0x09                                                                            
                            ; Comprueba si hay que representarlo con letra.
052C   1C03           00201         btfss           STATUS,C        
052D   2D31           00202         goto            LCD_EnviaByteLetra
052E   0830           00203         movf            LCD_Auxiliar1,W
052F   3E30           00204         addlw           '0'                                                                             
                                    ; El número se pasa a carácter ASCII sumándole
0530   2D33           00205         goto            LCD_FinVisualizaDigito  ; el ASCII del cero y lo visualiza.
0531                  00206 LCD_EnviaByteLetra:
0531   0830           00207         movf            LCD_Auxiliar1,W
0532   3E37           00208         addlw           'A'-0x0A                                                                ; Sí, po
                            r tanto, se le suma el ASCII de la 'A'.
0533                  00209 LCD_FinVisualizaDigito:
0533   2CF8           00210         goto            LCD_Caracter                                            ; Y visualiza el carácte
                            r. Se hace con un "goto"
                      00211                                                                                                         
                                                            ; para no sobrecargar la pila.
                      00212 ;--------------------------------------------------------------------------------------------------
                      00213 ;-----[ BAJA de VARIABLES LOCALES ]-----
                      00214 ;------------------------------------------------------------------------------
                      00215 ;-----[ SUBRUTINAS LOCALES a ESTE PAQUETE ]-----
                      00216 ;------------------------------------------------------------------------------
                      00775         #INCLUDE "Tiempo.inc"                                           ; Retardos y temporizados.
                      00001 ;--------------------------------------------------------------------------------------------------
                      00002 ; ------[Subrutinas para el Manejo de Tiempos Exactos]------
                      00003 ;
                      00004 ; Se selecciona la opción para las pruebas necesarias, locales o externas.
                      00005 ; Para el uso común de estas subrutinas se habilitan los contadores [1, 2 y 3] asociándolos a las
                      00006 ; variables temporales [Temp0, Temp1 y Temp2], que deberían haberse creado previamente.
                      00007 ;
                      00008 ;     Retardos de Tiempo Disponibles:
                      00009 ;
                      00010 ;               T1uS
                      00011 ;               T10uS
                      00012 ;                       T100uS
                      00013 ;                       T1mS
                      00014 ;                       T10mS
                      00015 ;                       T100mS
                      00016 ;                       T1S
                      00017 ;                       T10S
                      00018 
                      00019         CBLOCK                                                  ; Sustituir por variables TEMPorales
  0000003A            00020                 Contador1       
  0000003B            00021                 Contador2       
  0000003C            00022                 Contador3                       
                      00023         ENDC
                      00024 
                      00025 ;Contador1 EQU VarTmp1
                      00026 ;Contador2 EQU VarTmp2
                      00027 ;Contador3 EQU VarTmp3
                      00028 ;---------------------------------
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 75


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00029 ;                       ORG             0x000
                      00030                         
                      00031 ;                       call    T10uS           ; Desde aquí se cuenta el tiempo que se consumirá.
                      00032 ;                       call    T100mS  ;
                      00033 ;                       call  T1uS
                      00034 ;                       call  T1uS
                      00035                                                               ; 
                      00036 ;                       goto    $       ; AQUÍ se inserta un "breakpoint", para contabilizar el tiempo d
                            e ejecución
                      00037                                       ; en el "StopWatch"
                      00038 ;--------------------------------------------------------------------------------------------------
                      00039 ;------[Retardo de 1 microsegundo]------
                      00040 ;--------------------------------------------------------------------------------------------------
0534                  00041 T1uS:
0534   0000           00042                         nop                                             ; "A" [1]
                      00043                         
0535   0008           00044                         return                          ; "B" [2]
                      00045 ;--------------------------------------------------------------------------------------------------
                      00046 ;TEORÍA de FUNCIONAMIENTO:
                      00047 ;
                      00048 ;--> Los números entre paréntesis indican los ciclos consumidos. Recuerde que un ciclo de máquina
                      00049 ; es igual a 200 nS.
                      00050 ;--> Existen CICLOS que se repiten un cierto numero de veces.
                      00051 ;--> En algunos casos habrá CICLOS ANIDADOS, es decir, CICLOS dentro de CICLOS.
                      00052 ;
                      00053 ;Para esta subrutina el cálculo de los ciclos queda de la siguiente manera:
                      00054 ;
                      00055 ;                 [2]                 -->  2    {Instrucción "call" en la "llamada" o "invocación"}
                      00056 ;       +       [A]                 -->  1        {Instrucción "nop" [A]}
                      00057 ;   +   [2]                 -->  2    {Instrucción "return" [B]}
                      00058 ; -----------------------------------                  
                      00059 ;       T O T A L           -->  5 Ciclos
                      00060 ;                                5 * 200 nS = 1000 nS = 1 uS
                      00061 ;--------------------------------------------------------------------------------------------------
                      00062 ;------[Retardo de 10 microsegundos]------
                      00063 ;--------------------------------------------------------------------------------------------------
                      00064                         
0536                  00065 T10uS:                                                                                          ; "A" [2
                            ] de la instrucción call que le invoca 
0536   300F           00066                         movlw           0x0F                                            ; "B" [1] de la 
                            instrucción "movlw"
0537   00BA           00067                         movwf           Contador1                               ; "C" [1] de la instrucc
                            ión "movwf"
                      00068 
0538   0BBA           00069                         decfsz  Contador1, F            ; "D" [2] si salta, [1] si continúa
0539   2D38           00070                         goto            $ - 1                                           ; "E" [2]
                      00071 
053A   0008           00072                         return                                                                  ; "F" [2
                            ]
                      00073 ;--------------------------------------------------------------------------------------------------
                      00074 ;TEORÍA de FUNCIONAMIENTO:
                      00075 ;
                      00076 ;--> Los números entre paréntesis indican los ciclos consumidos. Recuerde que un ciclo de máquina
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 76


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00077 ; es igual a 200 nS.
                      00078 ;--> Existen CICLOS que se repiten un cierto numero de veces.
                      00079 ;--> En algunos casos habrá CICLOS ANIDADOS, es decir, CICLOS dentro de CICLOS.
                      00080 ;
                      00081 ;Para esta subrutina el cálculo de los ciclos queda de la siguiente manera:
                      00082 ;
                      00083 ;                       [2] + [1] + [1]     -->  4    {Instrucciones "call", "movlw", "movwf"}
                      00084 ;       +       14 * [1 + 2]        --> 42        {Repetición del ciclo "decfsz", "goto $ - 1"}
                      00085 ;   +   [2] + [2]           -->  4    {Del salto de "decfsz" y "return"}
                      00086 ; -----------------------------------                  
                      00087 ;       T O T A L           --> 50 Ciclos
                      00088 ;                               50 * 200 nS = 10,000 nS = 10 uS
                      00089 ;--------------------------------------------------------------------------------------------------
                      00090 ;------[Retardo de 100 microsegundos]------
                      00091 ;--------------------------------------------------------------------------------------------------
                      00092 
053B                  00093 T100uS:                                                                                         ; "A" [2
                            ] de la instrucción call que le invoca 
053B   30A5           00094                         movlw           0xA5                                            ; "B" [1] 
053C   00BA           00095                         movwf           Contador1                               ; "C" [1]
                      00096 
053D   0BBA           00097                         decfsz  Contador1, F            ; "D" [2] si salta, [1] si continúa
053E   2D3D           00098                         goto            $ - 1                                           ; "E" [2]
                      00099 
053F   0008           00100                         return                                                                  ; "F" [2
                            ]
                      00101                         
                      00102 ;--------[ TEORÍA de FUNCIONAMIENTO---------------------------------------------------------------------
                            ---------------
                      00103 ;  Para N igual a 1:
                      00104 ; A[2] --> B[1] --> C[1] --> D[2] --> F[2]                                                              
                      00105 ;                       8 Ciclos, 1.6 uSegs.
                      00106 ;
                      00107 ;  Para N igual a 2:
                      00108 ; A[2] --> B[1] --> C[1] --> D[1] --> E[2] --> D[2] --> F[2]
                      00109 ;                       11 Ciclos, 2.2 uSegs.
                      00110 ;
                      00111 ;  Para N igual a 3:
                      00112 ; A[2] --> B[1] --> C[1] --> D[1] --> E[2] --> D[1] --> E[2] --> D[2] --> F[2]
                      00113 ;                       14 Ciclos, 2.8 uSegs.
                      00114 ;
                      00115 ;  Para N igual a 4:
                      00116 ; A[2] --> B[1] --> C[1] --> D[1] --> E[2] --> D[1] --> E[2] --> D[1] --> E[2]--> D[2] --> F[2]
                      00117 ;                       17 Ciclos, 3.4 uSegs.
                      00118 ;
                      00119 ; Secuencia de ejecución para cada valor de "N". Cada columna representa una etapa.
                      00120 ; Se indica la instrución que se ejecuta y los ciclos que consume.
                      00121 ; 
                      00122 ;  1     2         3             4
                      00123 ;
                      00124 ; A-2   A-2       A-2           A-2                                                             * Número
                             de ciclos fijo: 2
                      00125 ; B-1   B-1       B-1           B-1                                                                     
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 77


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            * Número de ciclos fijo: 1
                      00126 ; C-1   C-1       C-1           C-1                                                                     
                            * Número de ciclos fijo: 1
                      00127 ; D-2   D-1 D-2   D-1 D-1 D-2   D-1 D-1 D-1 D-2                 * (N-1)*1 + 2
                      00128 ;       E-2       E-2 E-2       E-2 E-2 E-2                                     * (N-1)*2
                      00129 ; F-2   F-2       F-2           F-2                                                                     
                            * Número de ciclos fijo: 2
                      00130 ;
                      00131 ;  En general, para cualquier valor "N":
                      00132 ;
                      00133 ; Ciclos consumidos = 2 + 1 + 1 + 1*(N-1) + 2 + 2*(N-1) + 2 
                      00134 ; Ciclos consumidos = 8 + (N-1) + 2*(N-1) 
                      00135 ; Ciclos consumidos = 8 + 3*(N-1) 
                      00136 ; Ciclos consumidos = 8 + 3*N - 3 
                      00137 ; Ciclos consumidos = 5 + 3*N
                      00138 ;
                      00139 ; Por ejemplo, para N=255, ciclos consumidos = 770 (154 uSeg).
                      00140 ; Para un retardo de 10 uSeg se resuelve: 50 = 5 + 3*N, de donde N = 15 (0x0F) .
                      00141 ;  y para 100 uSeg, se resuelve: 500 = 5 + 3*N, de donde N = 165 (0xA5).
                      00142 ;-------------------------------------------------------------------------------------------------------
                            ---------------
                      00143 
                      00144 ;-------------------------------------------------------------------------------------------------------
                            ---------------
                      00145 ;------[Retardo de 1 milisegundo]------
                      00146 ;-------------------------------------------------------------------------------------------------------
                            ---------------
0540                  00147 T1mS:
0540   3006           00148                         movlw     .6                            ; 1 | Número de repeticiones externas (B
                            )
0541   00BA           00149         movwf     Contador1                     ; 1 |
                      00150                 
0542   30CF           00151 L01:    movlw     .207                          ; 1 | Número de repeticiones internas (A)
0543   00BB           00152         movwf     Contador2                     ; 1 |
                      00153                 
0544   0064           00154 L02:    clrwdt                                  ; 1 | Limpia registro WDT.
0545   0BBB           00155         decfsz    Contador2,1           ; 1 + (1) ¿Se agotó? (A)
0546   2D44           00156         goto      L02                                           ; 2 no, regresa.
0547   0BBA           00157         decfsz    Contador1,1           ; 1 + (1) ¿Se agotó? (B)
0548   2D42           00158         goto      L01                                           ; 2 no, regresa
                      00159                 
0549   2D4A           00160                                 goto            $+1                     ; Retardo de 2 ciclos.
054A   0064           00161                                 clrwdt                                  ; Retardo de un ciclo. 
                      00162 
054B   0008           00163         return                                  ; 2+2 Concluído.
                      00164 ;-------------------------------------------------------------------------------------------------------
                            ---------------
                      00165 ;------[Retardo de 10 milisegundos]------
                      00166 ;-------------------------------------------------------------------------------------------------------
                            ---------------
054C                  00167 T10mS:
054C   3037           00168                         movlw     .55                           ; 1 | Número de repeticiones externas (B
                            )
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 78


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

054D   00BA           00169         movwf     Contador1                     ; 1 |
                      00170                 
054E   30B5           00171 L03:    movlw     .181                          ; 1 | Número de repeticiones internas (A)
054F   00BB           00172         movwf     Contador2                     ; 1 |
                      00173                 
0550   0064           00174 L04:    clrwdt                                  ; 1 | Limpia registro WDT.
0551   0064           00175                                 clrwdt                                  ; 1 | Limpia registro WDT.
0552   0BBB           00176         decfsz    Contador2,1           ; 1 + (1) ¿Se agotó? (A)
0553   2D50           00177         goto      L04                                           ; 2 no, regresa.
0554   0BBA           00178         decfsz    Contador1,1           ; 1 + (1) ¿Se agotó? (B)
0555   2D4E           00179         goto      L03                                           ; 2 no, regresa
                      00180                 
0556   0008           00181         return                                  ; 2+2 Concluído.
                      00182 ;-------------------------------------------------------------------------------------------------------
                            ---------------
                      00183 ;------[Retardo de 100 milisegundos]------
                      00184 ;-------------------------------------------------------------------------------------------------------
                            ---------------
0557                  00185 T100mS:
0557   30EF           00186                                 movlw     .239                          ; 1 Ajustar el número de repetic
                            iones (B)
0558   00BA           00187         movwf     Contador1             ; 1 |
                      00188                 
0559   30E8           00189 L05:    movlw     .232                          ; 1 Ajustar el número de repeticiones (A)
055A   00BB           00190         movwf     Contador2             ; 1 |
                      00191         
055B   0064           00192 L06:    clrwdt                                  ; 1 Limpiar WDT
055C   2D5D           00193                         goto            $ + 1           ; 2 Ciclos, retardo
055D   2D5E           00194                         goto      $ + 1                 ; 2 Ciclos, retardo
055E   0064           00195                                 clrwdt                                  ; 1 Ciclo, retardo
                      00196 
055F   0BBB           00197         decfsz    Contador2,1           ; 1 + (1) ¿Se agotó el tiempo? (A)
0560   2D5B           00198         goto      L06                                           ; 2 no, Regresa
                      00199                 
0561   0BBA           00200         decfsz    Contador1, 1          ; 1 + (1) ¿Se agotó el tiempo? (B)
0562   2D59           00201         goto      L05                                           ; 2 no, Regresa
                      00202                 
0563   2D64           00203                         goto      $ + 1                 ; 2 Ciclos, retardo
0564   2D65           00204                         goto            $ + 1           ; 2 Ciclos, retardo
0565   2D66           00205                                 goto      $ + 1                 ; 2 Ciclos, retardo
0566   0064           00206                                 clrwdt                                  ; 1 Ciclo, retardo
                      00207 
0567   0008           00208         return                                  ; 2+2 Terminado
                      00209 ;-------------------------------------------------------------------------------------------------------
                            ---------------
                      00210 ;------[Retardo de 1 Segundo]------
                      00211 ;-------------------------------------------------------------------------------------------------------
                            ---------------
0568                  00212 T1S:
0568   30A5           00213                         movlw     .165                          ; 1 Ajustar el número de repeticiones (C
                            )
0569   00BA           00214         movwf     Contador1             ; 1 |
056A                  00215 L07:            
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 79


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

056A   3029           00216                         movlw     .41                           ; 1 Ajustar el número de repeticiones (B
                            )
056B   00BB           00217         movwf     Contador2             ; 1 |
056C                  00218 L08:            
056C   3093           00219                         movlw     .147                          ; 1 Ajustar el número de repeticiones (A
                            )
056D   00BC           00220         movwf     Contador3             ; 1 |
056E                  00221 L09:            
056E   0064           00222                         clrwdt                                  ; 1 Limpiar el WDT
056F   0064           00223         clrwdt                                  ; 1 Retardo de un ciclo
0570   0BBC           00224         decfsz    Contador3,1           ; 1 + (1) ¿Se agotó el tiempo? (A)
0571   2D6E           00225         goto      L09                                           ; 2 no, Regresa
0572   0BBB           00226         decfsz    Contador2,1           ; 1 + (1) ¿Se agotó el tiempo? (B)
0573   2D6C           00227         goto      L08                                           ; 2 no, Regresa
0574   0BBA           00228         decfsz    Contador1,1           ; 1 + (1) ¿Se agotó el tiempo? (C)
0575   2D6A           00229         goto      L07                                           ; 2 no, Regresa
                      00230                 
0576   0008           00231         return                                  ; 2+2 Concluido.
                      00232 ;-------------------------------------------------------------------------------------------------------
                            ---------------
                      00233 ;------[Retardo de 10 Segundos]------
                      00234 ;-------------------------------------------------------------------------------------------------------
                            ---------------
0577                  00235 T10S:
0577   30B7           00236                         movlw     .183                          ; 1 | Ajusta el número de repeticiones (
                            C)
0578   00BA           00237         movwf     Contador1             ; 1 |
0579                  00238 L10:            
0579   30BE           00239                                 movlw     .190                          ; 1 | Ajusta el número de repeti
                            ciones (B)
057A   00BB           00240         movwf     Contador2             ; 1 |
057B                  00241 L11:            
057B   30EF           00242                                 movlw     .239                          ; 1 | Ajusta el número de repeti
                            ciones (A)
057C   00BC           00243         movwf     Contador3             ; 1 |
057D                  00244 L12:            
057D   0064           00245                         clrwdt                                  ; 1 | Limpia el "WDT"
057E   2D7F           00246                         goto            $ + 1           ; 2 | Retardo de dos ciclos 
                      00247 
057F   0BBC           00248         decfsz    Contador3,1           ; 1 + (1) is the time over? (A)
0580   2D7D           00249         goto      L12                                           ; 2 no, loop
                      00250                 
0581   0BBB           00251         decfsz    Contador2,1           ; 1 + (1) ¿Se consumió el tiempo? (B)
0582   2D7B           00252         goto      L11                                           ; 2  NO, regresa
                      00253                 
0583   0BBA           00254         decfsz    Contador1,1           ; 1 + (1) ¿Se consumió el tiempo? (C)
0584   2D79           00255         goto      L10                                           ; 2 NO, regresa
                      00256                 
0585   2D86           00257                         goto            $ + 1           ; 2 ciclos de retardo
0586   0064           00258                                 clrwdt                                  ; 1 ciclo de retardo
                      00259 
0587   0008           00260         return                                  ; 2+2 Terminado
                      00261 ;-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 80


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            _-_-_-_-_-_-_-_
                      00262 
                      00263 ;                       END
                      00776 
                      00777 ;=============================================================================
                      00778 ;====================( SUBRUTINAS EEPROM + otras)================================================
                      00779 ;================================================================================
                      00780 ;---------------------------------------------------------
0588                  00781 LIMPIA_LCD:
                      00782         LCD_Clear
0588   3001               M                                                         movlw   E_CLEAR_DISPLAY         ;
0589   24F5               M                                                         call    SendCom                                 
                                    ; Tarda 1.52 mS
058A   0008           00783         return
                      00784 ;---------------------------------------------------------
058B                  00785 ESCRIBE_CLAVES_EEPROM:
                      00786         SaltaSiVarIgualConst usuario,'1',clave_usuario1
058B   3031               M         movlw   '1'             ; Se emplea la resta para la comparación.
058C   0222               M         subwf   usuario,W       ; (W)=(Registro1_m1) - Constante_m1
058D   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
058E   2D9C               M                 goto    clave_usuario1  ; Si Z=1 son iguales, por lo tanto salta  
                      00787         SaltaSiVarIgualConst usuario,'2',clave_usuario2
058F   3032               M         movlw   '2'             ; Se emplea la resta para la comparación.
0590   0222               M         subwf   usuario,W       ; (W)=(Registro1_m1) - Constante_m1
0591   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
0592   2DB9               M                 goto    clave_usuario2  ; Si Z=1 son iguales, por lo tanto salta  
                      00788         SaltaSiVarIgualConst usuario,'3',clave_usuario3
0593   3033               M         movlw   '3'             ; Se emplea la resta para la comparación.
0594   0222               M         subwf   usuario,W       ; (W)=(Registro1_m1) - Constante_m1
0595   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
0596   2DD6               M                 goto    clave_usuario3  ; Si Z=1 son iguales, por lo tanto salta  
                      00789         SaltaSiVarIgualConst usuario,'A',clave_usuarioA
0597   3041               M         movlw   'A'             ; Se emplea la resta para la comparación.
0598   0222               M         subwf   usuario,W       ; (W)=(Registro1_m1) - Constante_m1
0599   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
059A   2DF3               M                 goto    clave_usuarioA  ; Si Z=1 son iguales, por lo tanto salta  
059B   2E0F           00790         goto final_claveA
059C                  00791 clave_usuario1:
059C   0825           00792         movfw d1
                      00793         banco2
059D   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
059E   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
059F   008C           00794         movwf   EEDATA          ;DATO = d1
05A0   3000           00795         movlw .0
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05A1   008D           00796         movwf   EEADR           ;DIRECCION EEPROM=0
05A2   27C0           00797         call EEWR
                      00798         ;-----------------------
05A3   0826           00799         movfw d2
                      00800         banco2
05A4   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
05A5   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 81


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05A6   008C           00801         movwf   EEDATA          ;DATO = d2
05A7   3001           00802         movlw .1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05A8   008D           00803         movwf   EEADR           ;DIRECCION EEPROM=0
05A9   27C0           00804         call EEWR
                      00805         ;-----------------------
05AA   0827           00806         movfw d3
                      00807         banco2
05AB   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
05AC   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05AD   008C           00808         movwf   EEDATA          ;DATO = d3
05AE   3002           00809         movlw .2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05AF   008D           00810         movwf   EEADR           ;DIRECCION EEPROM=0
05B0   27C0           00811         call EEWR
                      00812         ;-----------------------
05B1   0828           00813         movfw d4
                      00814         banco2
05B2   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
05B3   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05B4   008C           00815         movwf   EEDATA          ;DATO = d4
05B5   3003           00816         movlw .3
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05B6   008D           00817         movwf   EEADR           ;DIRECCION EEPROM=0
05B7   27C0           00818         call EEWR
                      00819         ;-----------------------
05B8   2E0F           00820         goto final_claveA   
05B9                  00821 clave_usuario2:
05B9   0825           00822         movfw d1
                      00823         banco2
05BA   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
05BB   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05BC   008C           00824         movwf   EEDATA          ;DATO = d1
05BD   3004           00825         movlw .4
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05BE   008D           00826         movwf   EEADR           ;DIRECCION EEPROM=0
05BF   27C0           00827         call EEWR
                      00828         ;-----------------------
05C0   0826           00829         movfw d2
                      00830         banco2
05C1   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
05C2   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05C3   008C           00831         movwf   EEDATA          ;DATO = d2
05C4   3005           00832         movlw .5
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05C5   008D           00833         movwf   EEADR           ;DIRECCION EEPROM=0
05C6   27C0           00834         call EEWR
                      00835         ;-----------------------
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 82


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05C7   0827           00836         movfw d3
                      00837         banco2
05C8   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
05C9   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05CA   008C           00838         movwf   EEDATA          ;DATO = d3
05CB   3006           00839         movlw .6
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05CC   008D           00840         movwf   EEADR           ;DIRECCION EEPROM=0
05CD   27C0           00841         call EEWR
                      00842         ;-----------------------
05CE   0828           00843         movfw d4
                      00844         banco2
05CF   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
05D0   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05D1   008C           00845         movwf   EEDATA          ;DATO = d4
05D2   3007           00846         movlw .7
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05D3   008D           00847         movwf   EEADR           ;DIRECCION EEPROM=0
05D4   27C0           00848         call EEWR
                      00849         ;-----------------------
05D5   2E0F           00850         goto final_claveA   
05D6                  00851 clave_usuario3:
05D6   0825           00852         movfw d1
                      00853         banco2
05D7   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
05D8   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05D9   008C           00854         movwf   EEDATA          ;DATO = d1
05DA   3008           00855         movlw .8
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05DB   008D           00856         movwf   EEADR           ;DIRECCION EEPROM=0
05DC   27C0           00857         call EEWR
                      00858         ;-----------------------
05DD   0826           00859         movfw d2
                      00860         banco2
05DE   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
05DF   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05E0   008C           00861         movwf   EEDATA          ;DATO = d2
05E1   3009           00862         movlw .9
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05E2   008D           00863         movwf   EEADR           ;DIRECCION EEPROM=0
05E3   27C0           00864         call EEWR
                      00865         ;-----------------------
05E4   0827           00866         movfw d3
                      00867         banco2
05E5   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
05E6   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05E7   008C           00868         movwf   EEDATA          ;DATO = d3
05E8   300A           00869         movlw .10
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 83


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05E9   008D           00870         movwf   EEADR           ;DIRECCION EEPROM=0
05EA   27C0           00871         call EEWR
                      00872         ;-----------------------
05EB   0828           00873         movfw d4
                      00874         banco2
05EC   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
05ED   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05EE   008C           00875         movwf   EEDATA          ;DATO = d4
05EF   300B           00876         movlw .11
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05F0   008D           00877         movwf   EEADR           ;DIRECCION EEPROM=0
05F1   27C0           00878         call EEWR
                      00879         ;-----------------------
05F2   2E0F           00880         goto final_claveA   
05F3                  00881 clave_usuarioA:
05F3   0825           00882         movfw d1
                      00883         banco2
05F4   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
05F5   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05F6   008C           00884         movwf   EEDATA          ;DATO = d1
05F7   3014           00885         movlw .20
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05F8   008D           00886         movwf   EEADR           ;DIRECCION EEPROM=0
05F9   27C0           00887         call EEWR
                      00888         ;-----------------------
05FA   0826           00889         movfw d2
                      00890         banco2
05FB   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
05FC   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05FD   008C           00891         movwf   EEDATA          ;DATO = d2
05FE   3015           00892         movlw .21
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05FF   008D           00893         movwf   EEADR           ;DIRECCION EEPROM=0
0600   27C0           00894         call EEWR
                      00895         ;-----------------------
0601   0827           00896         movfw d3
                      00897         banco2
0602   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0603   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0604   008C           00898         movwf   EEDATA          ;DATO = d3
0605   3016           00899         movlw .22
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0606   008D           00900         movwf   EEADR           ;DIRECCION EEPROM=0
0607   27C0           00901         call EEWR
                      00902         ;-----------------------
0608   0828           00903         movfw d4
                      00904         banco2
0609   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 84


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

060A   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
060B   008C           00905         movwf   EEDATA          ;DATO = d4
060C   3017           00906         movlw .23
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
060D   008D           00907         movwf   EEADR           ;DIRECCION EEPROM=0
060E   27C0           00908         call EEWR
                      00909         ;-----------------------
060F                  00910 final_claveA:    
060F   0008           00911         return
                      00912 ;---------------------------------------------------------
0610                  00913 ESCRIBE_SALAS_EEPROM:
                      00914         SaltaSiVarIgualConst usuario,'1',Asala_usuario1
0610   3031               M         movlw   '1'             ; Se emplea la resta para la comparación.
0611   0222               M         subwf   usuario,W       ; (W)=(Registro1_m1) - Constante_m1
0612   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
0613   2E1D               M                 goto    Asala_usuario1  ; Si Z=1 son iguales, por lo tanto salta  
                      00915         SaltaSiVarIgualConst usuario,'2',Asala_usuario2
0614   3032               M         movlw   '2'             ; Se emplea la resta para la comparación.
0615   0222               M         subwf   usuario,W       ; (W)=(Registro1_m1) - Constante_m1
0616   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
0617   2E3A               M                 goto    Asala_usuario2  ; Si Z=1 son iguales, por lo tanto salta  
                      00916         SaltaSiVarIgualConst usuario,'3',Asala_usuario3
0618   3033               M         movlw   '3'             ; Se emplea la resta para la comparación.
0619   0222               M         subwf   usuario,W       ; (W)=(Registro1_m1) - Constante_m1
061A   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
061B   2E57               M                 goto    Asala_usuario3  ; Si Z=1 son iguales, por lo tanto salta  
061C   2E73           00917         goto final_salaA
061D                  00918 Asala_usuario1:
061D   0825           00919         movfw d1
                      00920         banco2
061E   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
061F   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0620   008C           00921         movwf   EEDATA          ;DATO = d1
0621   3018           00922         movlw .24
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0622   008D           00923         movwf   EEADR           ;DIRECCION EEPROM=0
0623   27C0           00924         call EEWR
                      00925         ;-----------------------
0624   0826           00926         movfw d2
                      00927         banco2
0625   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0626   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0627   008C           00928         movwf   EEDATA          ;DATO = d2
0628   3019           00929         movlw .25
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0629   008D           00930         movwf   EEADR           ;DIRECCION EEPROM=0
062A   27C0           00931         call EEWR
                      00932         ;-----------------------
062B   0827           00933         movfw d3
                      00934         banco2
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 85


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

062C   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
062D   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
062E   008C           00935         movwf   EEDATA          ;DATO = d3
062F   301A           00936         movlw .26
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0630   008D           00937         movwf   EEADR           ;DIRECCION EEPROM=0
0631   27C0           00938         call EEWR
                      00939         ;-----------------------
0632   0828           00940         movfw d4
                      00941         banco2
0633   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0634   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0635   008C           00942         movwf   EEDATA          ;DATO = d4
0636   301B           00943         movlw .27
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0637   008D           00944         movwf   EEADR           ;DIRECCION EEPROM=0
0638   27C0           00945         call EEWR
                      00946         ;-----------------------
0639   2E73           00947         goto final_salaA   
063A                  00948 Asala_usuario2:
063A   0825           00949         movfw d1
                      00950         banco2
063B   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
063C   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
063D   008C           00951         movwf   EEDATA          ;DATO = d1
063E   301C           00952         movlw .28
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
063F   008D           00953         movwf   EEADR           ;DIRECCION EEPROM=0
0640   27C0           00954         call EEWR
                      00955         ;-----------------------
0641   0826           00956         movfw d2
                      00957         banco2
0642   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0643   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0644   008C           00958         movwf   EEDATA          ;DATO = d2
0645   301D           00959         movlw .29
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0646   008D           00960         movwf   EEADR           ;DIRECCION EEPROM=0
0647   27C0           00961         call EEWR
                      00962         ;-----------------------
0648   0827           00963         movfw d3
                      00964         banco2
0649   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
064A   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
064B   008C           00965         movwf   EEDATA          ;DATO = d3
064C   301E           00966         movlw .30
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
064D   008D           00967         movwf   EEADR           ;DIRECCION EEPROM=0
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 86


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

064E   27C0           00968         call EEWR
                      00969         ;-----------------------
064F   0828           00970         movfw d4
                      00971         banco2
0650   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0651   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0652   008C           00972         movwf   EEDATA          ;DATO = d4
0653   301F           00973         movlw .31
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0654   008D           00974         movwf   EEADR           ;DIRECCION EEPROM=0
0655   27C0           00975         call EEWR
                      00976         ;-----------------------
0656   2E73           00977         goto final_salaA   
0657                  00978 Asala_usuario3:
0657   0825           00979         movfw d1
                      00980         banco2
0658   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0659   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
065A   008C           00981         movwf   EEDATA          ;DATO = d1
065B   3020           00982         movlw .32
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
065C   008D           00983         movwf   EEADR           ;DIRECCION EEPROM=0
065D   27C0           00984         call EEWR
                      00985         ;-----------------------
065E   0826           00986         movfw d2
                      00987         banco2
065F   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0660   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0661   008C           00988         movwf   EEDATA          ;DATO = d2
0662   3021           00989         movlw .33
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0663   008D           00990         movwf   EEADR           ;DIRECCION EEPROM=0
0664   27C0           00991         call EEWR
                      00992         ;-----------------------
0665   0827           00993         movfw d3
                      00994         banco2
0666   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0667   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0668   008C           00995         movwf   EEDATA          ;DATO = d3
0669   3022           00996         movlw .34
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
066A   008D           00997         movwf   EEADR           ;DIRECCION EEPROM=0
066B   27C0           00998         call EEWR
                      00999         ;-----------------------
066C   0828           01000         movfw d4
                      01001         banco2
066D   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
066E   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 87


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

066F   008C           01002         movwf   EEDATA          ;DATO = d4
0670   3023           01003         movlw .35
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0671   008D           01004         movwf   EEADR           ;DIRECCION EEPROM=0
0672   27C0           01005         call EEWR
                      01006         ;-----------------------        
0673                  01007 final_salaA:    
0673   0008           01008         return  
                      01009 ;---------------------------------------------------------
0674                  01010 LEE_SALAS_EEPROM:
                      01011         SaltaSiVarIgualConst usuario,'1',Bsala_usuario1
0674   3031               M         movlw   '1'             ; Se emplea la resta para la comparación.
0675   0222               M         subwf   usuario,W       ; (W)=(Registro1_m1) - Constante_m1
0676   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
0677   2E81               M                 goto    Bsala_usuario1  ; Si Z=1 son iguales, por lo tanto salta  
                      01012         SaltaSiVarIgualConst usuario,'2',Bsala_usuario2
0678   3032               M         movlw   '2'             ; Se emplea la resta para la comparación.
0679   0222               M         subwf   usuario,W       ; (W)=(Registro1_m1) - Constante_m1
067A   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
067B   2E9A               M                 goto    Bsala_usuario2  ; Si Z=1 son iguales, por lo tanto salta  
                      01013         SaltaSiVarIgualConst usuario,'3',Bsala_usuario3
067C   3033               M         movlw   '3'             ; Se emplea la resta para la comparación.
067D   0222               M         subwf   usuario,W       ; (W)=(Registro1_m1) - Constante_m1
067E   1903               M         btfsc   STATUS,Z                ; ¿Z=0?, ¿son distintos? si son distintos sal de la macro
067F   2EB3               M                 goto    Bsala_usuario3  ; Si Z=1 son iguales, por lo tanto salta  
0680   2ECB           01014         goto final_salaB
0681                  01015 Bsala_usuario1:
                      01016         ;-------------- SE LEE EL LA DIRECCION 24 EN LA EEPROM ------------
                      01017         banco2
0681   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0682   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
0683   3018           01018         movlw  .24 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0684   008D           01019         movwf   EEADR           ;DIRECCION EEPROM=44
0685   27CF           01020         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
0686   00A5           01021         movwf d1
                      01022         ;-------------- SE LEE EL LA DIRECCION 25 EN LA EEPROM ------------
                      01023         banco2
0687   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0688   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
0689   3019           01024         movlw  .25 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
068A   008D           01025         movwf   EEADR           ;DIRECCION EEPROM=44
068B   27CF           01026         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
068C   00A6           01027         movwf d2
                      01028         ;-------------- SE LEE EL LA DIRECCION 26 EN LA EEPROM ------------
                      01029         banco2
068D   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
068E   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
068F   301A           01030         movlw  .26 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0690   008D           01031         movwf   EEADR           ;DIRECCION EEPROM=44
0691   27CF           01032         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 88


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0692   00A7           01033         movwf d3
                      01034         ;-------------- SE LEE EL LA DIRECCION 27 EN LA EEPROM ------------
                      01035         banco2
0693   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0694   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
0695   301B           01036         movlw  .27 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0696   008D           01037         movwf   EEADR           ;DIRECCION EEPROM=44
0697   27CF           01038         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
0698   00A8           01039         movwf d4
0699   2ECB           01040         goto final_salaB   
069A                  01041 Bsala_usuario2:
                      01042         ;-------------- SE LEE EL LA DIRECCION 24 EN LA EEPROM ------------
                      01043         banco2
069A   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
069B   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
069C   301C           01044         movlw  .28 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
069D   008D           01045         movwf   EEADR           ;DIRECCION EEPROM=44
069E   27CF           01046         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
069F   00A5           01047         movwf d1
                      01048         ;-------------- SE LEE EL LA DIRECCION 25 EN LA EEPROM ------------
                      01049         banco2
06A0   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
06A1   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
06A2   301D           01050         movlw  .29 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
06A3   008D           01051         movwf   EEADR           ;DIRECCION EEPROM=44
06A4   27CF           01052         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
06A5   00A6           01053         movwf d2
                      01054         ;-------------- SE LEE EL LA DIRECCION 26 EN LA EEPROM ------------
                      01055         banco2
06A6   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
06A7   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
06A8   301E           01056         movlw  .30 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
06A9   008D           01057         movwf   EEADR           ;DIRECCION EEPROM=44
06AA   27CF           01058         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
06AB   00A7           01059         movwf d3
                      01060         ;-------------- SE LEE EL LA DIRECCION 27 EN LA EEPROM ------------
                      01061         banco2
06AC   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
06AD   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
06AE   301F           01062         movlw  .31 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
06AF   008D           01063         movwf   EEADR           ;DIRECCION EEPROM=44
06B0   27CF           01064         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
06B1   00A8           01065         movwf d4
06B2   2ECB           01066         goto final_salaB   
06B3                  01067 Bsala_usuario3:
                      01068         ;-------------- SE LEE EL LA DIRECCION 24 EN LA EEPROM ------------
                      01069         banco2
06B3   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 89


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

06B4   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
06B5   3020           01070         movlw  .32 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
06B6   008D           01071         movwf   EEADR           ;DIRECCION EEPROM=44
06B7   27CF           01072         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
06B8   00A5           01073         movwf d1
                      01074         ;-------------- SE LEE EL LA DIRECCION 25 EN LA EEPROM ------------
                      01075         banco2
06B9   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
06BA   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
06BB   3021           01076         movlw  .33 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
06BC   008D           01077         movwf   EEADR           ;DIRECCION EEPROM=44
06BD   27CF           01078         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
06BE   00A6           01079         movwf d2
                      01080         ;-------------- SE LEE EL LA DIRECCION 26 EN LA EEPROM ------------
                      01081         banco2
06BF   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
06C0   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
06C1   3022           01082         movlw  .34 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
06C2   008D           01083         movwf   EEADR           ;DIRECCION EEPROM=44
06C3   27CF           01084         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
06C4   00A7           01085         movwf d3
                      01086         ;-------------- SE LEE EL LA DIRECCION 27 EN LA EEPROM ------------
                      01087         banco2
06C5   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
06C6   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
06C7   3023           01088         movlw  .35 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
06C8   008D           01089         movwf   EEADR           ;DIRECCION EEPROM=44
06C9   27CF           01090         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
06CA   00A8           01091         movwf d4
06CB                  01092 final_salaB:    
06CB   0008           01093         return
                      01094 ;---------------------------------------------------------
06CC                  01095 VERIFICA_ACCESO: 
06CC   2674           01096         call LEE_SALAS_EEPROM
                      01097         SaltaSiVarDiferenteConst sala,'1',vsala2
06CD   3031               M         movlw   '1'             ; Se emplea la resta para la comparación.
06CE   0221               M         subwf   sala,W          ; (W)=(Registro1_m2) - Constante_m2
06CF   1D03               M         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
06D0   2ED8               M         goto    vsala2                  ; Si Z=0 son diferentes, por lo tanto salta
                      01098         SaltaSiVarDiferenteConst d1,'S',vsala2
06D1   3053               M         movlw   'S'             ; Se emplea la resta para la comparación.
06D2   0225               M         subwf   d1,W            ; (W)=(Registro1_m2) - Constante_m2
06D3   1D03               M         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
06D4   2ED8               M         goto    vsala2                  ; Si Z=0 son diferentes, por lo tanto salta
06D5   20B9           01099         call menu1
06D6   2568           01100         call T1S
06D7   2F02           01101         goto reinicia_var
06D8                  01102 vsala2:
                      01103         SaltaSiVarDiferenteConst sala,'2',vsala3
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 90


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

06D8   3032               M         movlw   '2'             ; Se emplea la resta para la comparación.
06D9   0221               M         subwf   sala,W          ; (W)=(Registro1_m2) - Constante_m2
06DA   1D03               M         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
06DB   2EE3               M         goto    vsala3                  ; Si Z=0 son diferentes, por lo tanto salta
                      01104         SaltaSiVarDiferenteConst d2,'S',vsala3
06DC   3053               M         movlw   'S'             ; Se emplea la resta para la comparación.
06DD   0226               M         subwf   d2,W            ; (W)=(Registro1_m2) - Constante_m2
06DE   1D03               M         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
06DF   2EE3               M         goto    vsala3                  ; Si Z=0 son diferentes, por lo tanto salta
06E0   20B9           01105         call menu1
06E1   2568           01106         call T1S
06E2   2F02           01107         goto reinicia_var
06E3                  01108 vsala3:
                      01109         SaltaSiVarDiferenteConst sala,'3',vsala4
06E3   3033               M         movlw   '3'             ; Se emplea la resta para la comparación.
06E4   0221               M         subwf   sala,W          ; (W)=(Registro1_m2) - Constante_m2
06E5   1D03               M         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
06E6   2EEE               M         goto    vsala4                  ; Si Z=0 son diferentes, por lo tanto salta
                      01110         SaltaSiVarDiferenteConst d3,'S',vsala4
06E7   3053               M         movlw   'S'             ; Se emplea la resta para la comparación.
06E8   0227               M         subwf   d3,W            ; (W)=(Registro1_m2) - Constante_m2
06E9   1D03               M         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
06EA   2EEE               M         goto    vsala4                  ; Si Z=0 son diferentes, por lo tanto salta
06EB   20B9           01111         call menu1
06EC   2568           01112         call T1S
06ED   2F02           01113         goto reinicia_var
06EE                  01114 vsala4:
                      01115         SaltaSiVarDiferenteConst sala,'4',vsalaadmin
06EE   3034               M         movlw   '4'             ; Se emplea la resta para la comparación.
06EF   0221               M         subwf   sala,W          ; (W)=(Registro1_m2) - Constante_m2
06F0   1D03               M         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
06F1   2EF9               M         goto    vsalaadmin              ; Si Z=0 son diferentes, por lo tanto salta
                      01116         SaltaSiVarDiferenteConst d4,'S',vsalaadmin
06F2   3053               M         movlw   'S'             ; Se emplea la resta para la comparación.
06F3   0228               M         subwf   d4,W            ; (W)=(Registro1_m2) - Constante_m2
06F4   1D03               M         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
06F5   2EF9               M         goto    vsalaadmin              ; Si Z=0 son diferentes, por lo tanto salta
06F6   20B9           01117         call menu1
06F7   2568           01118         call T1S
06F8   2F02           01119         goto reinicia_var
06F9                  01120 vsalaadmin:
                      01121         SaltaSiVarDiferenteConst usuario,'A',vsalarechaza
06F9   3041               M         movlw   'A'             ; Se emplea la resta para la comparación.
06FA   0222               M         subwf   usuario,W       ; (W)=(Registro1_m2) - Constante_m2
06FB   1D03               M         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
06FC   2F00               M         goto    vsalarechaza            ; Si Z=0 son diferentes, por lo tanto salta
06FD   20B9           01122         call menu1
06FE   2568           01123         call T1S
06FF   2F02           01124         goto reinicia_var
0700                  01125 vsalarechaza:
0700   20CA           01126         call menu2
0701   2568           01127         call T1S        
0702                  01128 reinicia_var:
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 91


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0702   20FE           01129         call menu0
0703   01A0           01130         clrf menu
0704   01A5           01131     clrf d1       
0705   01A6           01132     clrf d2
0706   01A7           01133     clrf d3
0707   01A8           01134     clrf d4
0708   01A2           01135     clrf usuario
0709   01A1           01136     clrf sala   
070A   0008           01137         return
                      01138 ;---------------------------------------------------------
070B                  01139 VALIDA_ADMIN:
                      01140         ;-------------- SE LEE EL LA DIRECCION 24 EN LA EEPROM ------------
                      01141         banco2
070B   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
070C   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
070D   3000           01142         movlw  .0
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
070E   008D           01143         movwf   EEADR           ;DIRECCION EEPROM=44
070F   27CF           01144         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
0710   00B4           01145         movwf aux_eeprom1
                      01146         ;-------------- SE LEE EL LA DIRECCION 24 EN LA EEPROM ------------
                      01147         banco2
0711   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0712   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
0713   3001           01148         movlw  .1 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0714   008D           01149         movwf   EEADR           ;DIRECCION EEPROM=44
0715   27CF           01150         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
0716   00B5           01151         movwf aux_eeprom2
                      01152         ;-------------- SE LEE EL LA DIRECCION 24 EN LA EEPROM ------------
                      01153         banco2
0717   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0718   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
0719   3002           01154         movlw  .2 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
071A   008D           01155         movwf   EEADR           ;DIRECCION EEPROM=44
071B   27CF           01156         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
071C   00B6           01157         movwf aux_eeprom3
                      01158         ;-------------- SE LEE EL LA DIRECCION 24 EN LA EEPROM ------------
                      01159         banco2
071D   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
071E   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
071F   3003           01160         movlw  .3 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0720   008D           01161         movwf   EEADR           ;DIRECCION EEPROM=44
0721   27CF           01162         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
0722   00B7           01163         movwf aux_eeprom4
                      01164         ;------------------------------------------------------------
                      01165         SaltaSiVarDiferenteVar d1,aux_eeprom1,A_user2
0723   0834               M         movfw   aux_eeprom1     ; Se emplea la resta para la comparación.
0724   0225               M         subwf   d1,W            ; (W)=(Registro1_m8) - Constante_m8
0725   1D03               M         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
0726   2F36               M         goto    A_user2                 ; Si Z=0 son diferentes, por lo tanto salta
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 92


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01166         SaltaSiVarDiferenteVar d2,aux_eeprom2,A_user2
0727   0835               M         movfw   aux_eeprom2     ; Se emplea la resta para la comparación.
0728   0226               M         subwf   d2,W            ; (W)=(Registro1_m8) - Constante_m8
0729   1D03               M         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
072A   2F36               M         goto    A_user2                 ; Si Z=0 son diferentes, por lo tanto salta
                      01167         SaltaSiVarDiferenteVar d3,aux_eeprom3,A_user2
072B   0836               M         movfw   aux_eeprom3     ; Se emplea la resta para la comparación.
072C   0227               M         subwf   d3,W            ; (W)=(Registro1_m8) - Constante_m8
072D   1D03               M         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
072E   2F36               M         goto    A_user2                 ; Si Z=0 son diferentes, por lo tanto salta
                      01168         SaltaSiVarDiferenteVar d4,aux_eeprom4,A_user2
072F   0837               M         movfw   aux_eeprom4     ; Se emplea la resta para la comparación.
0730   0228               M         subwf   d4,W            ; (W)=(Registro1_m8) - Constante_m8
0731   1D03               M         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
0732   2F36               M         goto    A_user2                 ; Si Z=0 son diferentes, por lo tanto salta
                      01169         carga usuario,'1'
0733   3031               M         movlw   '1'     ; Toma el valor de la literal
0734   00A2               M         movwf   usuario ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
0735   2FBB           01170         goto A_final_users
0736                  01171 A_user2:
                      01172         ;-------------- SE LEE EL LA DIRECCION 24 EN LA EEPROM ------------
                      01173         banco2
0736   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0737   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
0738   3004           01174         movlw  .4 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0739   008D           01175         movwf   EEADR           ;DIRECCION EEPROM=44
073A   27CF           01176         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
073B   00B4           01177         movwf aux_eeprom1
                      01178         ;-------------- SE LEE EL LA DIRECCION 24 EN LA EEPROM ------------
                      01179         banco2
073C   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
073D   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
073E   3005           01180         movlw  .5 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
073F   008D           01181         movwf   EEADR           ;DIRECCION EEPROM=44
0740   27CF           01182         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
0741   00B5           01183         movwf aux_eeprom2
                      01184         ;-------------- SE LEE EL LA DIRECCION 24 EN LA EEPROM ------------
                      01185         banco2
0742   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0743   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
0744   3006           01186         movlw  .6 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0745   008D           01187         movwf   EEADR           ;DIRECCION EEPROM=44
0746   27CF           01188         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
0747   00B6           01189         movwf aux_eeprom3
                      01190         ;-------------- SE LEE EL LA DIRECCION 24 EN LA EEPROM ------------
                      01191         banco2
0748   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0749   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
074A   3007           01192         movlw  .7 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 93


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

074B   008D           01193         movwf   EEADR           ;DIRECCION EEPROM=44
074C   27CF           01194         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
074D   00B7           01195         movwf aux_eeprom4
                      01196         ;------------------------------------------------------------
                      01197         SaltaSiVarDiferenteVar d1,aux_eeprom1,A_user3
074E   0834               M         movfw   aux_eeprom1     ; Se emplea la resta para la comparación.
074F   0225               M         subwf   d1,W            ; (W)=(Registro1_m8) - Constante_m8
0750   1D03               M         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
0751   2F61               M         goto    A_user3                 ; Si Z=0 son diferentes, por lo tanto salta
                      01198         SaltaSiVarDiferenteVar d2,aux_eeprom2,A_user3
0752   0835               M         movfw   aux_eeprom2     ; Se emplea la resta para la comparación.
0753   0226               M         subwf   d2,W            ; (W)=(Registro1_m8) - Constante_m8
0754   1D03               M         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
0755   2F61               M         goto    A_user3                 ; Si Z=0 son diferentes, por lo tanto salta
                      01199         SaltaSiVarDiferenteVar d3,aux_eeprom3,A_user3
0756   0836               M         movfw   aux_eeprom3     ; Se emplea la resta para la comparación.
0757   0227               M         subwf   d3,W            ; (W)=(Registro1_m8) - Constante_m8
0758   1D03               M         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
0759   2F61               M         goto    A_user3                 ; Si Z=0 son diferentes, por lo tanto salta
                      01200         SaltaSiVarDiferenteVar d4,aux_eeprom4,A_user3
075A   0837               M         movfw   aux_eeprom4     ; Se emplea la resta para la comparación.
075B   0228               M         subwf   d4,W            ; (W)=(Registro1_m8) - Constante_m8
075C   1D03               M         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
075D   2F61               M         goto    A_user3                 ; Si Z=0 son diferentes, por lo tanto salta
                      01201         carga usuario,'2'
075E   3032               M         movlw   '2'     ; Toma el valor de la literal
075F   00A2               M         movwf   usuario ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
0760   2FBB           01202         goto A_final_users
0761                  01203 A_user3:
                      01204         ;-------------- SE LEE EL LA DIRECCION 24 EN LA EEPROM ------------
                      01205         banco2
0761   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0762   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
0763   3008           01206         movlw  .8 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0764   008D           01207         movwf   EEADR           ;DIRECCION EEPROM=44
0765   27CF           01208         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
0766   00B4           01209         movwf aux_eeprom1
                      01210         ;-------------- SE LEE EL LA DIRECCION 24 EN LA EEPROM ------------
                      01211         banco2
0767   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0768   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
0769   3009           01212         movlw  .9 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
076A   008D           01213         movwf   EEADR           ;DIRECCION EEPROM=44
076B   27CF           01214         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
076C   00B5           01215         movwf aux_eeprom2
                      01216         ;-------------- SE LEE EL LA DIRECCION 24 EN LA EEPROM ------------
                      01217         banco2
076D   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
076E   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
076F   300A           01218         movlw  .10 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 94


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0770   008D           01219         movwf   EEADR           ;DIRECCION EEPROM=44
0771   27CF           01220         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
0772   00B6           01221         movwf aux_eeprom3
                      01222         ;-------------- SE LEE EL LA DIRECCION 24 EN LA EEPROM ------------
                      01223         banco2
0773   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0774   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
0775   300B           01224         movlw  .11 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0776   008D           01225         movwf   EEADR           ;DIRECCION EEPROM=44
0777   27CF           01226         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
0778   00B7           01227         movwf aux_eeprom4
                      01228         ;------------------------------------------------------------
                      01229         SaltaSiVarDiferenteVar d1,aux_eeprom1,A_userA
0779   0834               M         movfw   aux_eeprom1     ; Se emplea la resta para la comparación.
077A   0225               M         subwf   d1,W            ; (W)=(Registro1_m8) - Constante_m8
077B   1D03               M         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
077C   2F8C               M         goto    A_userA                 ; Si Z=0 son diferentes, por lo tanto salta
                      01230         SaltaSiVarDiferenteVar d2,aux_eeprom2,A_userA
077D   0835               M         movfw   aux_eeprom2     ; Se emplea la resta para la comparación.
077E   0226               M         subwf   d2,W            ; (W)=(Registro1_m8) - Constante_m8
077F   1D03               M         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
0780   2F8C               M         goto    A_userA                 ; Si Z=0 son diferentes, por lo tanto salta
                      01231         SaltaSiVarDiferenteVar d3,aux_eeprom3,A_userA
0781   0836               M         movfw   aux_eeprom3     ; Se emplea la resta para la comparación.
0782   0227               M         subwf   d3,W            ; (W)=(Registro1_m8) - Constante_m8
0783   1D03               M         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
0784   2F8C               M         goto    A_userA                 ; Si Z=0 son diferentes, por lo tanto salta
                      01232         SaltaSiVarDiferenteVar d4,aux_eeprom4,A_userA
0785   0837               M         movfw   aux_eeprom4     ; Se emplea la resta para la comparación.
0786   0228               M         subwf   d4,W            ; (W)=(Registro1_m8) - Constante_m8
0787   1D03               M         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
0788   2F8C               M         goto    A_userA                 ; Si Z=0 son diferentes, por lo tanto salta
                      01233         carga usuario,'3'
0789   3033               M         movlw   '3'     ; Toma el valor de la literal
078A   00A2               M         movwf   usuario ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
078B   2FBB           01234         goto A_final_users
078C                  01235 A_userA:
                      01236         ;-------------- SE LEE EL LA DIRECCION 24 EN LA EEPROM ------------
                      01237         banco2
078C   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
078D   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
078E   3014           01238         movlw  .20 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
078F   008D           01239         movwf   EEADR           ;DIRECCION EEPROM=44
0790   27CF           01240         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
0791   00B4           01241         movwf aux_eeprom1
                      01242         ;-------------- SE LEE EL LA DIRECCION 24 EN LA EEPROM ------------
                      01243         banco2
0792   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0793   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
0794   3015           01244         movlw  .21 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 95


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0795   008D           01245         movwf   EEADR           ;DIRECCION EEPROM=44
0796   27CF           01246         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
0797   00B5           01247         movwf aux_eeprom2
                      01248         ;-------------- SE LEE EL LA DIRECCION 24 EN LA EEPROM ------------
                      01249         banco2
0798   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
0799   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
079A   3016           01250         movlw  .22 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
079B   008D           01251         movwf   EEADR           ;DIRECCION EEPROM=44
079C   27CF           01252         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
079D   00B6           01253         movwf aux_eeprom3
                      01254         ;-------------- SE LEE EL LA DIRECCION 24 EN LA EEPROM ------------
                      01255         banco2
079E   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
079F   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
07A0   3017           01256         movlw  .23 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
07A1   008D           01257         movwf   EEADR           ;DIRECCION EEPROM=44
07A2   27CF           01258         call    EERD            ;LEE EN EEPROM, RESULTADO EN W
07A3   00B7           01259         movwf aux_eeprom4
                      01260         ;------------------------------------------------------------
                      01261         SaltaSiVarDiferenteVar d1,aux_eeprom1,A_Rechaza
07A4   0834               M         movfw   aux_eeprom1     ; Se emplea la resta para la comparación.
07A5   0225               M         subwf   d1,W            ; (W)=(Registro1_m8) - Constante_m8
07A6   1D03               M         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
07A7   2FB9               M         goto    A_Rechaza               ; Si Z=0 son diferentes, por lo tanto salta
                      01262         SaltaSiVarDiferenteVar d2,aux_eeprom2,A_Rechaza
07A8   0835               M         movfw   aux_eeprom2     ; Se emplea la resta para la comparación.
07A9   0226               M         subwf   d2,W            ; (W)=(Registro1_m8) - Constante_m8
07AA   1D03               M         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
07AB   2FB9               M         goto    A_Rechaza               ; Si Z=0 son diferentes, por lo tanto salta
                      01263         SaltaSiVarDiferenteVar d3,aux_eeprom3,A_Rechaza
07AC   0836               M         movfw   aux_eeprom3     ; Se emplea la resta para la comparación.
07AD   0227               M         subwf   d3,W            ; (W)=(Registro1_m8) - Constante_m8
07AE   1D03               M         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
07AF   2FB9               M         goto    A_Rechaza               ; Si Z=0 son diferentes, por lo tanto salta
                      01264         SaltaSiVarDiferenteVar d4,aux_eeprom4,A_Rechaza
07B0   0837               M         movfw   aux_eeprom4     ; Se emplea la resta para la comparación.
07B1   0228               M         subwf   d4,W            ; (W)=(Registro1_m8) - Constante_m8
07B2   1D03               M         btfss   STATUS,Z                ; ¿Z=1?, ¿Son iguales? si son iguales sal de la macro
07B3   2FB9               M         goto    A_Rechaza               ; Si Z=0 son diferentes, por lo tanto salta
                      01265         carga usuario,'A'
07B4   3041               M         movlw   'A'     ; Toma el valor de la literal
07B5   00A2               M         movwf   usuario ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
                      01266         carga llave,1
07B6   3001               M         movlw   1       ; Toma el valor de la literal
07B7   00B9               M         movwf   llave   ; Trasládalo a la FSR, puede ser un Puerto, Variable, Etc.
07B8   2FBB           01267         goto A_final_users
07B9                  01268 A_Rechaza:
07B9   01A2           01269         clrf usuario
07BA   01B9           01270         clrf llave
07BB                  01271 A_final_users:
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 96


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

07BB   01B4           01272         clrf aux_eeprom1
07BC   01B5           01273         clrf aux_eeprom2
07BD   01B6           01274         clrf aux_eeprom3
07BE   01B7           01275         clrf aux_eeprom4
Warning[203]: Found opcode in column 1. (return)
07BF   0008           01276 return
                      01277 
07C0                  01278 EEWR:   
                      01279         banco3                  ;HABILITA EL BANCO 3
07C0   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
07C1   1683               M         bsf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
07C2   138C           01280         BCF     EECON1,EEPGD    ;APUNTA HACIA EEPROM DE DATOS           
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
07C3   150C           01281         BSF     EECON1,WREN     ;HABILITA ESCRITURA EN EEPROM
07C4   3055           01282         MOVLW   H'55'           ;PREPARA SECUENCIA DE SEGURIDAD
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
07C5   008D           01283         MOVWF   EECON2          ;ESCRIBE PRIMER DATO DE SECUENCIA
07C6   30AA           01284         MOVLW   H'AA'           ;SEGUNDO DATO
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
07C7   008D           01285         MOVWF   EECON2          ;ESCRIBE SEGUNDO DATO DE SECUENCIA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
07C8   148C           01286         BSF     EECON1,WR       ;INICIA CICLO DE ESCRITURA
07C9                  01287 EW:     
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
07C9   188C           01288         BTFSC   EECON1,WR       ;MALLA PARA ESPERAR AL FINAL DEL CICLO
07CA   2FC9           01289     GOTO    EW              ;SI WR=1, CICLO DE ESCRITURA AUN NO TERMINA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
07CB   110C           01290         BCF     EECON1, WREN    ;DESHABILITA ESCRITURA
                      01291         banco0
07CC   1303               M         bcf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
07CD   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
07CE   0008           01292         RETURN
                      01293 
07CF                  01294 EERD:   
                      01295         banco3
07CF   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
07D0   1683               M         bsf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
07D1   138C           01296         BCF     EECON1,EEPGD            ;APUNTA HACIA EEPROM DE DATOS           
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
07D2   140C           01297         BSF     EECON1,RD               ;HABILITA EL BIT 0 (RD) DEL REGISTRO EECON1             
                      01298         banco2
07D3   1703               M         bsf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
07D4   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
07D5   080C           01299         MOVF    EEDATA,W                ;TRANSFIERE EL DATO EN EEDATA A W,
                      01300         banco0
07D6   1303               M         bcf STATUS,RP1 ;El BIT 6 del Registro 3 se pone a "0"
07D7   1283               M         bcf STATUS,RP0 ;El BIT 5 del Registro 3 se pone a "1"
07D8   0008           01301         RETURN 
                      01302 ;==========================================================
                      01303         END
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 97


SYMBOL TABLE
  LABEL                             VALUE 

ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000006
ADCS1                             00000007
ADCS2                             00000006
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
A_Rechaza                         000007B9
A_final_users                     000007BB
A_user2                           00000736
A_user3                           00000761
A_userA                           0000078C
Adigito1                          000002AE
Adigito2                          000002B2
Adigito3                          000002B6
Adigito4                          000002BA
Afinaldigitos                     000002F2
Afinalsinod1                      00000204
Afinalsinod2                      0000020E
Afinalsinod3                      00000218
Afinalsinod4                      00000222
Afinalsmenu                       000001BB
Asala_usuario1                    0000061D
Asala_usuario2                    0000063A
Asala_usuario3                    00000657
Asid1                             00000202
Asid2                             0000020C
Asid3                             00000216
Asid4                             00000220
Asmenu1                           000001B0
Asmenu2                           000001AC
Asmenu3                           000001B6
BCLIE                             00000003
BCLIF                             00000003
BF                                00000000
BIT_B_CURSOR_BLINK                (1<<0)
BIT_B_CURSOR_NO_BLINK             0
BIT_C_CURSOR_OFF                  0
BIT_C_CURSOR_ON                   (1<<1)
BIT_DL_DATALENGTH_4               0
BIT_DL_DATALENGTH_8               (1<<4)
BIT_D_DISPLAY_OFF                 0
BIT_D_DISPLAY_ON                  (1<<2)
BIT_F_FONT_5_10                   (1<<2)
BIT_F_FONT_5_8                    0
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 98


SYMBOL TABLE
  LABEL                             VALUE 

BIT_ID_DECREMENT_CURSOR           0
BIT_ID_INCREMENT_CURSOR           (1<<1)
BIT_N_DISP_LINES_1                0
BIT_N_DISP_LINES_2                (1<<3)
BIT_RL_SHIFT_LEFT                 0
BIT_RL_SHIFT_RIGHT                (1<<2)
BIT_SC_SHIFT_CURSOR               0
BIT_SC_SHIFT_DISPLAY              (1<<3)
BIT_S_AUTOSCROLL_OFF              0
BIT_S_AUTOSCROLL_ON               (1<<0)
BRGH                              00000002
Banco_Actual                      00000000
Bdigito1                          000001CB
Bdigito2                          000001CF
Bdigito3                          000001D3
Bdigito4                          000001D7
Bfinaldigitos                     000001E5
Bsala_usuario1                    00000681
Bsala_usuario2                    0000069A
Bsala_usuario3                    000006B3
C                                 00000000
C1INV                             00000004
C1OUT                             00000006
C2INV                             00000005
C2OUT                             00000007
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1                             00000015
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2                             0000001B
CCPR2H                            0000001C
CCPR2L                            0000001B
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
CIS                               00000003
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 99


SYMBOL TABLE
  LABEL                             VALUE 

CKE                               00000006
CKP                               00000004
CM0                               00000000
CM1                               00000001
CM2                               00000002
CMCON                             0000009C
CMIE                              00000006
CMIF                              00000006
CREN                              00000004
CSRC                              00000007
CVR0                              00000000
CVR1                              00000001
CVR2                              00000002
CVR3                              00000003
CVRCON                            0000009D
CVREN                             00000007
CVROE                             00000006
CVRR                              00000005
Cdigito1                          00000302
Cdigito2                          00000306
Cdigito3                          0000030A
Cdigito4                          0000030E
Cfinaldigitos                     00000317
Cfinalsmenu                       0000029E
Columnas                          16
Contador1                         0000003A
Contador2                         0000003B
Contador3                         0000003C
Csmenu#                           00000296
Csmenu1                           0000028C
Csmenu2                           0000028C
Csmenu3                           0000028C
Csmenu4                           0000028C
D                                 00000005
DATA_ADDRESS                      00000005
DC                                00000001
D_A                               00000005
D_NOT_A                           00000005
Detecta_sensor                    
Dfinalsmenu                       00000276
Dsmenu#                           00000271
Dsmenu1                           00000244
Dsmenu2                           00000244
Dsmenu3                           00000244
DsmenuA                           0000025B
E                                 PORTB,3
EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 100


SYMBOL TABLE
  LABEL                             VALUE 

EEIF                              00000004
EEPGD                             00000007
EERD                              000007CF
EEWR                              000007C0
ESCRIBE_CLAVES_EEPROM             0000058B
ESCRIBE_SALAS_EEPROM              00000610
EW                                000007C9
E_CLEAR_DISPLAY                   0x01
E_CURSOR_DISPLAY_SHIFT            0x10
E_DISPLAY_ON_OFF_CTRL             0x08
E_ENTRY_MODE_SET                  0x04
E_FUNCTION_SET                    0x20
E_LCD_CURSOR_OFF                  0x00
E_LCD_CURSOR_ON                   0x02
E_LCD_CURSOR_ON_BLINK             0x03
E_RETURN_HOME                     0x02
E_SET_CGRAM_ADDR                  0x40
E_SET_DDRAM_ADDR                  0x80
F                                 00000001
FALSE                             0
FERR                              00000002
FSR                               00000004
Ffinalsmenu                       0000022C
Fsmenu#                           00000223
Fsmenu1                           000001FB
Fsmenu2                           00000205
Fsmenu3                           0000020F
Fsmenu4                           00000219
GCEN                              00000007
GIE                               00000007
GO                                00000002
GO_DONE                           00000002
GO_NOT_DONE                       00000002
Graba_Tecla                       
Hileras                           2
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
Inicio                            00000156
L01                               00000542
L02                               00000544
L03                               0000054E
L04                               00000550
L05                               00000559
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 101


SYMBOL TABLE
  LABEL                             VALUE 

L06                               0000055B
L07                               0000056A
L08                               0000056C
L09                               0000056E
L10                               00000579
L11                               0000057B
L12                               0000057D
LCD_4Bits_PORTB.h                 
LCD_Autoscroll_Off                
LCD_Autoscroll_On                 
LCD_Auxiliar1                     00000030
LCD_Auxiliar2                     00000031
LCD_Byte                          0000051E
LCD_ByteCompleto                  00000525
LCD_Caracter                      000004F8
LCD_Char                          000004C7
LCD_Clear                         
LCD_CodigoCGROM                   000004FB
LCD_Com                           000004F5
LCD_Cursor                        
LCD_Cursor_Left                   
LCD_Cursor_Right                  
LCD_Dato                          0000002D
LCD_DosEspaciosBlancos            00000515
LCD_EnheMayuscula                 00000502
LCD_EnheMinuscula                 000004FC
LCD_EnviaBlancos                  00000518
LCD_EnviaByteLetra                00000531
LCD_EnviaOtroBlanco               00000519
LCD_FinCGROM                      0000050F
LCD_FinVisualizaDigito            00000533
LCD_GoTo                          
LCD_Grado                         00000509
LCD_GuardaDato                    0000002E
LCD_GuardaTRISB                   0000002F
LCD_Home                          
LCD_Inicio                        000004D7
LCD_Init                          
LCD_LineaEnBlanco                 00000511
LCD_Nibble                        00000529
LCD_Off                           
LCD_On                            
LCD_Scroll_Left                   
LCD_Scroll_Right                  
LCD_TresEspaciosBlancos           00000517
LCD_UnEspacioBlanco               00000513
LCD_VisualizaAlto                 00000526
LCD_VisualizaBajo                 00000528
LEE_SALAS_EEPROM                  00000674
LIMPIA_LCD                        00000588
Line1                             000000DA
Line2                             000000EC
Line3                             00000095
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 102


SYMBOL TABLE
  LABEL                             VALUE 

Line4                             000000A7
Line5                             00000053
Line6                             00000065
Line7                             00000011
Line8                             00000023
Load                              
Mess1                             00000104
Mess2                             00000112
Mess3                             000000C0
Mess4                             000000D0
Mess5                             0000007D
Mess6                             0000008B
Mess7                             0000003B
Mess8                             00000049
Multiplexea_tecla                 
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
NOT_BOR                           00000000
NOT_DONE                          00000002
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
NoTecla                           00000319
OBF                               00000006
OERR                              00000001
OPTION_REG                        00000081
OutCod                            0000002C
P                                 00000004
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PEIE                              00000006
PEN                               00000002
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PORTD                             00000008
PORTE                             00000009
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 103


SYMBOL TABLE
  LABEL                             VALUE 

PORT_LCD                          00000006
PR2                               00000092
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSPIE                             00000007
PSPIF                             00000007
PSPMODE                           00000004
Pin_RS                            1
Point                             0000002A
PulseE                            000004C2
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
RD0                               00000000
RD1                               00000001
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 104


SYMBOL TABLE
  LABEL                             VALUE 

RD7                               00000007
RE0                               00000000
RE1                               00000001
RE2                               00000002
READ_EEPROM                       
READ_WRITE                        00000002
RP0                               00000005
RP1                               00000006
RS                                PORTB,1
RSEN                              00000001
RW                                PORTB,2
RX9                               00000006
RX9D                              00000000
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
SEN                               00000000
SMP                               00000007
SPBRG                             00000099
SPEN                              00000007
SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPCON2                           00000091
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
SYNC                              00000004
SaltaSiVarDiferenteConst          
SaltaSiVarDiferenteVar            
SaltaSiVarIgualConst              
SaltaSiVarIgualVar                
SaltaSiVarMayorConst              
SaltaSiVarMayorIgualConst         
SaltaSiVarMayorIgualVar           
SaltaSiVarMayorVar                
SaltaSiVarMenorConst              
SaltaSiVarMenorIgualConst         
SaltaSiVarMenorIgualVar           
SaltaSiVarMenorVar                
SelBanco                          
Select                            0000002B
SendCom                           000004F5
T0CS                              00000005
T0IE                              00000005
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 105


SYMBOL TABLE
  LABEL                             VALUE 

T0IF                              00000002
T0SE                              00000004
T100mS                            00000557
T100uS                            0000053B
T10S                              00000577
T10mS                             0000054C
T10uS                             00000536
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T1S                               00000568
T1SYNC                            00000002
T1mS                              00000540
T1uS                              00000534
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TMR1                              0000000E
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 106


SYMBOL TABLE
  LABEL                             VALUE 

TRISC                             00000087
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000088
TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
TRISD7                            00000007
TRISE                             00000089
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRIS_LCD                          00000086
TRMT                              00000001
TRUE                              1
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
Tecla#                            00000365
Tecla0                            00000360
Tecla1                            0000031F
Tecla2                            00000324
Tecla3                            00000329
Tecla4                            00000333
Tecla5                            00000338
Tecla6                            0000033D
Tecla7                            00000347
Tecla8                            0000034C
Tecla9                            00000351
TeclaA                            0000032E
TeclaB                            00000342
TeclaC                            00000356
TeclaD                            0000036A
Tecla_asterisco                   0000035B
Termina_teclado                   0000017E
UA                                00000001
VALIDA_ADMIN                      0000070B
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 107


SYMBOL TABLE
  LABEL                             VALUE 

VERIFICA_ACCESO                   000006CC
Var                               00000029
Variables_iniciales               0000011C
W                                 00000000
WCOL                              00000007
WR                                00000001
WREN                              00000002
WRERR                             00000003
WRITE_EEPROMlit                   
WRITE_EEPROMvar                   
Z                                 00000002
_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_BOREN_OFF                        00003FBF
_BOREN_ON                         00003FFF
_CONFIG                           00002007
_CPD_OFF                          00003FFF
_CPD_ON                           00003EFF
_CP_ALL                           00001FFF
_CP_OFF                           00003FFF
_CP_ON                            00001FFF
_DEBUG_OFF                        00003FFF
_DEBUG_ON                         000037FF
_DEVID1                           00002006
_FOSC_EXTRC                       00003FFF
_FOSC_HS                          00003FFE
_FOSC_LP                          00003FFC
_FOSC_XT                          00003FFD
_HS_OSC                           00003FFE
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_LP_OSC                           00003FFC
_LVP_OFF                          00003F7F
_LVP_ON                           00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDTE_OFF                         00003FFB
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_WRT_1FOURTH                      00003BFF
_WRT_256                          00003DFF
_WRT_HALF                         000039FF
_WRT_OFF                          00003FFF
_XT_OSC                           00003FFD
__16F877A                         00000001
__DEBUG                           1
ad_cambiar_claves                 000002E8
admin_acept                       000002C9
almacenaje                        00000023
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 108


SYMBOL TABLE
  LABEL                             VALUE 

aux_eeprom                        00000033
aux_eeprom1                       00000034
aux_eeprom2                       00000035
aux_eeprom3                       00000036
aux_eeprom4                       00000037
aux_menu                          00000038
banco0                            
banco1                            
banco2                            
banco3                            
cambia_accesosd                   00000255
cambia_clavesd                    0000024F
carga                             Load
clave_usuario1                    0000059C
clave_usuario2                    000005B9
clave_usuario3                    000005D6
clave_usuarioA                    000005F3
cont_clave                        00000024
continua_prog                     00000142
d1                                00000025
d2                                00000026
d3                                00000027
d4                                00000028
dispctrl                          00000004
emenu0_2                          0000019F
emenu1_2                          000001BC
emenu2_2                          000001E6
emenu3_2                          0000022F
emenu4_2                          00000277
emenu5_2                          0000029F
emenu6_2                          000002F3
enciende                          0000031D
fin_sensor                        0000031E
final_admina                      000002ED
final_claveA                      0000060F
final_salaA                       00000673
final_salaB                       000006CB
finalmenus_2                      00000317
general_lcd                       00000032
imprimelit                        
imprimevar                        
llave                             00000039
llena                             
menu                              00000020
menu0                             000000FE
menu1                             000000B9
menu2                             000000CA
menu3                             00000077
menu4                             00000035
menu5                             0000036F
menu6                             00000418
otra_d                            00000270
reinicia_var                      00000702
MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 109


SYMBOL TABLE
  LABEL                             VALUE 

sala                              00000021
usuario                           00000022
vsala2                            000006D8
vsala3                            000006E3
vsala4                            000006EE
vsalaadmin                        000006F9
vsalarechaza                      00000700


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
03C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
04C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0580 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
05C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0600 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0640 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0680 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
06C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0700 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0740 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0780 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
07C0 : XXXXXXXXXXXXXXXX XXXXXXXXX------- ---------------- ----------------
2000 : -------X-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:  2009
Program Memory Words Free:  6183


MPASM  5.51                AUTOMATIZACION.ASM   6-28-2019  3:56:32         PAGE 110





Errors   :     0
Warnings :    21 reported,     0 suppressed
Messages :   114 reported,     0 suppressed

